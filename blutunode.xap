	MODULE	crt0
	.LARGE			; Not really, but we need the space for DEBUG

; Define the segment layout

	.SEG	VAREND
	.PACK	{INIT, VAR, VAREND}, {H'400, H'800}
	.PACK	{CONST, INITC}, {H'7400, H'D400}

; This segment holds stabs debug info and doesn't make it onto bluecore

	.CSEG	DEBUG
	ORG	H'10000

; Put labels at selected positions so
; we can deduce segment size and placement

	.SEG	INIT
INIT:
	.SEG	VAR
VAR:
	.SEG	VAREND
VAREND:
	.SEG	CONST
CONST:
	.SEG	INITC
INITC:

$XAP_AH	EQU H'ffe0
$XAP_AL	EQU H'ffe1
$XAP_UXL	EQU H'ffe2
$XAP_UY	EQU H'ffe3

; Put the version number at the start of the CONST segment

	.SEG	CONST
	DC	1541 ;  updated by Makefile from syscalls

; ****************************************************************************
; Startup code
; ****************************************************************************

	.CODE
	ORG	H'0000
	
	ld	al,#VAR-INIT ; Size of INIT segment
	ld	ah,#INIT
	ld	x,#INITC
	bc2
	; AL is now zero
	ld	ah,#VAREND-VAR	;  Size of BSS segment
	beq	skip_zero
	ld 	x,#VAR
loop_zero:
	st	al,@(0,x)
	add	x,#1
	sub	ah,#1
	bne	loop_zero
skip_zero:

	; call init code, normally empty
	bsr	$__init

	ld	ah,#0
	ld	al,#0
	bsr	$_main

	; Main may exit by returning or by explicitly calling $exit.
	; In either case exit code will be in AH
	; Note 'real' programs are unlikely to exit.

	bra	$_exit

$_abort:
	; Exit abnormally
	ld	ah,#1
	bra	$_exit


_exit	EQU	$_exit
	ENDMOD
	MODULE	malloc
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_malloc:
	DC	((256*3)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	malloc
	MODULE	free
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_free:
	DC	((256*4)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	free
	MODULE	realloc
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_realloc:
	DC	((256*5)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	realloc
	MODULE	memmove
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_memmove:
	DC	((256*6)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	memmove
	MODULE	exit
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_exit:
	DC	((256*7)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	exit
	MODULE	MessageSendLater
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageSendLater:
	DC	((256*9)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessageSendLater
	MODULE	MessageCancelFirst
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageCancelFirst:
	DC	((256*10)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessageCancelFirst
	MODULE	Panic
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_Panic:
	DC	((256*14)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	Panic
	MODULE	PanicNull
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PanicNull:
	DC	((256*15)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PanicNull
	MODULE	PsStore
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PsStore:
	DC	((256*17)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PsStore
	MODULE	PsRetrieve
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PsRetrieve:
	DC	((256*18)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PsRetrieve
	MODULE	PsFullRetrieve
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PsFullRetrieve:
	DC	((256*21)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PsFullRetrieve
	MODULE	UtilFind
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_UtilFind:
	DC	((256*23)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	UtilFind
	MODULE	UtilGetNumber
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_UtilGetNumber:
	DC	((256*24)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	UtilGetNumber
	MODULE	VmGetClock
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmGetClock:
	DC	((256*28)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	VmGetClock
	MODULE	VmDeepSleepEnable
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmDeepSleepEnable:
	DC	((256*35)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	VmDeepSleepEnable
	MODULE	MessagePioTask
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessagePioTask:
	DC	((256*36)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessagePioTask
	MODULE	PioDebounce
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioDebounce:
	DC	((256*37)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PioDebounce
	MODULE	PioGet
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioGet:
	DC	((256*38)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PioGet
	MODULE	PioSet
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioSet:
	DC	((256*39)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PioSet
	MODULE	PioGetDir
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioGetDir:
	DC	((256*40)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PioGetDir
	MODULE	PioSetDir
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioSetDir:
	DC	((256*41)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PioSetDir
	MODULE	PioGetStrongBias
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioGetStrongBias:
	DC	((256*42)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PioGetStrongBias
	MODULE	PioSetStrongBias
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioSetStrongBias:
	DC	((256*43)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PioSetStrongBias
	MODULE	AdcRequest
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_AdcRequest:
	DC	((256*45)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	AdcRequest
	MODULE	PanicUnlessMalloc
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PanicUnlessMalloc:
	DC	((256*47)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PanicUnlessMalloc
	MODULE	PioSetRts
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioSetRts:
	DC	((256*55)+9)
	rts
trapset_6	EQU	$trapset_6
	ENDMOD	PioSetRts
	MODULE	PioGetCts
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioGetCts:
	DC	((256*56)+9)
	rts
trapset_6	EQU	$trapset_6
	ENDMOD	PioGetCts
	MODULE	SinkClaim
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_SinkClaim:
	DC	((256*63)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	SinkClaim
	MODULE	SinkMap
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_SinkMap:
	DC	((256*64)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	SinkMap
	MODULE	SinkFlush
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_SinkFlush:
	DC	((256*65)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	SinkFlush
	MODULE	SourceSize
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_SourceSize:
	DC	((256*66)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	SourceSize
	MODULE	SourceDrop
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_SourceDrop:
	DC	((256*67)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	SourceDrop
	MODULE	SourceMap
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_SourceMap:
	DC	((256*68)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	SourceMap
	MODULE	StreamConfigure
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamConfigure:
	DC	((256*70)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	StreamConfigure
	MODULE	StreamSinkFromSource
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamSinkFromSource:
	DC	((256*75)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	StreamSinkFromSource
	MODULE	SinkGetBdAddr
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_SinkGetBdAddr:
	DC	((256*84)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	SinkGetBdAddr
	MODULE	MessageSinkTask
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageSinkTask:
	DC	((256*85)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	MessageSinkTask
	MODULE	MessageSinkGetTask
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageSinkGetTask:
	DC	((256*86)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	MessageSinkGetTask
	MODULE	StreamSinksFromBdAddr
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamSinksFromBdAddr:
	DC	((256*87)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	StreamSinksFromBdAddr
	MODULE	VmSendRfcommPrim
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmSendRfcommPrim:
	DC	((256*102)+9)
	rts
trapset_14	EQU	$trapset_14
	ENDMOD	VmSendRfcommPrim
	MODULE	StreamRfcommSink
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamRfcommSink:
	DC	((256*103)+9)
	rts
trapset_14	EQU	$trapset_14
	ENDMOD	StreamRfcommSink
	MODULE	VmSendL2capPrim
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmSendL2capPrim:
	DC	((256*106)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmSendL2capPrim
	MODULE	VmSendDmPrim
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmSendDmPrim:
	DC	((256*107)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmSendDmPrim
	MODULE	VmSendSdpPrim
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmSendSdpPrim:
	DC	((256*108)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmSendSdpPrim
	MODULE	VmGetHandleFromPointer
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmGetHandleFromPointer:
	DC	((256*109)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmGetHandleFromPointer
	MODULE	VmGetPointerFromHandle
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmGetPointerFromHandle:
	DC	((256*110)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmGetPointerFromHandle
	MODULE	MessageBlueStackTask
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageBlueStackTask:
	DC	((256*111)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	MessageBlueStackTask
	MODULE	StreamL2capSink
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamL2capSink:
	DC	((256*112)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	StreamL2capSink
	MODULE	VmUseExtendedBluestackPrimitives
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmUseExtendedBluestackPrimitives:
	DC	((256*148)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmUseExtendedBluestackPrimitives
	MODULE	VmGetAvailableAllocations
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmGetAvailableAllocations:
	DC	((256*221)+9)
	rts
trapset_39	EQU	$trapset_39
	ENDMOD	VmGetAvailableAllocations
	MODULE	VmGetTemperature
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmGetTemperature:
	DC	((256*222)+9)
	rts
trapset_40	EQU	$trapset_40
	ENDMOD	VmGetTemperature
	MODULE	putchar
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_putchar:
	DC	((256*8)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	putchar
	MODULE	MessageWait
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageWait:
	DC	((256*11)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessageWait
	MODULE	MessageSendConditionally
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageSendConditionally:
	DC	((256*12)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessageSendConditionally
	MODULE	MessageFree
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageFree:
	DC	((256*13)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessageFree
	MODULE	StreamSourceFromSink
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamSourceFromSink:
	DC	((256*74)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	StreamSourceFromSink
	MODULE	trapset_1
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_1:
	ENDMOD	trapset_1
	MODULE	trapset_16
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_16:
	ENDMOD	trapset_16
	MODULE	trapset_40
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_40:
	ENDMOD	trapset_40
	MODULE	trapset_14
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_14:
	ENDMOD	trapset_14
	MODULE	trapset_11
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_11:
	ENDMOD	trapset_11
	MODULE	trapset_6
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_6:
	ENDMOD	trapset_6
	MODULE	trapset_39
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_39:
	ENDMOD	trapset_39
	MODULE	VmPutChar
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmPutChar:
	DC	((256*27)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	VmPutChar
	MODULE	e_t_c

	.ALL
e_t_c:
	ENDMOD
	MODULE	btnode
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -ID:/BlueLab41/tools/include/firmware
;# -ID:/BlueLab41/tools/include/standard
;# -ID:/BlueLab41/tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	INIT
_input_echo:
	DS	1
	.SEG	INITC
	dc	H'0001
	.CODE
$_sink_write:
	enter	#5
?LBB_sink_write:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	ld	AL,@(H'0005,Y)
;	bsr	$_SinkClaim
	DC	((256*63)+9)
	st	AH,@(H'0003,Y)
	ld	AH,@(H'0001,Y)
;	bsr	$_SinkMap
	DC	((256*64)+9)
	add	AH,@(H'0003,Y)
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	bsr	$_memcpy
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0005,Y)
;	bsr	$_SinkFlush
	DC	((256*65)+9)
?LBE2:
?LBE_sink_write:
	leave	#5
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
$_sink_write_str:
	enter	#4
?LBB_sink_write_str:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@$XAP_AL
	bsr	$_strlen
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0002,Y)
	bsr	$_sink_write
?LBE_sink_write_str:
	leave	#4
_handle_input_data:
	enter	#11
?LBB_handle_input_data:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	add	AH,#H'0002
	st	AH,@(H'0009,Y)
?LBB3:
	bra	(?L22)
?L20:
?LBB4:
	ld	AH,@(H'0002,Y)
;	bsr	$_SourceMap
	DC	((256*68)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0000
	st	AL,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	AH,@(H'0003,Y)
	st	AH,@(H'0005,Y)
	cmp	AH,#H'0000
	beq	?L8
	ld	AL,@(H'0001,Y)
	add	AL,#H'0002
	st	AL,@(H'0008,Y)
?L18:
	ld	X,@(H'0004,Y)
	ld	X,@(0,X)
	st	X,@(H'0007,Y)
	ld	AH,@(H'0004,Y)
	add	AH,#H'0001
	st	AH,@(H'0004,Y)
	ld	AL,@(H'0006,Y)
	add	AL,#H'0001
	st	AL,@(H'0006,Y)
	cmp	X,#H'0008
	beq	?L12
	cmp	X,#H'007F
	bne	?L11
?L12:
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0052,X)
	cmp	AL,@(H'0008,Y)
	bcz	?L9
	add	AL,#-H'0001
	st	AL,@(H'0052,X)
	ld	AH,@(H'0002,Y)
;	bsr	$_StreamSinkFromSource
	DC	((256*75)+9)
	ld	AL,#H'0003
	st	AL,@(0,Y)
	ld	AL,#(?LC0)
	bsr	$_sink_write
	bra	(?L9)
?L11:
	tst	@_input_echo
	beq	?L14
	ld	AH,@(H'0007,Y)
	cmp	AH,#H'000D
	bne	?L15
	ld	AH,@(H'0002,Y)
;	bsr	$_StreamSinkFromSource
	DC	((256*75)+9)
	ld	AL,#H'0002
	st	AL,@(0,Y)
	ld	AL,#(?LC1)
	bra	(?L23)
?L15:
	ld	AH,@(H'0002,Y)
;	bsr	$_StreamSinkFromSource
	DC	((256*75)+9)
	ld	AL,@(H'0004,Y)
	add	AL,#-H'0001
	ld	X,#H'0001
	st	X,@(0,Y)
?L23:
	bsr	$_sink_write
?L14:
	ld	X,@(H'0001,Y)
	ld	X,@(H'0052,X)
	ld	AH,@(H'0007,Y)
	st	AH,@(0,X)
	ld	AL,#H'0001
	add	AL,@$XAP_UXL
	ld	X,@(H'0001,Y)
	st	AL,@(H'0052,X)
	cmp	AH,#H'000D
	beq	?L8
?L9:
	ld	AH,@(H'0005,Y)
	add	AH,#-H'0001
	st	AH,@(H'0005,Y)
	cmp	AH,#H'0000
	bne	?L18
?L8:
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'0006,Y)
;	bsr	$_SourceDrop
	DC	((256*67)+9)
	ld	AL,@(H'0007,Y)
	cmp	AL,#H'000D
	bne	?L22
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0052,X)
	ld	AL,#H'0000
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AH,@(H'0002,Y)
;	bsr	$_StreamSinkFromSource
	DC	((256*75)+9)
	ld	AL,@$XAP_AH
	ld	AH,@(H'0009,Y)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	bsr	$_process_line
	ld	AH,@(H'0009,Y)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0052,X)
?L22:
?LBE4:
	ld	AH,@(H'0002,Y)
;	bsr	$_SourceSize
	DC	((256*66)+9)
	st	AH,@(H'0003,Y)
	cmp	AH,#H'0000
	beq	?L30
	bpl	?L20
?L30:
?LBE3:
?LBE_handle_input_data:
	leave	#11
	.SEG	CONST
?LC0:
	dc	H'08
	dc	H'20
	dc	H'08
	dc	H'00
?LC1:
	dc	H'0D
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB3
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;.stabn	224,0,0,?LBE3
_task_handler:
	enter	#46
?LBB_task_handler:
	ld	X,@(H'002E,Y)
?LBB5:
	st	AH,@(H'002C,Y)
	cmp	AL,#H'7025
	beq	?L36
	cmp	AL,#(H'0001+H'7025)
	bcc	?L47
	cmp	AL,#H'7014
	beq	?L44
	cmp	AL,#(H'0001+H'7014)
	bcc	?L48
	cmp	AL,#H'000A
	beq	?L42
	cmp	AL,#H'7000
	beq	?L33
	bra	(?L31)
?L48:
	cmp	AL,#H'7017
	beq	?L43
	cmp	AL,#H'701E
	beq	?L35
	bra	(?L31)
?L47:
	cmp	AL,#H'7037
	beq	?L37
	cmp	AL,#(H'0001+H'7037)
	bcc	?L49
	cmp	AL,#H'7035
	beq	?L34
	cmp	AL,#H'7036
	beq	?L38
	bra	(?L31)
?L49:
	cmp	AL,#-H'7FDD
	beq	?L41
	cmp	AL,#(H'0001-H'7FDD)
	bcc	?L50
	cmp	AL,#-H'7FDF
	beq	?L39
	bra	(?L31)
?L50:
	cmp	AL,#-H'7FDB
	beq	?L40
	bra	(?L31)
?L33:
	bsr	$_ConnectionRfcommAllocateChannel
	bra	(?L31)
?L34:
	ld	AH,#H'0003
	bsr	$_ConnectionWriteScanEnable
	bra	(?L31)
?L35:
?LBB6:
	ld	AL,#(?LC2)
	st	AL,@(0,Y)
	ld	AH,@$XAP_UXL
	ld	AL,#H'0004
	bsr	$_ConnectionSmPinCodeResponse
?LBE6:
	bra	(?L31)
?L36:
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
?LBB7:
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AL,@(H'0007,X)
	st	AL,@(H'0002,Y)
	ld	AL,#H'0001
	st	AL,@(H'0003,Y)
	ld	AH,@$XAP_UXL
	ld	AL,@(H'0004,X)
	bsr	$_ConnectionSmAuthoriseResponse
?LBE7:
	bra	(?L31)
?L37:
?LBB8:
	st	X,@(0,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	ld	AL,#H'0001
	bsr	$_ConnectionRfcommConnectResponse
?LBE8:
	bra	(?L31)
?L38:
?LBB9:
	ld	AL,@(H'0003,X)
	ld	X,@(H'002C,Y)
	st	AL,@(H'0001,X)
	bsr	$_command_software_version
?LBE9:
	bra	(?L31)
?L39:
?LBB10:
	ld	AH,@(H'002C,Y)
	ld	AL,@(0,X)
	bsr	_handle_input_data
?LBE10:
	bra	(?L31)
?L40:
?LBB11:
	ld	AL,#(?LC3)
	st	AL,@(0,Y)
	ld	AL,@(0,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0003,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0004
	bsr	$_sprintf
	ld	X,@(H'002C,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bra	(?L51)
?L41:
?LBE11:
?LBB12:
	ld	AL,#(?LC4)
	st	AL,@(0,Y)
	ld	AL,@(0,X)
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0018
	bsr	$_sprintf
	ld	X,@(H'002C,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0018
?L51:
	bsr	$_sink_write_str
?LBE12:
	bra	(?L31)
?L42:
	ld	AH,@(H'002C,Y)
	bsr	$_command_poll_handle
	bra	(?L31)
?L43:
?LBB13:
	ld	AH,@(H'002C,Y)
	ld	AL,@$XAP_UXL
	bsr	$_command_bt_version_handle
?LBE13:
	bra	(?L31)
?L44:
?LBB14:
	ld	AH,@(H'002C,Y)
	ld	AL,@$XAP_UXL
	bsr	$_command_local_version_handle
?L31:
?LBE14:
?LBE5:
?LBE_task_handler:
	leave	#46
	.SEG	CONST
?LC2:
	dc	H'31
	dc	H'32
	dc	H'33
	dc	H'34
	dc	H'00
?LC3:
	dc	H'41
	dc	H'44
	dc	H'43
	dc	H'25
	dc	H'64
	dc	H'3D
	dc	H'25
	dc	H'64
	dc	H'20
	dc	H'28
	dc	H'25
	dc	H'64
	dc	H'29
	dc	H'0D
	dc	H'0A
	dc	H'00
?LC4:
	dc	H'47
	dc	H'50
	dc	H'49
	dc	H'4F
	dc	H'3D
	dc	H'25
	dc	H'75
	dc	H'0D
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB5
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
;.stabn	224,0,0,?LBE5
	.SEG	VAR
_app?0?:
	DS	85
	.CODE
$_main:
	enter	#1
?LBB_main:
?LBB15:
	ld	AL,#lwrd(_task_handler)
	st	AL,@_app?0?
	ld	AL,#(_app?0?+H'0002)
	st	AL,@_app?0?+H'0052
	ld	AH,#(_app?0?)
;	bsr	$_MessagePioTask
	DC	((256*36)+9)
	ld	AH,#(_app?0?)
	bsr	$_ConnectionInit
	bsr	$_MessageLoop
?LBE15:
	ld	AH,#H'0000
?LBE_main:
	leave	#1
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
	ENDMOD

;# Function pattern *movqi2 used[0] = 52 used[1] = 22 total = 74
;# Function pattern *movqi3 used[0] = 46 total = 46
;# Function pattern *movqi8 used[0] = 9 total = 9
;# Function pattern *movhi used[2] = 1 used[3] = 1 total = 2
;# Function pattern *addqi0 used[0] = 4 total = 4
;# Function pattern *addqi2 used[0] = 8 used[2] = 1 total = 9
;# Function pattern jump used[0] = 19 total = 19
;# Function pattern *call1 used[0] = 18 total = 18
;# Function pattern *call_value1 used[0] = 14 total = 14
;# Function pattern movstrqi+3 used[0] = 3 used[1] = 1 total = 4
;# Function pattern movstrqi+4 used[1] = 4 total = 4
;# Function pattern movstrqi+5 used[0] = 18 total = 18
	MODULE	command_parse
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -ID:/BlueLab41/tools/include/firmware
;# -ID:/BlueLab41/tools/include/standard
;# -ID:/BlueLab41/tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_skip1:
	enter	#1
?LBB_skip1:
	ld	X,@$XAP_AH
	cmp	AH,#H'0000
	beq	?L2
	cmp	AH,@$XAP_AL
	beq	?L2
	ld	AH,@(0,X)
	cmp	AH,#H'0020
	beq	?L9
	cmp	AH,#H'0009
	bne	?L2
?L9:
	add	X,#H'0001
	cmp	X,@$XAP_AL
	beq	?L2
	ld	AH,@(0,X)
	cmp	AH,#H'0020
	beq	?L9
	cmp	AH,#H'0009
	beq	?L9
?L2:
	ld	AH,@$XAP_UXL
?LBE_skip1:
	leave	#1
_skip2:
	enter	#1
?LBB_skip2:
	ld	X,@$XAP_AH
	ld	AH,@$XAP_AL
	cmp	X,#H'0000
	beq	?L17
	cmp	X,@$XAP_AL
	beq	?L17
	ld	AL,@(0,X)
	cmp	AL,#H'003F
	bne	?L17
?L22:
	add	X,#H'0001
	cmp	X,@$XAP_AH
	beq	?L17
	ld	AL,@(0,X)
	cmp	AL,#H'003F
	beq	?L22
?L17:
	ld	AH,@$XAP_UXL
?LBE_skip2:
	leave	#1
_match1:
	enter	#1
?LBB_match1:
	ld	X,@$XAP_AH
	cmp	AH,#H'0000
	beq	?L29
	cmp	AH,@$XAP_AL
	beq	?L29
	ld	AL,@(0,X)
	cmp	AL,#H'000D
	beq	?L31
	cmp	AL,#H'000A
	bne	?L29
?L31:
	ld	AH,#H'0001
	add	AH,@$XAP_UXL
	bra	(?L30)
?L29:
	ld	AH,#H'0000
?L30:
?LBE_match1:
	leave	#1
_match2:
	enter	#1
?LBB_match2:
	ld	X,@$XAP_AH
	cmp	AH,#H'0000
	beq	?L36
	cmp	AH,@$XAP_AL
	beq	?L36
	ld	AL,@(0,X)
	cmp	AL,#H'003D
	beq	?L38
	cmp	AL,#H'003A
	bne	?L36
?L38:
	ld	AH,#H'0001
	add	AH,@$XAP_UXL
	bra	(?L37)
?L36:
	ld	AH,#H'0000
?L37:
?LBE_match2:
	leave	#1
_skipOnce1:
	enter	#1
?LBB_skipOnce1:
	ld	X,@$XAP_AH
	cmp	AH,#H'0000
	beq	?L43
	cmp	AH,@$XAP_AL
	beq	?L43
	ld	AL,@(0,X)
	cmp	AL,#H'002C
	beq	?L45
	cmp	AL,#H'003B
	bne	?L43
?L45:
	add	X,#H'0001
?L43:
	ld	AH,@$XAP_UXL
?LBE_skipOnce1:
	leave	#1
	.SEG	CONST
_isStringTable:
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0001
	dc	H'0000
	dc	H'0000
	dc	H'0001
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0001
	dc	H'0001
	dc	H'0000
	dc	H'0001
	dc	H'0000
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0000
	dc	H'0001
	dc	H'0000
	dc	H'0001
	dc	H'0001
	dc	H'0000
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0001
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	.CODE
_getString:
	enter	#1
?LBB_getString:
	st	AL,@H'fff9
?LBB2:
?LBB3:
	cmp	AH,#H'0000
	beq	?L51
	cmp	AH,@$XAP_AL
	beq	?L51
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	cmp	AL,#H'0022
	bne	?L51
	add	AH,#H'0001
?L51:
?LBE3:
	st	AH,@H'fff8
	cmp	AH,#H'0000
	beq	?L52
?LBB4:
	st	AH,@H'fffa
	bra	(?L53)
?L59:
	ld	AL,#H'0001
	add	AL,@H'fff8
	st	AL,@H'fff8
?L53:
	ld	X,@H'fff8
	cmp	X,@H'fff9
	beq	?L54
?LBB5:
	ld	AL,@(0,X)
	st	AL,@H'fffb
	ld	AH,#H'0000
	and	AL,#-H'0080
	cmp	AL,#H'0000
	bne	?L58
	ld	X,@H'fffb
	tst	@(_isStringTable,X)
	beq	?L58
	ld	AH,#H'0001
?L58:
?LBE5:
	cmp	AH,#H'0000
	bne	?L59
?L54:
	ld	AL,@H'fff8
	cmp	AL,@H'fffa
	beq	?L60
	ld	X,@(H'0001,Y)
	st	AL,@H'ffff
	ld	AL,@H'fffa
	st	AL,@(0,X)
	ld	AL,@H'ffff
	sub	AL,@H'fffa
	st	AL,@(H'0001,X)
?LBB6:
	ld	AH,@H'fff8
	tst	@H'fff8
	beq	?L49
	cmp	AH,@H'fff9
	beq	?L49
	ld	X,@H'fff8
	ld	AL,@(0,X)
	cmp	AL,#H'0022
	bne	?L49
	ld	AH,#H'0001
	add	AH,@H'fff8
?LBE6:
	bra	(?L49)
?L60:
?LBB7:
	ld	AH,@H'fff8
	tst	@H'fff8
	beq	?L65
	cmp	AL,@H'fff9
	beq	?L65
	ld	X,@H'fff8
	ld	AL,@(0,X)
	cmp	AL,#H'0022
	bne	?L65
	ld	AH,#H'0001
	add	AH,@H'fff8
?L65:
?LBE7:
	st	AH,@H'fff8
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	cmp	AL,#H'002C
	beq	?L67
	cmp	AL,#H'000D
	bne	?L52
?L67:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
	ld	AH,@H'fff8
	bra	(?L49)
?L52:
?LBE4:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
	ld	AH,#H'0000
?L49:
?LBE2:
?LBE_getString:
	leave	#1
;.stabn	192,0,0,?LBB4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;.stabn	224,0,0,?LBE4
_matchChar:
	enter	#1
?LBB_matchChar:
	ld	X,@$XAP_AH
	cmp	AH,#H'0000
	beq	?L79
	cmp	AH,@$XAP_AL
	beq	?L79
?LBB8:
	ld	AH,@(0,X)
	ld	AL,#-H'0061
	add	AL,@$XAP_AH
	cmp	AL,#(H'0001+H'0019)
	bcc	?L82
	add	AH,#-H'0020
?L82:
?LBE8:
	cmp	AH,@(H'0001,Y)
	bne	?L79
	ld	AH,#H'0001
	add	AH,@$XAP_UXL
	bra	(?L80)
?L79:
	ld	AH,#H'0000
?L80:
?LBE_matchChar:
	leave	#1
_findEndOfPacket:
	enter	#7
?LBB_findEndOfPacket:
	st	AH,@(H'0004,Y)
	st	AL,@(H'0005,Y)
?LBB9:
	cmp	AH,@$XAP_AL
	beq	?L110
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'000D
	bne	?L87
	ld	AL,@$XAP_UXL
	nadd	AL,@(H'0005,Y)
	cmp	AL,#H'0003
	ble	?L110
	ld	AL,@(H'0001,X)
	cmp	AL,#H'000A
	bne	?L115
	ld	AL,@(H'0002,X)
	cmp	AL,#H'000D
	beq	?L115
?LBB10:
	add	X,#H'0002
	st	X,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	ld	AL,#H'0001
	st	AL,@(H'0002,Y)
	ld	AL,@$XAP_UXL
	nadd	AL,@(H'0005,Y)
	st	AL,@(H'0003,Y)
	ld	AH,#-H'0001
	ld	AL,#H'000D
;	bsr	$_UtilFind
	DC	((256*23)+9)
	ld	X,@$XAP_AH
	cmp	AH,#H'0000
	beq	?L110
	ld	AL,#H'0001
	add	AL,@$XAP_AH
	cmp	AL,@(H'0005,Y)
	beq	?L110
	ld	AL,@(H'0001,X)
	cmp	AL,#H'000A
	bne	?L115
	add	AH,#H'0002
	bra	(?L85)
?L87:
?LBE10:
?LBB11:
	ld	X,@(H'0004,Y)
	cmp	X,@(H'0005,Y)
	beq	?L100
	ld	AL,@(0,X)
	cmp	AL,#H'0020
	beq	?L114
	cmp	AL,#H'000A
	beq	?L114
	cmp	AL,#H'0000
	beq	?L114
	cmp	AL,#H'0009
	bne	?L100
?L114:
	add	X,#H'0001
	cmp	X,@(H'0005,Y)
	beq	?L100
	ld	AL,@(0,X)
	cmp	AL,#H'0020
	beq	?L114
	cmp	AL,#H'000A
	beq	?L114
	cmp	AL,#H'0000
	beq	?L114
	cmp	AL,#H'0009
	beq	?L114
?L100:
	cmp	X,@(H'0005,Y)
	beq	?L104
	ld	AL,@(0,X)
	cmp	AL,#H'000D
	bne	?L104
?L115:
	ld	AH,@(H'0004,Y)
	add	AH,#H'0001
	bra	(?L85)
?L104:
	cmp	X,@(H'0005,Y)
	beq	?L106
	ld	AL,@(0,X)
	cmp	AL,#H'000D
	beq	?L106
?L109:
	add	X,#H'0001
	cmp	X,@(H'0005,Y)
	beq	?L106
	ld	AL,@(0,X)
	cmp	AL,#H'000D
	bne	?L109
?L106:
	cmp	X,@(H'0005,Y)
	beq	?L110
	ld	AH,#H'0001
	add	AH,@$XAP_UXL
	bra	(?L85)
?L110:
	ld	AH,#H'0000
?L85:
?LBE11:
?LBE9:
?LBE_findEndOfPacket:
	leave	#7
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
$_parseSource:
	enter	#5
?LBB_parseSource:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB12:
;	bsr	$_SourceMap
	DC	((256*68)+9)
	st	AH,@(H'0003,Y)
	ld	AH,@(H'0001,Y)
;	bsr	$_SourceSize
	DC	((256*66)+9)
	ld	AL,@(H'0003,Y)
	add	AL,@$XAP_AH
	ld	AH,@(H'0002,Y)
	st	AH,@(0,Y)
	ld	AH,@(H'0003,Y)
	bsr	$_parseData
	cmp	AH,@(H'0003,Y)
	beq	?L139
	ld	AL,@(H'0003,Y)
	nadd	AL,@$XAP_AH
	ld	AH,@(H'0001,Y)
;	bsr	$_SourceDrop
	DC	((256*67)+9)
	ld	AH,#H'0001
	bra	(?L138)
?L139:
	ld	AH,#H'0000
?L138:
?LBE12:
?LBE_parseSource:
	leave	#5
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
	.SEG	CONST
_arcs:
	dc	H'0009
	dc	H'0000
	dc	H'0020
	dc	H'0000
	dc	H'0041
	dc	H'0001
	dc	H'0054
	dc	H'0002
	dc	H'0009
	dc	H'0002
	dc	H'000A
	dc	H'FFFF
	dc	H'000D
	dc	H'FFFF
	dc	H'0020
	dc	H'0002
	dc	H'002B
	dc	H'0003
	dc	H'0009
	dc	H'0003
	dc	H'0020
	dc	H'0003
	dc	H'0041
	dc	H'0004
	dc	H'0042
	dc	H'0005
	dc	H'0043
	dc	H'0006
	dc	H'0047
	dc	H'0007
	dc	H'004C
	dc	H'0008
	dc	H'0050
	dc	H'0009
	dc	H'0052
	dc	H'000A
	dc	H'0053
	dc	H'000B
	dc	H'0054
	dc	H'000C
	dc	H'0056
	dc	H'000D
	dc	H'0044
	dc	H'000E
	dc	H'004C
	dc	H'000F
	dc	H'0054
	dc	H'0010
	dc	H'004C
	dc	H'0011
	dc	H'0054
	dc	H'0012
	dc	H'0050
	dc	H'0013
	dc	H'004F
	dc	H'0014
	dc	H'004F
	dc	H'0015
	dc	H'0053
	dc	H'0016
	dc	H'0054
	dc	H'0017
	dc	H'004C
	dc	H'0018
	dc	H'0045
	dc	H'0019
	dc	H'0045
	dc	H'001A
	dc	H'0043
	dc	H'FFFE
	dc	H'004C
	dc	H'001B
	dc	H'0056
	dc	H'001C
	dc	H'004B
	dc	H'001D
	dc	H'0053
	dc	H'001E
	dc	H'0049
	dc	H'001F
	dc	H'0043
	dc	H'0020
	dc	H'004C
	dc	H'0021
	dc	H'004B
	dc	H'0022
	dc	H'0053
	dc	H'0023
	dc	H'0045
	dc	H'0024
	dc	H'004D
	dc	H'0025
	dc	H'0052
	dc	H'0026
	dc	H'004F
	dc	H'0027
	dc	H'0045
	dc	H'0028
	dc	H'0009
	dc	H'001D
	dc	H'000A
	dc	H'FFFD
	dc	H'000D
	dc	H'FFFD
	dc	H'0020
	dc	H'001D
	dc	H'003F
	dc	H'0029
	dc	H'0009
	dc	H'001E
	dc	H'000A
	dc	H'FFFC
	dc	H'000D
	dc	H'FFFC
	dc	H'0020
	dc	H'001E
	dc	H'003F
	dc	H'002A
	dc	H'004F
	dc	H'FFFB
	dc	H'0041
	dc	H'002B
	dc	H'004C
	dc	H'002C
	dc	H'0045
	dc	H'002D
	dc	H'0009
	dc	H'0023
	dc	H'0020
	dc	H'0023
	dc	H'003A
	dc	H'FFFA
	dc	H'003D
	dc	H'FFFA
	dc	H'0045
	dc	H'002E
	dc	H'0050
	dc	H'002F
	dc	H'0009
	dc	H'0030
	dc	H'000A
	dc	H'FFF9
	dc	H'000D
	dc	H'FFF9
	dc	H'0020
	dc	H'0030
	dc	H'003F
	dc	H'0031
	dc	H'0053
	dc	H'0032
	dc	H'0043
	dc	H'0033
	dc	H'0052
	dc	H'0034
	dc	H'0009
	dc	H'0035
	dc	H'000A
	dc	H'FFFD
	dc	H'000D
	dc	H'FFFD
	dc	H'0020
	dc	H'0035
	dc	H'003F
	dc	H'0029
	dc	H'0009
	dc	H'0036
	dc	H'000A
	dc	H'FFFC
	dc	H'000D
	dc	H'FFFC
	dc	H'0020
	dc	H'0036
	dc	H'003F
	dc	H'002A
	dc	H'004C
	dc	H'0037
	dc	H'0009
	dc	H'002C
	dc	H'0020
	dc	H'002C
	dc	H'003A
	dc	H'FFF8
	dc	H'003D
	dc	H'FFF8
	dc	H'0059
	dc	H'FFF7
	dc	H'0050
	dc	H'0038
	dc	H'0009
	dc	H'002F
	dc	H'000A
	dc	H'FFF6
	dc	H'000D
	dc	H'FFF6
	dc	H'0020
	dc	H'002F
	dc	H'003F
	dc	H'0039
	dc	H'0009
	dc	H'0030
	dc	H'000A
	dc	H'FFF9
	dc	H'000D
	dc	H'FFF9
	dc	H'0020
	dc	H'0030
	dc	H'003F
	dc	H'0031
	dc	H'0009
	dc	H'003A
	dc	H'000A
	dc	H'FFF9
	dc	H'000D
	dc	H'FFF9
	dc	H'0020
	dc	H'003A
	dc	H'003F
	dc	H'0031
	dc	H'0049
	dc	H'003B
	dc	H'0009
	dc	H'0033
	dc	H'000A
	dc	H'FFF5
	dc	H'000D
	dc	H'FFF5
	dc	H'0020
	dc	H'0033
	dc	H'003F
	dc	H'003C
	dc	H'0009
	dc	H'0034
	dc	H'000A
	dc	H'FFF4
	dc	H'000D
	dc	H'FFF4
	dc	H'0020
	dc	H'0034
	dc	H'003F
	dc	H'003D
	dc	H'0009
	dc	H'0035
	dc	H'000A
	dc	H'FFFD
	dc	H'000D
	dc	H'FFFD
	dc	H'0020
	dc	H'0035
	dc	H'0009
	dc	H'0036
	dc	H'000A
	dc	H'FFFC
	dc	H'000D
	dc	H'FFFC
	dc	H'0020
	dc	H'0036
	dc	H'0056
	dc	H'003E
	dc	H'0009
	dc	H'0038
	dc	H'0020
	dc	H'0038
	dc	H'003A
	dc	H'FFF3
	dc	H'003D
	dc	H'FFF3
	dc	H'0009
	dc	H'003F
	dc	H'000A
	dc	H'FFF6
	dc	H'000D
	dc	H'FFF6
	dc	H'0020
	dc	H'003F
	dc	H'003F
	dc	H'0039
	dc	H'0009
	dc	H'003A
	dc	H'000A
	dc	H'FFF9
	dc	H'000D
	dc	H'FFF9
	dc	H'0020
	dc	H'003A
	dc	H'004F
	dc	H'0040
	dc	H'0009
	dc	H'0041
	dc	H'000A
	dc	H'FFF5
	dc	H'000D
	dc	H'FFF5
	dc	H'0020
	dc	H'0041
	dc	H'003F
	dc	H'003C
	dc	H'0009
	dc	H'0042
	dc	H'000A
	dc	H'FFF4
	dc	H'000D
	dc	H'FFF4
	dc	H'0020
	dc	H'0042
	dc	H'003F
	dc	H'003D
	dc	H'0045
	dc	H'0043
	dc	H'0009
	dc	H'003F
	dc	H'000A
	dc	H'FFF6
	dc	H'000D
	dc	H'FFF6
	dc	H'0020
	dc	H'003F
	dc	H'004E
	dc	H'0030
	dc	H'0009
	dc	H'0041
	dc	H'000A
	dc	H'FFF5
	dc	H'000D
	dc	H'FFF5
	dc	H'0020
	dc	H'0041
	dc	H'0009
	dc	H'0042
	dc	H'000A
	dc	H'FFF4
	dc	H'000D
	dc	H'FFF4
	dc	H'0020
	dc	H'0042
	dc	H'0052
	dc	H'0044
	dc	H'0009
	dc	H'0044
	dc	H'000A
	dc	H'FFF2
	dc	H'000D
	dc	H'FFF2
	dc	H'0020
	dc	H'0044
	dc	H'003F
	dc	H'0045
	dc	H'0009
	dc	H'0046
	dc	H'000A
	dc	H'FFF2
	dc	H'000D
	dc	H'FFF2
	dc	H'0020
	dc	H'0046
	dc	H'003F
	dc	H'0045
	dc	H'0009
	dc	H'0046
	dc	H'000A
	dc	H'FFF2
	dc	H'000D
	dc	H'FFF2
	dc	H'0020
	dc	H'0046
_states:
	dc	_arcs
	dc	_arcs + (H'0006)
	dc	_arcs + (H'0008)
	dc	_arcs + (H'0012)
	dc	_arcs + (H'002A)
	dc	_arcs + (H'002E)
	dc	_arcs + (H'0030)
	dc	_arcs + (H'0034)
	dc	_arcs + (H'0036)
	dc	_arcs + (H'0038)
	dc	_arcs + (H'003C)
	dc	_arcs + (H'003E)
	dc	_arcs + (H'0040)
	dc	_arcs + (H'0042)
	dc	_arcs + (H'0044)
	dc	_arcs + (H'0046)
	dc	_arcs + (H'0048)
	dc	_arcs + (H'004A)
	dc	_arcs + (H'004C)
	dc	_arcs + (H'004E)
	dc	_arcs + (H'0050)
	dc	_arcs + (H'0052)
	dc	_arcs + (H'0054)
	dc	_arcs + (H'0056)
	dc	_arcs + (H'0058)
	dc	_arcs + (H'005A)
	dc	_arcs + (H'005C)
	dc	_arcs + (H'005E)
	dc	_arcs + (H'0060)
	dc	_arcs + (H'0062)
	dc	_arcs + (H'006C)
	dc	_arcs + (H'0076)
	dc	_arcs + (H'0078)
	dc	_arcs + (H'007A)
	dc	_arcs + (H'007C)
	dc	_arcs + (H'007E)
	dc	_arcs + (H'0086)
	dc	_arcs + (H'0088)
	dc	_arcs + (H'008A)
	dc	_arcs + (H'0096)
	dc	_arcs + (H'0098)
	dc	_arcs + (H'009A)
	dc	_arcs + (H'00A4)
	dc	_arcs + (H'00AE)
	dc	_arcs + (H'00B0)
	dc	_arcs + (H'00B8)
	dc	_arcs + (H'00BA)
	dc	_arcs + (H'00BC)
	dc	_arcs + (H'00C6)
	dc	_arcs + (H'00D0)
	dc	_arcs + (H'00DA)
	dc	_arcs + (H'00DC)
	dc	_arcs + (H'00E6)
	dc	_arcs + (H'00F0)
	dc	_arcs + (H'00F8)
	dc	_arcs + (H'0100)
	dc	_arcs + (H'0102)
	dc	_arcs + (H'010A)
	dc	_arcs + (H'0114)
	dc	_arcs + (H'011C)
	dc	_arcs + (H'011E)
	dc	_arcs + (H'0128)
	dc	_arcs + (H'0132)
	dc	_arcs + (H'0134)
	dc	_arcs + (H'013C)
	dc	_arcs + (H'013E)
	dc	_arcs + (H'0146)
	dc	_arcs + (H'014E)
	dc	_arcs + (H'0150)
	dc	_arcs + (H'015A)
	dc	_arcs + (H'0164)
	dc	_arcs + (H'016C)
	.CODE
_matchLiteral:
	enter	#1
?LBB_matchLiteral:
	ld	AH,#H'0000
?LBE_matchLiteral:
	leave	#1
$_parseData:
	enter	#12
?LBB_parseData:
	st	AH,@(H'0007,Y)
	st	AL,@(H'0008,Y)
?LBB13:
	bra	(?L144)
?L205:
	ld	AL,@(H'0007,Y)
	add	AL,#H'0001
	ld	AH,@(H'0009,Y)
	cmp	AH,@$XAP_AL
	beq	?L146
	ld	AL,@(H'000C,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0007,Y)
	ld	AL,@(H'0009,Y)
	bsr	_matchLiteral
	cmp	AH,#H'0000
	bne	?L146
?LBB14:
	ld	AH,#H'0000
	ld	AL,@(H'0007,Y)
	st	AL,@(H'000A,Y)
	cmp	AL,@(H'0008,Y)
	beq	?L153
?L160:
	ld	X,@(H'000A,Y)
?LBB15:
?LBB16:
	ld	X,@(0,X)
	st	X,@(-1,Y)
	ld	AL,#-H'0061
	add	AL,@$XAP_UXL
	cmp	AL,#(H'0001+H'0019)
	bcc	?L157
	ld	AL,#-H'0020
	add	AL,@$XAP_UXL
	st	AL,@(-1,Y)
?L157:
	ld	X,@$XAP_AH
?LBE16:
	ld	X,@(_states,X)
	st	X,@H'fff8
	ld	X,@$XAP_AH
	ld	AH,@(_states+H'0001,X)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	ld	AL,#H'0002
	st	AL,@(H'0002,Y)
	sub	AH,@H'fff8
	asr	#H'0001
	st	AH,@(H'0003,Y)
	ld	AH,#-H'0001
	ld	AL,@(-1,Y)
;	bsr	$_UtilFind
	DC	((256*23)+9)
	cmp	AH,#H'0000
	beq	?L159
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	ld	AL,@(H'000A,Y)
	add	AL,#H'0001
	st	AL,@(H'000A,Y)
?LBE15:
	cmp	AL,@(H'0008,Y)
	beq	?L153
	cmp	AH,#H'0000
	bpl	?L160
?L153:
	ld	AL,@$XAP_AH
	nadd	AL,#H'0000
	cmp	AL,#(H'0001+H'000E)
	bcc	?L159
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE204,X)
	brxl
	.SEG	CONST
?JTBASE204:
	.CODE
?L204:
	.SEG	CONST
	dc	?L159-?L204
	dc	?L162-?L204
	dc	?L164-?L204
	dc	?L166-?L204
	dc	?L168-?L204
	dc	?L170-?L204
	dc	?L184-?L204
	dc	?L186-?L204
	dc	?L188-?L204
	dc	?L191-?L204
	dc	?L193-?L204
	dc	?L195-?L204
	dc	?L197-?L204
	dc	?L199-?L204
	dc	?L201-?L204
	.CODE
?L162:
	tst	@(H'000A,Y)
	beq	?L159
	ld	AH,@(H'000C,Y)
	bsr	$_command_ok
	bra	(?L146)
?L164:
	ld	AH,@$XAP_UY
	add	AH,#H'0004
	st	AH,@(0,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_skip2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L159
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_adc_get
	bra	(?L146)
?L166:
	tst	@(H'000A,Y)
	beq	?L159
	ld	AH,@(H'000C,Y)
	bsr	$_command_clk_get
	bra	(?L146)
?L168:
	tst	@(H'000A,Y)
	beq	?L159
	ld	AH,@(H'000C,Y)
	bsr	$_command_cts_get
	bra	(?L146)
?L170:
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_skip2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L171
	ld	AH,@(H'000C,Y)
	bsr	$_command_gpio_get
	bra	(?L146)
?L171:
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_skip2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L172
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_gpio_pin_get
	bra	(?L146)
?L172:
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skipOnce1
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	X,@$XAP_UY
	add	X,#H'0004
	st	X,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L173
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_gpio_set
	bra	(?L146)
?L173:
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_getString
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_skip2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L174
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_gpio_pin_set
	bra	(?L146)
?L174:
	ld	AL,#H'0044
	st	AL,@(0,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0049
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0052
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_skip2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L175
	ld	AH,@(H'000C,Y)
	bsr	$_command_gpiodir_get
	bra	(?L146)
?L175:
	ld	AL,#H'0044
	st	AL,@(0,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0049
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0052
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	X,@$XAP_UY
	add	X,#H'0004
	st	X,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_skip2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L176
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_gpiodir_pin_get
	bra	(?L146)
?L176:
	ld	AL,#H'0044
	st	AL,@(0,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0049
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0052
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skipOnce1
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L177
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_gpiodir_set
	bra	(?L146)
?L177:
	ld	AL,#H'0044
	st	AL,@(0,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0049
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0052
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	X,@$XAP_UY
	add	X,#H'0004
	st	X,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L178
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_gpiodir_pin_set
	bra	(?L146)
?L178:
	ld	AH,#H'0053
	st	AH,@(0,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0042
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0049
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0041
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0053
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_skip2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L179
	ld	AH,@(H'000C,Y)
	bsr	$_command_gpiosbias_get
	bra	(?L146)
?L179:
	ld	X,#H'0053
	st	X,@(0,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0042
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0049
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0041
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0053
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	X,@$XAP_UY
	add	X,#H'0004
	st	X,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_skip2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L180
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_gpiosbias_pin_get
	bra	(?L146)
?L180:
	ld	AH,#H'0053
	st	AH,@(0,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0042
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0049
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0041
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0053
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skipOnce1
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	X,@$XAP_UY
	add	X,#H'0004
	st	X,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L181
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_gpiosbias_set
	bra	(?L146)
?L181:
	ld	AH,#H'0053
	st	AH,@(0,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0042
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0049
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0041
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0053
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	X,@$XAP_UY
	add	X,#H'0004
	st	X,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L182
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_gpiosbias_pin_set
	bra	(?L146)
?L182:
	ld	AL,#H'0057
	st	AL,@(0,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0041
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0054
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0043
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,#H'0048
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_matchChar
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skipOnce1
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skipOnce1
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	add	AL,#H'0002
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L159
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_gpio_watch_set
	bra	(?L146)
?L184:
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	X,@$XAP_UY
	add	X,#H'0004
	st	X,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_skip2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L159
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_rts_set
	bra	(?L146)
?L186:
	tst	@(H'000A,Y)
	beq	?L159
	ld	AH,@(H'000C,Y)
	bsr	$_command_software_version
	bra	(?L146)
?L188:
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L189
	ld	AH,@(H'000C,Y)
	bsr	$_command_poll_reset
	bra	(?L146)
?L189:
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	add	AL,#H'0002
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skipOnce1
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_getString
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L159
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_poll_set
	bra	(?L146)
?L191:
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	X,@$XAP_UY
	add	X,#H'0004
	st	X,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_skip2
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L159
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_pskey_get
	bra	(?L146)
?L193:
	tst	@(H'000A,Y)
	beq	?L159
	ld	AH,@(H'000C,Y)
	bsr	$_command_temp_get
	bra	(?L146)
?L195:
	tst	@(H'000A,Y)
	beq	?L159
	ld	AH,@(H'000C,Y)
	bsr	$_command_alloc_get
	bra	(?L146)
?L197:
	tst	@(H'000A,Y)
	beq	?L159
	ld	AH,@(H'000C,Y)
	bsr	$_command_bt_version_get
	bra	(?L146)
?L199:
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
;	bsr	$_UtilGetNumber
	DC	((256*24)+9)
	ld	AL,@(H'0008,Y)
	bsr	_skip1
	ld	AL,@(H'0008,Y)
	bsr	_match1
	cmp	AH,#H'0000
	beq	?L159
	ld	AH,@(H'000C,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_command_sleep_set
	bra	(?L146)
?L201:
	tst	@(H'000A,Y)
	beq	?L159
	ld	AH,@(H'000C,Y)
	bsr	$_command_local_version_get
	bra	(?L146)
?L159:
	ld	AL,@(H'0009,Y)
	sub	AL,@(H'0007,Y)
	ld	X,@(H'000C,Y)
	st	X,@(0,Y)
	ld	AH,@(H'0007,Y)
	bsr	$_handleUnrecognised
?L146:
	ld	AH,@(H'0009,Y)
?LBE14:
	st	AH,@(H'0007,Y)
?L144:
	ld	AH,@(H'0007,Y)
	ld	AL,@(H'0008,Y)
	bsr	_findEndOfPacket
	st	AH,@(H'0009,Y)
	cmp	AH,#H'0000
	bne	?L205
?LBE13:
	ld	AH,@(H'0007,Y)
?LBE_parseData:
	leave	#12
;.stabn	192,0,0,?LBB13
;.stabn	192,0,0,?LBB14
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;.stabn	224,0,0,?LBE14
;.stabn	224,0,0,?LBE13
	ENDMOD

;# Function pattern *movqi2 used[0] = 114 used[1] = 225 used[3] = 2 total = 341
;# Function pattern *movqi3 used[0] = 85 total = 85
;# Function pattern *movqi8 used[0] = 13 total = 13
;# Function pattern *addqi0 used[0] = 39 total = 39
;# Function pattern *addqi2 used[0] = 22 used[2] = 11 total = 33
;# Function pattern *andqi3 used[0] = 1 total = 1
;# Function pattern *subqi3 used[0] = 3 used[1] = 3 total = 6
;# Function pattern *ashrqi3 used[0] = 1 total = 1
;# Function pattern negqi2 used[0] = 1 total = 1
;# Function pattern jump used[0] = 38 total = 38
;# Function pattern *call1 used[0] = 29 total = 29
;# Function pattern *call_value1 used[0] = 169 total = 169
;# Function pattern tablejump_1 used[0] = 1 total = 1
;# Function pattern movstrqi+2 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 36 used[1] = 11 total = 47
;# Function pattern movstrqi+4 used[1] = 3 total = 3
;# Function pattern movstrqi+5 used[0] = 57 total = 57
	MODULE	commands
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -ID:/BlueLab41/tools/include/firmware
;# -ID:/BlueLab41/tools/include/standard
;# -ID:/BlueLab41/tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	CONST
$_HEADER:
	dc	H'42
	dc	H'6C
	dc	H'75
	dc	H'54
	dc	H'75
	dc	H'4E
	dc	H'6F
	dc	H'64
	dc	H'65
	dc	H'20
	dc	H'30
	dc	H'2E
	dc	H'37
	dc	H'20
	dc	H'43
	dc	H'6F
	dc	H'70
	dc	H'79
	dc	H'72
	dc	H'69
	dc	H'67
	dc	H'68
	dc	H'74
	dc	H'20
	dc	H'28
	dc	H'63
	dc	H'29
	dc	H'32
	dc	H'30
	dc	H'31
	dc	H'32
	dc	H'20
	dc	H'62
	dc	H'79
	dc	H'20
	dc	H'50
	dc	H'61
	dc	H'75
	dc	H'6C
	dc	H'20
	dc	H'53
	dc	H'6F
	dc	H'6B
	dc	H'6F
	dc	H'6C
	dc	H'6F
	dc	H'76
	dc	H'73
	dc	H'6B
	dc	H'79
	dc	H'0D
	dc	H'0A
	dc	H'54
	dc	H'68
	dc	H'69
	dc	H'73
	dc	H'20
	dc	H'70
	dc	H'72
	dc	H'6F
	dc	H'67
	dc	H'72
	dc	H'61
	dc	H'6D
	dc	H'20
	dc	H'69
	dc	H'73
	dc	H'20
	dc	H'66
	dc	H'72
	dc	H'65
	dc	H'65
	dc	H'20
	dc	H'73
	dc	H'6F
	dc	H'66
	dc	H'74
	dc	H'77
	dc	H'61
	dc	H'72
	dc	H'65
	dc	H'3B
	dc	H'20
	dc	H'79
	dc	H'6F
	dc	H'75
	dc	H'20
	dc	H'63
	dc	H'61
	dc	H'6E
	dc	H'20
	dc	H'72
	dc	H'65
	dc	H'64
	dc	H'69
	dc	H'73
	dc	H'74
	dc	H'72
	dc	H'69
	dc	H'62
	dc	H'75
	dc	H'74
	dc	H'65
	dc	H'20
	dc	H'61
	dc	H'6E
	dc	H'64
	dc	H'2F
	dc	H'6F
	dc	H'72
	dc	H'20
	dc	H'6D
	dc	H'6F
	dc	H'64
	dc	H'69
	dc	H'66
	dc	H'79
	dc	H'0D
	dc	H'0A
	dc	H'69
	dc	H'74
	dc	H'20
	dc	H'75
	dc	H'6E
	dc	H'64
	dc	H'65
	dc	H'72
	dc	H'20
	dc	H'74
	dc	H'68
	dc	H'65
	dc	H'20
	dc	H'74
	dc	H'65
	dc	H'72
	dc	H'6D
	dc	H'73
	dc	H'20
	dc	H'6F
	dc	H'66
	dc	H'20
	dc	H'74
	dc	H'68
	dc	H'65
	dc	H'20
	dc	H'47
	dc	H'4E
	dc	H'55
	dc	H'20
	dc	H'47
	dc	H'65
	dc	H'6E
	dc	H'65
	dc	H'72
	dc	H'61
	dc	H'6C
	dc	H'20
	dc	H'50
	dc	H'75
	dc	H'62
	dc	H'6C
	dc	H'69
	dc	H'63
	dc	H'20
	dc	H'4C
	dc	H'69
	dc	H'63
	dc	H'65
	dc	H'6E
	dc	H'73
	dc	H'65
	dc	H'20
	dc	H'61
	dc	H'73
	dc	H'20
	dc	H'70
	dc	H'75
	dc	H'62
	dc	H'6C
	dc	H'69
	dc	H'73
	dc	H'68
	dc	H'65
	dc	H'64
	dc	H'0D
	dc	H'0A
	dc	H'62
	dc	H'79
	dc	H'20
	dc	H'46
	dc	H'72
	dc	H'65
	dc	H'65
	dc	H'20
	dc	H'53
	dc	H'6F
	dc	H'66
	dc	H'74
	dc	H'77
	dc	H'61
	dc	H'72
	dc	H'65
	dc	H'20
	dc	H'46
	dc	H'6F
	dc	H'75
	dc	H'6E
	dc	H'64
	dc	H'61
	dc	H'74
	dc	H'69
	dc	H'6F
	dc	H'6E
	dc	H'3B
	dc	H'20
	dc	H'65
	dc	H'69
	dc	H'74
	dc	H'68
	dc	H'65
	dc	H'72
	dc	H'20
	dc	H'76
	dc	H'65
	dc	H'72
	dc	H'73
	dc	H'69
	dc	H'6F
	dc	H'6E
	dc	H'20
	dc	H'33
	dc	H'20
	dc	H'6F
	dc	H'72
	dc	H'20
	dc	H'61
	dc	H'6E
	dc	H'79
	dc	H'20
	dc	H'6C
	dc	H'61
	dc	H'74
	dc	H'65
	dc	H'72
	dc	H'20
	dc	H'76
	dc	H'65
	dc	H'72
	dc	H'73
	dc	H'69
	dc	H'6F
	dc	H'6E
	dc	H'2E
	dc	H'0D
	dc	H'0A
	dc	H'54
	dc	H'68
	dc	H'69
	dc	H'73
	dc	H'20
	dc	H'70
	dc	H'72
	dc	H'6F
	dc	H'67
	dc	H'72
	dc	H'61
	dc	H'6D
	dc	H'20
	dc	H'63
	dc	H'6F
	dc	H'6D
	dc	H'65
	dc	H'73
	dc	H'20
	dc	H'77
	dc	H'69
	dc	H'74
	dc	H'68
	dc	H'20
	dc	H'4E
	dc	H'4F
	dc	H'20
	dc	H'57
	dc	H'41
	dc	H'52
	dc	H'52
	dc	H'41
	dc	H'4E
	dc	H'54
	dc	H'59
	dc	H'2E
	dc	H'0D
	dc	H'0A
	dc	H'00
?LC0:
	dc	H'41
	dc	H'44
	dc	H'43
	dc	H'30
	dc	H'00
?LC1:
	dc	H'41
	dc	H'44
	dc	H'43
	dc	H'31
	dc	H'00
?LC2:
	dc	H'41
	dc	H'44
	dc	H'43
	dc	H'32
	dc	H'00
?LC3:
	dc	H'41
	dc	H'44
	dc	H'43
	dc	H'33
	dc	H'00
?LC4:
	dc	H'41
	dc	H'44
	dc	H'43
	dc	H'34
	dc	H'00
?LC5:
	dc	H'41
	dc	H'44
	dc	H'43
	dc	H'35
	dc	H'00
?LC6:
	dc	H'47
	dc	H'50
	dc	H'49
	dc	H'4F
	dc	H'00
?LC7:
	dc	H'54
	dc	H'45
	dc	H'4D
	dc	H'50
	dc	H'00
	.SEG	INIT
_INPUT_NAMES:
	DS	18
	.SEG	INITC
	dc	?LC0
	dc	H'0000
	dc	?LC1
	dc	H'0001
	dc	?LC2
	dc	H'0002
	dc	?LC3
	dc	H'0003
	dc	?LC4
	dc	H'0004
	dc	?LC5
	dc	H'0005
	dc	?LC6
	dc	H'000A
	dc	?LC7
	dc	H'0014
	dc	H'0000
	dc	H'0000
	.CODE
$_process_line:
	enter	#3
?LBB_process_line:
	st	AH,@(H'0001,Y)
	ld	AH,@(H'0003,Y)
	bsr	$_strlen
	ld	AL,@(H'0003,Y)
	add	AL,@$XAP_AH
	ld	AH,@(H'0001,Y)
	st	AH,@(0,Y)
	ld	AH,@(H'0003,Y)
	bsr	$_parseData
?LBE_process_line:
	leave	#3
$_write_uint_response:
	enter	#24
?LBB_write_uint_response:
	st	AH,@(H'0016,Y)
?LBB2:
	ld	AH,#(?LC8)
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	bsr	$_sprintf
	ld	AH,@(H'0016,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_sink_write_str
?LBE2:
?LBE_write_uint_response:
	leave	#24
	.SEG	CONST
?LC8:
	dc	H'25
	dc	H'75
	dc	H'0D
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
$_write_uint32_response:
	enter	#25
?LBB_write_uint32_response:
	st	AH,@(H'0017,Y)
	ld	AH,@(H'0019,Y)
	ld	AL,@(H'001A,Y)
?LBB3:
	ld	X,#(?LC9)
	st	X,@(0,Y)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_sprintf
	ld	AH,@(H'0017,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	bsr	$_sink_write_str
?LBE3:
?LBE_write_uint32_response:
	leave	#25
	.SEG	CONST
?LC9:
	dc	H'25
	dc	H'6C
	dc	H'75
	dc	H'0D
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
$_write_response:
	enter	#83
?LBB_write_response:
	st	AH,@(H'0051,Y)
	ld	AL,@(H'0053,Y)
	ld	AH,@$XAP_UY
?LBB4:
	add	AH,#H'0054
	st	AH,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_vsprintf
	st	AH,@(0,Y)
	ld	AH,@(H'0051,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	bsr	$_sink_write
?LBE4:
?LBE_write_response:
	leave	#83
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
$_write_ok:
	enter	#1
?LBB_write_ok:
	ld	AL,#(?LC10)
	bsr	$_sink_write_str
?LBE_write_ok:
	leave	#1
	.SEG	CONST
?LC10:
	dc	H'4F
	dc	H'4B
	dc	H'0D
	dc	H'0A
	dc	H'00
	.CODE
$_write_ok_uint:
	enter	#25
?LBB_write_ok_uint:
	st	AH,@(H'0017,Y)
	ld	AH,@(H'0019,Y)
	ld	AL,@(H'001A,Y)
?LBB5:
	ld	X,#(?LC11)
	st	X,@(0,Y)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_sprintf
	ld	AH,@(H'0017,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	bsr	$_sink_write_str
?LBE5:
?LBE_write_ok_uint:
	leave	#25
	.SEG	CONST
?LC11:
	dc	H'4F
	dc	H'4B
	dc	H'20
	dc	H'25
	dc	H'6C
	dc	H'75
	dc	H'0D
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
$_write_error:
	enter	#1
?LBB_write_error:
	ld	AL,#(?LC12)
	bsr	$_sink_write_str
?LBE_write_error:
	leave	#1
	.SEG	CONST
?LC12:
	dc	H'45
	dc	H'52
	dc	H'52
	dc	H'4F
	dc	H'52
	dc	H'0D
	dc	H'0A
	dc	H'00
	.CODE
_get_input_reading:
	enter	#1
?LBB_get_input_reading:
	cmp	AL,#H'0005
	bgt	?L9
;	bsr	$_AdcRequest
	DC	((256*45)+9)
	cmp	AH,#H'0000
	beq	?L11
	ld	AH,#H'0000
	bra	(?L8)
?L9:
	cmp	AL,#H'000A
	beq	?L12
	cmp	AL,#H'0014
	beq	?L13
	bra	(?L11)
?L12:
;	bsr	$_PioGet
	DC	((256*38)+9)
	bra	(?L16)
?L13:
;	bsr	$_VmGetTemperature
	DC	((256*222)+9)
?L16:
	ld	X,@(H'0001,Y)
	st	AH,@(0,X)
	ld	AH,#H'0001
	bra	(?L8)
?L11:
	ld	AH,#-H'0001
?L8:
?LBE_get_input_reading:
	leave	#1
$_command_ok:
	enter	#1
?LBB_command_ok:
	ld	X,@$XAP_AH
?LBB6:
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
?LBE6:
?LBE_command_ok:
	leave	#1
$_command_gpio_get:
	enter	#2
?LBB_command_gpio_get:
	st	AH,@(0,Y)
?LBB7:
;	bsr	$_PioGet
	DC	((256*38)+9)
	ld	AL,@$XAP_AH
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_uint_response
?LBE7:
?LBE_command_gpio_get:
	leave	#2
$_command_gpio_set:
	enter	#2
?LBB_command_gpio_set:
	st	AH,@(0,Y)
	ld	X,@$XAP_AL
?LBB8:
	ld	AH,@(H'0001,X)
	ld	AL,@(0,X)
;	bsr	$_PioSet
	DC	((256*39)+9)
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
?LBE8:
?LBE_command_gpio_set:
	leave	#2
$_command_gpio_pin_get:
	enter	#4
?LBB_command_gpio_pin_get:
	st	AL,@(0,Y)
?LBB9:
	st	AH,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
;	bsr	$_PioGet
	DC	((256*38)+9)
	st	AH,@H'fff8
	ld	AL,#H'0001
	ld	X,@(0,Y)
	asl	@(0,X)
	ld	AH,@H'fff8
	and	AH,@$XAP_AL
	cmp	AH,#H'0000
	beq	?L24
	ld	AL,#H'0001
	st	AL,@(H'0002,Y)
?L24:
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,Y)
	bsr	$_write_uint_response
?LBE9:
?LBE_command_gpio_pin_get:
	leave	#4
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
$_command_gpio_pin_set:
	enter	#4
?LBB_command_gpio_pin_set:
	ld	X,@$XAP_AL
?LBB10:
	st	AH,@(0,Y)
	ld	AL,#H'0001
	asl	@(0,X)
	st	AL,@(H'0001,Y)
	ld	X,@(H'0001,X)
	ld	AL,@(0,X)
	st	AL,@(H'0002,Y)
	ld	AH,@(0,X)
	bsr	$_tolower
	cmp	AH,#H'0074
	bne	?L26
;	bsr	$_PioGet
	DC	((256*38)+9)
	ld	AL,@$XAP_AH
	xor	AL,@(H'0001,Y)
	bra	(?L29)
?L26:
	ld	X,@(H'0002,Y)
	cmp	X,#H'0030
	beq	?L28
	ld	AL,@(H'0001,Y)
	bra	(?L29)
?L28:
	ld	AL,#H'0000
?L29:
	ld	AH,@(H'0001,Y)
;	bsr	$_PioSet
	DC	((256*39)+9)
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
?LBE10:
?LBE_command_gpio_pin_set:
	leave	#4
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
$_command_gpiodir_get:
	enter	#2
?LBB_command_gpiodir_get:
	st	AH,@(0,Y)
?LBB11:
;	bsr	$_PioGetDir
	DC	((256*40)+9)
	ld	AL,@$XAP_AH
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_uint_response
?LBE11:
?LBE_command_gpiodir_get:
	leave	#2
$_command_gpiodir_set:
	enter	#2
?LBB_command_gpiodir_set:
	st	AH,@(0,Y)
	ld	X,@$XAP_AL
?LBB12:
	ld	AH,@(H'0001,X)
	ld	AL,@(0,X)
;	bsr	$_PioSetDir
	DC	((256*41)+9)
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
?LBE12:
?LBE_command_gpiodir_set:
	leave	#2
$_command_gpiodir_pin_get:
	enter	#4
?LBB_command_gpiodir_pin_get:
	st	AL,@(0,Y)
?LBB13:
	st	AH,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
;	bsr	$_PioGetDir
	DC	((256*40)+9)
	st	AH,@H'fff8
	ld	AL,#H'0001
	ld	X,@(0,Y)
	asl	@(0,X)
	ld	AH,@H'fff8
	and	AH,@$XAP_AL
	cmp	AH,#H'0000
	beq	?L35
	ld	AL,#H'0001
	st	AL,@(H'0002,Y)
?L35:
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,Y)
	bsr	$_write_uint_response
?LBE13:
?LBE_command_gpiodir_pin_get:
	leave	#4
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
$_command_gpiodir_pin_set:
	enter	#2
?LBB_command_gpiodir_pin_set:
	ld	X,@$XAP_AL
?LBB14:
	st	AH,@(0,Y)
	ld	AL,#H'0001
	asl	@(0,X)
	ld	AH,@$XAP_AL
	tst	@(H'0001,X)
	bne	?L38
	ld	AL,#H'0000
?L38:
;	bsr	$_PioSetDir
	DC	((256*41)+9)
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
?LBE14:
?LBE_command_gpiodir_pin_set:
	leave	#2
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
$_command_gpiosbias_get:
	enter	#2
?LBB_command_gpiosbias_get:
	st	AH,@(0,Y)
?LBB15:
;	bsr	$_PioGetStrongBias
	DC	((256*42)+9)
	ld	AL,@$XAP_AH
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_uint_response
?LBE15:
?LBE_command_gpiosbias_get:
	leave	#2
$_command_gpiosbias_set:
	enter	#2
?LBB_command_gpiosbias_set:
	st	AH,@(0,Y)
	ld	X,@$XAP_AL
?LBB16:
	ld	AH,@(H'0001,X)
	ld	AL,@(0,X)
;	bsr	$_PioSetStrongBias
	DC	((256*43)+9)
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
?LBE16:
?LBE_command_gpiosbias_set:
	leave	#2
$_command_gpiosbias_pin_get:
	enter	#4
?LBB_command_gpiosbias_pin_get:
	st	AL,@(0,Y)
?LBB17:
	st	AH,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
;	bsr	$_PioGetStrongBias
	DC	((256*42)+9)
	st	AH,@H'fff8
	ld	AL,#H'0001
	ld	X,@(0,Y)
	asl	@(0,X)
	ld	AH,@H'fff8
	and	AH,@$XAP_AL
	cmp	AH,#H'0000
	beq	?L42
	ld	AL,#H'0001
	st	AL,@(H'0002,Y)
?L42:
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,Y)
	bsr	$_write_uint_response
?LBE17:
?LBE_command_gpiosbias_pin_get:
	leave	#4
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
$_command_gpiosbias_pin_set:
	enter	#2
?LBB_command_gpiosbias_pin_set:
	ld	X,@$XAP_AL
?LBB18:
	st	AH,@(0,Y)
	ld	AL,#H'0001
	asl	@(0,X)
	ld	AH,@$XAP_AL
	tst	@(H'0001,X)
	bne	?L45
	ld	AL,#H'0000
?L45:
;	bsr	$_PioSetStrongBias
	DC	((256*43)+9)
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
?LBE18:
?LBE_command_gpiosbias_pin_set:
	leave	#2
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
$_command_gpio_watch_set:
	enter	#3
?LBB_command_gpio_watch_set:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AL
?LBB19:
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(0,X)
;	bsr	$_PioDebounce
	DC	((256*37)+9)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
?LBE19:
?LBE_command_gpio_watch_set:
	leave	#3
$_command_cts_get:
	enter	#2
?LBB_command_cts_get:
	st	AH,@(0,Y)
?LBB20:
;	bsr	$_PioGetCts
	DC	((256*56)+9)
	ld	AL,@$XAP_AH
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_uint_response
?LBE20:
?LBE_command_cts_get:
	leave	#2
$_command_rts_set:
	enter	#2
?LBB_command_rts_set:
	ld	X,@$XAP_AL
?LBB21:
	st	AH,@(0,Y)
	ld	AH,#H'0000
	tst	@(0,X)
	beq	?L50
	ld	AH,#H'0001
?L50:
;	bsr	$_PioSetRts
	DC	((256*55)+9)
	cmp	AH,#H'0000
	beq	?L49
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
	bra	(?L48)
?L49:
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_error
?L48:
?LBE21:
?LBE_command_rts_set:
	leave	#2
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
$_command_adc_get:
	enter	#2
?LBB_command_adc_get:
	st	AH,@(0,Y)
	ld	X,@$XAP_AL
?LBB22:
	ld	AL,@(0,X)
;	bsr	$_AdcRequest
	DC	((256*45)+9)
	cmp	AH,#H'0000
	bne	?L52
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_error
?L52:
?LBE22:
?LBE_command_adc_get:
	leave	#2
$_command_temp_get:
	enter	#2
?LBB_command_temp_get:
	st	AH,@(0,Y)
?LBB23:
;	bsr	$_VmGetTemperature
	DC	((256*222)+9)
	ld	AL,@$XAP_AH
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_uint_response
?LBE23:
?LBE_command_temp_get:
	leave	#2
$_command_poll_set:
	enter	#6
?LBB_command_poll_set:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB24:
	st	AH,@(H'0003,Y)
	ld	AL,#(_INPUT_NAMES)
	st	AL,@(H'0004,Y)
	tst	@_INPUT_NAMES
	beq	?L63
?L61:
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AH,@(0,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	bsr	$_strncmp
	cmp	AH,#H'0000
	bne	?L58
	ld	AL,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0053,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0054,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'000A
	bsr	$_MessageSend
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
	bra	(?L55)
?L58:
	ld	AL,@(H'0004,Y)
	add	AL,#H'0002
	st	AL,@(H'0004,Y)
	ld	X,@$XAP_AL
	tst	@(0,X)
	bne	?L61
?L63:
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_error
?L55:
?LBE24:
?LBE_command_poll_set:
	leave	#6
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
$_command_poll_reset:
	enter	#1
?LBB_command_poll_reset:
	ld	X,@$XAP_AH
?LBB25:
	ld	AL,#H'0000
	st	AL,@(H'0053,X)
	st	AL,@(H'0054,X)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
?LBE25:
?LBE_command_poll_reset:
	leave	#1
$_command_poll_handle:
	enter	#28
?LBB_command_poll_handle:
	st	AH,@(H'0018,Y)
?LBB26:
	ld	AL,#H'0000
	st	AL,@(H'0017,Y)
	ld	X,@$XAP_AH
	tst	@(H'0053,X)
	beq	?L65
	ld	AL,@(H'0053,X)
	st	AL,@(H'001A,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0017
	st	AL,@(0,Y)
	ld	X,@(H'001A,Y)
	ld	AL,@(H'0001,X)
	bsr	_get_input_reading
	st	AH,@(H'0019,Y)
	cmp	AH,#H'0000
	bmi	?L67
	beq	?L67
	ld	AL,#(?LC13)
	st	AL,@(0,Y)
	ld	X,@(H'0018,Y)
	ld	AL,@(H'0053,X)
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0017,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_sprintf
	bra	(?L68)
?L67:
	tst	@(H'0019,Y)
	bpl	?L68
	ld	AL,#(?LC14)
	st	AL,@(0,Y)
	ld	X,@(H'0018,Y)
	ld	AL,@(H'0053,X)
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_sprintf
?L68:
	tst	@(H'0019,Y)
	beq	?L70
	ld	X,@(H'0018,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	bsr	$_sink_write_str
?L70:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	X,@(H'0018,Y)
	ld	AL,@(H'0054,X)
	asl	#H'0010
	asr	#H'0010
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@$XAP_UXL
	ld	AL,#H'000A
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?L65:
?LBE26:
?LBE_command_poll_handle:
	leave	#28
	.SEG	CONST
?LC13:
	dc	H'25
	dc	H'73
	dc	H'3D
	dc	H'25
	dc	H'75
	dc	H'0D
	dc	H'0A
	dc	H'00
?LC14:
	dc	H'25
	dc	H'73
	dc	H'3D
	dc	H'45
	dc	H'52
	dc	H'52
	dc	H'4F
	dc	H'52
	dc	H'0D
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB26
;.stabn	224,0,0,?LBE26
$_command_pskey_get:
	enter	#144
?LBB_command_pskey_get:
	ld	X,@$XAP_AL
?LBB27:
	st	AH,@(H'008C,Y)
	ld	AL,#H'0080
	st	AL,@(0,Y)
	ld	AH,@(0,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_PsFullRetrieve
	DC	((256*21)+9)
	st	AH,@(H'008D,Y)
	cmp	AH,#H'0000
	bne	?L72
	ld	X,@(H'008C,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#(?LC15)
	bsr	$_sink_write_str
	bra	(?L71)
?L72:
	ld	AL,#H'0000
	st	AL,@(H'008E,Y)
	cmp	AL,@(H'008D,Y)
	bge	?L79
?L77:
?LBB28:
	ld	AL,#(?LC16)
	st	AL,@(0,Y)
	ld	X,@(H'008E,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	add	X,@$XAP_AL
	ld	AL,@(0,X)
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0082
	bsr	$_sprintf
	ld	X,@(H'008C,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'0003
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0082
	bsr	$_sink_write
	ld	AL,@(H'008E,Y)
?LBE28:
	add	AL,#H'0001
	st	AL,@(H'008E,Y)
	cmp	AL,@(H'008D,Y)
	blt	?L77
?L79:
	ld	AH,@(H'008D,Y)
	asr	#H'0010
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	X,@(H'008C,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok_uint
?L71:
?LBE27:
?LBE_command_pskey_get:
	leave	#144
	.SEG	CONST
?LC15:
	dc	H'45
	dc	H'52
	dc	H'52
	dc	H'4F
	dc	H'52
	dc	H'3A
	dc	H'20
	dc	H'6E
	dc	H'6F
	dc	H'20
	dc	H'70
	dc	H'73
	dc	H'6B
	dc	H'65
	dc	H'79
	dc	H'20
	dc	H'6F
	dc	H'72
	dc	H'20
	dc	H'76
	dc	H'61
	dc	H'6C
	dc	H'75
	dc	H'65
	dc	H'20
	dc	H'74
	dc	H'6F
	dc	H'6F
	dc	H'20
	dc	H'6C
	dc	H'6F
	dc	H'6E
	dc	H'67
	dc	H'0D
	dc	H'0A
	dc	H'00
?LC16:
	dc	H'25
	dc	H'58
	dc	H'20
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB27
;.stabn	192,0,0,?LBB28
;.stabn	224,0,0,?LBE28
;.stabn	224,0,0,?LBE27
$_command_clk_get:
	enter	#4
?LBB_command_clk_get:
	st	AH,@(H'0002,Y)
?LBB29:
;	bsr	$_VmGetClock
	DC	((256*28)+9)
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_uint32_response
?LBE29:
?LBE_command_clk_get:
	leave	#4
$_command_sleep_set:
	enter	#4
?LBB_command_sleep_set:
	st	AH,@(H'0002,Y)
	ld	X,@$XAP_AL
?LBB30:
	ld	AH,@(0,X)
;	bsr	$_VmDeepSleepEnable
	DC	((256*35)+9)
	ld	AL,@$XAP_AH
	ld	AH,#H'0000
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok_uint
?LBE30:
?LBE_command_sleep_set:
	leave	#4
$_command_alloc_get:
	enter	#2
?LBB_command_alloc_get:
	st	AH,@(0,Y)
?LBB31:
;	bsr	$_VmGetAvailableAllocations
	DC	((256*221)+9)
	ld	AL,@$XAP_AH
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_uint_response
?LBE31:
?LBE_command_alloc_get:
	leave	#2
$_command_bt_version_get:
	enter	#1
?LBB_command_bt_version_get:
	bsr	$_ConnectionReadBtVersion
?LBE_command_bt_version_get:
	leave	#1
	.SEG	CONST
?LC17:
	dc	H'55
	dc	H'4E
	dc	H'4B
	dc	H'00
?LC18:
	dc	H'32
	dc	H'2E
	dc	H'30
	dc	H'00
?LC19:
	dc	H'32
	dc	H'2E
	dc	H'31
	dc	H'00
	.SEG	INIT
_bt_vers?0?:
	DS	3
	.SEG	INITC
	dc	?LC17
	dc	?LC18
	dc	?LC19
	.CODE
$_command_bt_version_handle:
	enter	#3
?LBB_command_bt_version_handle:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AL
?LBB32:
	ld	AL,#H'0003
	st	AL,@(0,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#(_bt_vers?0?)
	bsr	$_render_enum
	ld	AL,@$XAP_AH
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	bsr	$_sink_write_str
	ld	AL,#H'0002
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#(?LC20)
	bsr	$_sink_write
?LBE32:
?LBE_command_bt_version_handle:
	leave	#3
	.SEG	CONST
?LC20:
	dc	H'0D
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB32
;.stabn	224,0,0,?LBE32
$_command_local_version_get:
	enter	#1
?LBB_command_local_version_get:
	bsr	$_ConnectionReadLocalVersion
?LBE_command_local_version_get:
	leave	#1
	.SEG	CONST
?LC21:
	dc	H'31
	dc	H'2E
	dc	H'30
	dc	H'20
	dc	H'28
	dc	H'30
	dc	H'29
	dc	H'00
?LC22:
	dc	H'31
	dc	H'2E
	dc	H'31
	dc	H'20
	dc	H'28
	dc	H'31
	dc	H'29
	dc	H'00
?LC23:
	dc	H'31
	dc	H'2E
	dc	H'32
	dc	H'20
	dc	H'28
	dc	H'32
	dc	H'29
	dc	H'00
?LC24:
	dc	H'32
	dc	H'2E
	dc	H'30
	dc	H'20
	dc	H'28
	dc	H'33
	dc	H'29
	dc	H'00
?LC25:
	dc	H'32
	dc	H'2E
	dc	H'31
	dc	H'20
	dc	H'28
	dc	H'34
	dc	H'29
	dc	H'00
	.SEG	INIT
_hci_vers?1?:
	DS	5
	.SEG	INITC
	dc	?LC21
	dc	?LC22
	dc	?LC23
	dc	?LC24
	dc	?LC25
	.CODE
$_command_local_version_handle:
	enter	#35
?LBB_command_local_version_handle:
	st	AH,@(H'0020,Y)
	st	AL,@(H'0021,Y)
?LBB33:
	ld	AL,#H'0005
	st	AL,@(0,Y)
	ld	X,@(H'0021,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#(_hci_vers?1?)
	bsr	$_render_enum
	ld	AL,#(?LC26)
	st	AL,@(0,Y)
	st	AH,@(H'0001,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	bsr	$_sprintf
	ld	X,@(H'0020,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_sink_write_str
	ld	AL,#(?LC27)
	st	AL,@(0,Y)
	ld	X,@(H'0021,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	bsr	$_sprintf
	ld	X,@(H'0020,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_sink_write_str
	ld	AL,#(?LC28)
	st	AL,@(0,Y)
	ld	X,@(H'0021,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	bsr	$_sprintf
	ld	X,@(H'0020,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_sink_write_str
	ld	AL,#(?LC29)
	st	AL,@(0,Y)
	ld	X,@(H'0021,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	bsr	$_sprintf
	ld	X,@(H'0020,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_sink_write_str
	ld	AL,#(?LC30)
	st	AL,@(0,Y)
	ld	X,@(H'0021,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	bsr	$_sprintf
	ld	X,@(H'0020,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_sink_write_str
?LBE33:
?LBE_command_local_version_handle:
	leave	#35
	.SEG	CONST
?LC26:
	dc	H'48
	dc	H'43
	dc	H'49
	dc	H'20
	dc	H'76
	dc	H'65
	dc	H'72
	dc	H'3A
	dc	H'20
	dc	H'25
	dc	H'73
	dc	H'0D
	dc	H'0A
	dc	H'00
?LC27:
	dc	H'48
	dc	H'43
	dc	H'49
	dc	H'20
	dc	H'72
	dc	H'65
	dc	H'76
	dc	H'3A
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0D
	dc	H'0A
	dc	H'00
?LC28:
	dc	H'4C
	dc	H'4D
	dc	H'50
	dc	H'20
	dc	H'76
	dc	H'65
	dc	H'72
	dc	H'3A
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0D
	dc	H'0A
	dc	H'00
?LC29:
	dc	H'4C
	dc	H'4D
	dc	H'50
	dc	H'20
	dc	H'73
	dc	H'75
	dc	H'62
	dc	H'76
	dc	H'65
	dc	H'72
	dc	H'3A
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0D
	dc	H'0A
	dc	H'00
?LC30:
	dc	H'4D
	dc	H'61
	dc	H'6E
	dc	H'66
	dc	H'20
	dc	H'69
	dc	H'64
	dc	H'3A
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0D
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB33
;.stabn	224,0,0,?LBE33
$_command_software_version:
	enter	#3
?LBB_command_software_version:
	st	AH,@(H'0001,Y)
?LBB34:
	ld	AL,#H'0125
	st	AL,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	ld	AL,#($_HEADER)
	bsr	$_sink_write
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	bsr	$_write_ok
?LBE34:
?LBE_command_software_version:
	leave	#3
$_handleUnrecognised:
	enter	#1
?LBB_handleUnrecognised:
	ld	X,@(H'0001,Y)
?LBB35:
	ld	AH,@(H'0001,X)
	bsr	$_write_error
?LBE35:
?LBE_handleUnrecognised:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 127 used[1] = 15 total = 142
;# Function pattern *movqi3 used[0] = 179 total = 179
;# Function pattern *movqi8 used[0] = 7 total = 7
;# Function pattern *movhi used[2] = 2 used[3] = 6 total = 8
;# Function pattern *addqi0 used[0] = 26 total = 26
;# Function pattern *addqi2 used[0] = 5 total = 5
;# Function pattern *andqi3 used[0] = 3 total = 3
;# Function pattern *xorqi3 used[0] = 1 total = 1
;# Function pattern *extendqihi2 used[0] = 1 used[1] = 1 total = 2
;# Function pattern *ashlqi3 used[0] = 6 total = 6
;# Function pattern *zero_extendqihi2_1 used[0] = 1 total = 1
;# Function pattern jump used[0] = 10 total = 10
;# Function pattern *call1 used[0] = 56 total = 56
;# Function pattern *call_value1 used[0] = 37 total = 37
;# Function pattern movstrqi+3 used[0] = 9 used[1] = 8 total = 17
;# Function pattern movstrqi+5 used[0] = 7 total = 7
	MODULE	msg_dump
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -ID:/BlueLab41/tools/include/firmware
;# -ID:/BlueLab41/tools/include/standard
;# -ID:/BlueLab41/tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	ENDMOD

	MODULE	utils
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -ID:/BlueLab41/tools/include/firmware
;# -ID:/BlueLab41/tools/include/standard
;# -ID:/BlueLab41/tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	VAR
_buf?0?:
	DS	10
	.CODE
$_render_enum:
	enter	#3
?LBB_render_enum:
?LBB2:
	cmp	AH,@(H'0003,Y)
	bge	?L2
	ld	X,@$XAP_AH
	add	X,@$XAP_AL
	ld	AH,@(0,X)
	bra	(?L1)
?L2:
	ld	AL,#(?LC0)
	st	AL,@(0,Y)
	st	AH,@(H'0001,Y)
	ld	AH,#(_buf?0?)
	bsr	$_sprintf
	ld	AH,#(_buf?0?)
?L1:
?LBE2:
?LBE_render_enum:
	leave	#3
	.SEG	CONST
?LC0:
	dc	H'3F
	dc	H'20
	dc	H'28
	dc	H'25
	dc	H'64
	dc	H'29
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
_hexdigit2char:
	enter	#1
?LBB_hexdigit2char:
	add	AH,#H'0030
	cmp	AH,#H'0039
	bcz	?L5
	add	AH,#H'0007
?L5:
?LBE_hexdigit2char:
	leave	#1
$_hexb2str:
	enter	#3
?LBB_hexb2str:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
	lsr	#H'0004
	and	AH,#H'000F
	bsr	_hexdigit2char
	ld	X,@(H'0001,Y)
	st	AH,@(0,X)
	add	X,#H'0001
	st	X,@(H'0001,Y)
	ld	AH,@(0,Y)
	and	AH,#H'000F
	bsr	_hexdigit2char
	ld	X,@(H'0001,Y)
	st	AH,@(0,X)
?LBE_hexb2str:
	leave	#3
$_hexw2str:
	enter	#3
?LBB_hexw2str:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
	lsr	#H'000C
	bsr	_hexdigit2char
	ld	X,@(H'0001,Y)
	st	AH,@(0,X)
	add	X,#H'0001
	st	X,@(H'0001,Y)
	ld	AH,@(0,Y)
	lsr	#H'0008
	and	AH,#H'000F
	bsr	_hexdigit2char
	ld	X,@(H'0001,Y)
	st	AH,@(0,X)
	add	X,#H'0001
	st	X,@(H'0001,Y)
	ld	AH,@(0,Y)
	lsr	#H'0004
	and	AH,#H'000F
	bsr	_hexdigit2char
	ld	X,@(H'0001,Y)
	st	AH,@(0,X)
	add	X,#H'0001
	st	X,@(H'0001,Y)
	ld	AH,@(0,Y)
	and	AH,#H'000F
	bsr	_hexdigit2char
	ld	X,@(H'0001,Y)
	st	AH,@(0,X)
?LBE_hexw2str:
	leave	#3
$_get_num_base:
	enter	#7
?LBB_get_num_base:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB3:
	ld	AH,#H'0000
	st	AH,@(H'0003,Y)
	st	AH,@(H'0002,Y)
	cmp	AL,#H'0000
	beq	?L17
	ld	AL,@(H'0007,Y)
	asl	#H'0010
	asr	#H'0010
	st	AH,@(H'0004,Y)
	st	AL,@(H'0005,Y)
?L15:
	ld	X,@(0,Y)
?LBB4:
	ld	AH,@(0,X)
	add	X,#H'0001
	st	X,@(0,Y)
	bsr	$_toupper
	add	AH,#-H'0030
	st	AH,@H'fff8
	cmp	AH,#H'0009
	bcz	?L14
	ld	AL,#-H'0007
	add	AL,@$XAP_AH
	st	AL,@H'fff8
?L14:
	ld	AL,@(H'0003,Y)
	smult	@(H'0004,Y)
	ld	X,@$XAP_AL
	ld	AL,@(H'0002,Y)
	smult	@(H'0005,Y)
	add	AL,@$XAP_UXL
	ld	X,@$XAP_AL
	ld	AL,@(H'0003,Y)
	umult	@(H'0005,Y)
	add	AH,@$XAP_UXL
	st	AH,@H'fffa
	st	AL,@H'fffb
	ld	AH,#H'0000
	ld	AL,@H'fff8
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,@H'fffa
	ld	AL,@H'fffb
	add	AL,@H'fff9
	addc	AH,@H'fff8
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
?LBE4:
	add	AL,#-H'0001
	st	AL,@(H'0001,Y)
	cmp	AL,#H'0000
	bne	?L15
?L17:
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'0003,Y)
?LBE3:
?LBE_get_num_base:
	leave	#7
;.stabn	192,0,0,?LBB3
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;.stabn	224,0,0,?LBE3
$_get_num:
	enter	#4
?LBB_get_num:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	cmp	AL,#H'0030
	bne	?L20
	ld	AH,@(H'0001,X)
	bsr	$_tolower
	cmp	AH,#H'0078
	bne	?L20
	ld	AH,@(H'0001,Y)
	add	AH,#H'0002
	ld	AL,@(H'0002,Y)
	add	AL,#-H'0002
	ld	X,#H'0010
	st	X,@(0,Y)
	bra	(?L22)
?L20:
	ld	AL,#H'000A
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0002,Y)
?L22:
	bsr	$_get_num_base
?LBE_get_num:
	leave	#4
	ENDMOD

;# Function pattern *movqi2 used[0] = 31 used[1] = 7 total = 38
;# Function pattern *movqi3 used[0] = 22 total = 22
;# Function pattern *movqi8 used[0] = 1 total = 1
;# Function pattern *movhi used[2] = 2 used[3] = 4 total = 6
;# Function pattern *addhi3 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 13 used[2] = 2 total = 15
;# Function pattern *andqi3 used[0] = 5 total = 5
;# Function pattern *mulqihi3 used[0] = 2 total = 2
;# Function pattern *umulqihi3 used[0] = 1 total = 1
;# Function pattern *extendqihi2 used[0] = 1 total = 1
;# Function pattern *lshrqi3 used[0] = 4 total = 4
;# Function pattern *zero_extendqihi2_1 used[1] = 1 total = 1
;# Function pattern jump used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 10 total = 10
;# Function pattern movstrqi+3 used[0] = 2 total = 2
;# Function pattern movstrqi+5 used[0] = 5 total = 5
	MODULE	ConnectionReadBtVersion
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_ConnectionReadBtVersion:
	enter	#4
?LBB_ConnectionReadBtVersion:
	st	AH,@(H'0001,Y)
?LBB2:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'0035
	bsr	$_MessageSend
?LBE2:
?LBE_ConnectionReadBtVersion:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 5 total = 5
;# Function pattern *movqi3 used[0] = 3 total = 3
;# Function pattern *call1 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+2 used[0] = 1 total = 1
	MODULE	dm_baseband_scan
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_ConnectionWriteScanEnable:
	enter	#4
?LBB_ConnectionWriteScanEnable:
	st	AH,@(H'0001,Y)
?LBB2:
	cmp	AH,#H'0003
	bcz	?L2
	st	AH,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L2:
?LBB3:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'0029
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionWriteScanEnable:
	leave	#4
	.SEG	CONST
?LC0:
	dc	H'4F
	dc	H'75
	dc	H'74
	dc	H'20
	dc	H'6F
	dc	H'66
	dc	H'20
	dc	H'72
	dc	H'61
	dc	H'6E
	dc	H'67
	dc	H'65
	dc	H'20
	dc	H'73
	dc	H'63
	dc	H'61
	dc	H'6E
	dc	H'20
	dc	H'65
	dc	H'6E
	dc	H'61
	dc	H'62
	dc	H'6C
	dc	H'65
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'78
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
	ENDMOD

;# Function pattern *movqi2 used[0] = 5 total = 5
;# Function pattern *movqi3 used[0] = 3 total = 3
;# Function pattern *call1 used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 3 total = 3
;# Function pattern movstrqi+2 used[0] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 1 total = 1
	MODULE	dm_info_local_version
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_ConnectionReadLocalVersion:
	enter	#4
?LBB_ConnectionReadLocalVersion:
	st	AH,@(H'0001,Y)
?LBB2:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'0037
	bsr	$_MessageSend
?LBE2:
?LBE_ConnectionReadLocalVersion:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 4 total = 4
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *call1 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+2 used[0] = 1 total = 1
	MODULE	dm_security_authorise
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_ConnectionSmAuthoriseResponse:
	enter	#6
?LBB_ConnectionSmAuthoriseResponse:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'0003,Y)
?LBB2:
	cmp	AL,#H'0001
	bcz	?L2
	st	AL,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L2:
	ld	AL,@(H'0003,Y)
	cmp	AL,#H'0001
	bne	?L3
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	add	AL,#H'FFFF
	addc	AH,#H'FFFF
	cmp	AH,#hwrd(H'0001+H'001D)
	bcs	?L3
	bne	?L7
	cmp	AL,#lwrd(H'0001+H'001D)
	bcs	?L3
?L7:
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,#(?LC1)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L3:
	tst	@(H'0002,Y)
	bne	?L4
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L4:
?LBB3:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	ld	X,@(H'0004,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0007,X)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0008,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	ld	AL,#H'001B
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionSmAuthoriseResponse:
	leave	#6
	.SEG	CONST
?LC0:
	dc	H'43
	dc	H'6F
	dc	H'6E
	dc	H'6E
	dc	H'65
	dc	H'63
	dc	H'74
	dc	H'69
	dc	H'6F
	dc	H'6E
	dc	H'53
	dc	H'6D
	dc	H'41
	dc	H'75
	dc	H'74
	dc	H'68
	dc	H'6F
	dc	H'72
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'52
	dc	H'65
	dc	H'73
	dc	H'70
	dc	H'6F
	dc	H'6E
	dc	H'73
	dc	H'65
	dc	H'20
	dc	H'2D
	dc	H'20
	dc	H'4F
	dc	H'75
	dc	H'74
	dc	H'20
	dc	H'6F
	dc	H'66
	dc	H'20
	dc	H'72
	dc	H'61
	dc	H'6E
	dc	H'67
	dc	H'65
	dc	H'20
	dc	H'70
	dc	H'72
	dc	H'6F
	dc	H'74
	dc	H'6F
	dc	H'63
	dc	H'6F
	dc	H'6C
	dc	H'20
	dc	H'69
	dc	H'64
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'78
	dc	H'0A
	dc	H'00
?LC1:
	dc	H'63
	dc	H'64
	dc	H'20
	dc	H'2E
	dc	H'2E
	dc	H'4F
	dc	H'75
	dc	H'74
	dc	H'20
	dc	H'6F
	dc	H'66
	dc	H'20
	dc	H'72
	dc	H'61
	dc	H'6E
	dc	H'67
	dc	H'65
	dc	H'20
	dc	H'52
	dc	H'46
	dc	H'43
	dc	H'4F
	dc	H'4D
	dc	H'4D
	dc	H'20
	dc	H'73
	dc	H'65
	dc	H'72
	dc	H'76
	dc	H'65
	dc	H'72
	dc	H'20
	dc	H'63
	dc	H'68
	dc	H'61
	dc	H'6E
	dc	H'6E
	dc	H'65
	dc	H'6C
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'6C
	dc	H'78
	dc	H'0A
	dc	H'00
?LC2:
	dc	H'4F
	dc	H'75
	dc	H'74
	dc	H'20
	dc	H'6F
	dc	H'66
	dc	H'20
	dc	H'72
	dc	H'61
	dc	H'6E
	dc	H'67
	dc	H'65
	dc	H'20
	dc	H'42
	dc	H'6C
	dc	H'75
	dc	H'65
	dc	H'74
	dc	H'6F
	dc	H'6F
	dc	H'74
	dc	H'68
	dc	H'20
	dc	H'41
	dc	H'64
	dc	H'64
	dc	H'72
	dc	H'65
	dc	H'73
	dc	H'73
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'70
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
$_ConnectionSmPinCodeResponse:
	enter	#5
?LBB_ConnectionSmPinCodeResponse:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB4:
	cmp	AH,#H'0000
	bne	?L9
	st	AH,@(0,Y)
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L9:
?LBB5:
	ld	AH,#H'0015
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0004,X)
	cmp	AL,#H'0000
	beq	?L10
	ld	AH,@$XAP_UXL
	add	AH,#H'0005
	st	AL,@(0,Y)
	ld	AL,@(H'0005,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
?L10:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'001C
	bsr	$_MessageSend
?LBE5:
?LBE4:
?LBE_ConnectionSmPinCodeResponse:
	leave	#5
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
$_ConnectionSmIoCapabilityResponse:
	enter	#5
?LBB_ConnectionSmIoCapabilityResponse:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB6:
	cmp	AH,#H'0000
	bne	?L12
	st	AH,@(0,Y)
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L12:
?LBB7:
	ld	AH,#H'000A
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0006,X)
	tst	@(H'0007,Y)
	beq	?L13
	ld	AL,#H'0001
	st	AL,@(H'0007,X)
	ld	AH,#H'0010
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0008,X)
	ld	AH,#H'0010
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0009,X)
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0008,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	X,#H'0010
	st	X,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0009,X)
	ld	AL,@(H'0009,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	bra	(?L14)
?L13:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0007,X)
	st	AL,@(H'0008,X)
	st	AL,@(H'0009,X)
?L14:
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'001D
	bsr	$_MessageSend
?LBE7:
?LBE6:
?LBE_ConnectionSmIoCapabilityResponse:
	leave	#5
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
$_ConnectionSmUserConfirmationResponse:
	enter	#5
?LBB_ConnectionSmUserConfirmationResponse:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0004,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'001E
	bsr	$_MessageSend
?LBE8:
?LBE_ConnectionSmUserConfirmationResponse:
	leave	#5
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
$_ConnectionSmUserPasskeyResponse:
	enter	#5
?LBB_ConnectionSmUserPasskeyResponse:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB9:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0004,X)
	ld	AH,@(H'0005,Y)
	ld	AL,@(H'0006,Y)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'001F
	bsr	$_MessageSend
?LBE9:
?LBE_ConnectionSmUserPasskeyResponse:
	leave	#5
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
$_ConnectionSmDeleteAuthDevice:
	enter	#1
?LBB_ConnectionSmDeleteAuthDevice:
	bsr	$_connectionAuthDeleteDevice
?LBE_ConnectionSmDeleteAuthDevice:
	leave	#1
$_ConnectionSmDeleteAllAuthDevices:
	enter	#1
?LBB_ConnectionSmDeleteAllAuthDevices:
	bsr	$_connectionAuthDeleteAllDevice
?LBE_ConnectionSmDeleteAllAuthDevices:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 63 used[1] = 3 total = 66
;# Function pattern *movqi3 used[0] = 91 total = 91
;# Function pattern *movhi used[2] = 4 used[3] = 3 total = 7
;# Function pattern *addhi3 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern jump used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 10 total = 10
;# Function pattern *call_value1 used[0] = 22 total = 22
;# Function pattern movstrqi+2 used[0] = 5 total = 5
;# Function pattern movstrqi+3 used[0] = 3 used[1] = 2 total = 5
;# Function pattern movstrqi+5 used[0] = 2 total = 2
;# Function pattern movstrqi+7 used[0] = 1 total = 1
	MODULE	init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	CONST
$_defaultMsgFilter:
	dc	H'0001
	.CODE
_initLocks:
	enter	#1
?LBB_initLocks:
	ld	AL,#H'0000
	st	AL,@_theCm+H'0004
	st	AL,@_theCm+H'0009
	st	AL,@_theCm+H'000A
	st	AL,@_theCm+H'000B
	st	AL,@_theCm+H'000C
	st	AL,@_theCm+H'0011
	st	AL,@_theCm+H'0012
	st	AL,@_theCm+H'0013
	st	AL,@_theCm+H'0015
	st	AL,@_theCm+H'0016
	st	AL,@_theCm+H'001B
	st	AL,@_theCm+H'001C
	st	AL,@_theCm+H'001D
?LBE_initLocks:
	leave	#1
$_connectionGetCmTask:
	enter	#1
?LBB_connectionGetCmTask:
	ld	AH,#(_theCm)
?LBE_connectionGetCmTask:
	leave	#1
$_connectionGetAppTask:
	enter	#1
?LBB_connectionGetAppTask:
	ld	AH,@_theCm+H'0001
?LBE_connectionGetAppTask:
	leave	#1
$_connectionGetMsgFilter:
	enter	#1
?LBB_connectionGetMsgFilter:
	ld	AH,@_theCm+H'0003
?LBE_connectionGetMsgFilter:
	leave	#1
$_ConnectionInit:
	enter	#1
?LBB_ConnectionInit:
	ld	AL,#($_defaultMsgFilter)
	bsr	$_ConnectionInitEx
?LBE_ConnectionInit:
	leave	#1
$_ConnectionInitEx:
	enter	#3
?LBB_ConnectionInitEx:
	st	AH,@(H'0001,Y)
	st	AL,@_theCm+H'0003
;	bsr	$_VmUseExtendedBluestackPrimitives
	DC	((256*148)+9)
	ld	AL,#lwrd($_connectionBluestackHandler)
	st	AL,@_theCm
	bsr	$_connectionGetCmTask
;	bsr	$_MessageBlueStackTask
	DC	((256*111)+9)
	cmp	AH,#H'0000
	beq	?L7
	ld	AH,#(?LC0)
	bsr	$_puts
;	bsr	$_Panic
	DC	((256*14)+9)
?L7:
	bsr	_initLocks
	ld	AL,@(H'0001,Y)
	st	AL,@_theCm+H'0001
	bsr	$_connectionGetCmTask
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AL,#H'0001
	bsr	$_MessageSend
?LBE_ConnectionInitEx:
	leave	#3
	.SEG	CONST
?LC0:
	dc	H'45
	dc	H'52
	dc	H'52
	dc	H'4F
	dc	H'52
	dc	H'20
	dc	H'2D
	dc	H'20
	dc	H'74
	dc	H'61
	dc	H'73
	dc	H'6B
	dc	H'20
	dc	H'61
	dc	H'6C
	dc	H'72
	dc	H'65
	dc	H'61
	dc	H'64
	dc	H'79
	dc	H'20
	dc	H'72
	dc	H'65
	dc	H'67
	dc	H'69
	dc	H'73
	dc	H'74
	dc	H'65
	dc	H'72
	dc	H'65
	dc	H'64
	dc	H'00
	.CODE
$_connectionHandleInternalInit:
	enter	#6
?LBB_connectionHandleInternalInit:
	st	AH,@(H'0003,Y)
	ld	AL,@_theCm+H'0002
	or	AH,@$XAP_AL
	and	AH,#H'00FF
	and	AL,#-H'0100
	or	AL,@$XAP_AH
	st	AL,@_theCm+H'0002
	and	AL,#H'00FF
	cmp	AL,#H'00FF
	bne	?L9
	ld	AL,#H'02FF
	st	AL,@_theCm+H'0002
	bra	(?L10)
?L9:
	ld	AH,@_theCm+H'0002
	ld	AL,@$XAP_AH
	and	AL,#-H'0100
	cmp	AL,#H'0100
	beq	?L10
	ld	AL,@$XAP_AH
	and	AL,#H'00FF
	or	AL,#H'0100
	st	AL,@_theCm+H'0002
	ld	AH,#H'0000
	st	AH,@(0,Y)
	ld	AL,#H'2710
	st	AL,@(H'0002,Y)
	st	AH,@(H'0001,Y)
	ld	AH,#(_theCm)
	ld	AL,#H'0000
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?L10:
	ld	AL,@_theCm+H'0002
	and	AL,#H'00FF
	cmp	AL,#H'00FF
	bne	?L12
	ld	AL,@_theCm+H'0008
	and	AL,#-H'00F1
	or	AL,#H'0080
	st	AL,@_theCm+H'0008
	ld	AL,@_theCm+H'0014
	st	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L13
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0004
	bsr	$_ConnectionSmSetSecurityMode
	bsr	$_connectionGetCmTask
	ld	AL,#H'0000
	st	AL,@(0,Y)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0002
	bsr	$_ConnectionSmSecModeConfig
	bra	(?L14)
?L13:
	bsr	$_connectionGetCmTask
	ld	AL,#H'0001
	st	AL,@(0,Y)
	ld	AL,#H'0002
	bsr	$_ConnectionSmSetSecurityMode
?L14:
	bsr	$_connectionDmInfoInit
	ld	AL,@_theCm+H'0014
	st	AL,@(0,Y)
	ld	AH,@_theCm+H'0001
	ld	AL,#H'0000
	bsr	$_connectionSendInitCfm
	bra	(?L8)
?L12:
	ld	AL,@(H'0003,Y)
	cmp	AL,#H'0008
	beq	?L21
	cmp	AL,#(H'0001+H'0008)
	bcc	?L28
	cmp	AL,#H'0001
	beq	?L18
	cmp	AL,#H'0001
	bcs	?L17
	cmp	AL,#H'0002
	beq	?L19
	cmp	AL,#H'0004
	beq	?L20
	bra	(?L8)
?L28:
	ld	AL,@(H'0003,Y)
	cmp	AL,#H'0020
	beq	?L23
	cmp	AL,#(H'0001+H'0020)
	bcc	?L29
	cmp	AL,#H'0010
	beq	?L22
	bra	(?L8)
?L29:
	ld	AL,@(H'0003,Y)
	cmp	AL,#H'0040
	beq	?L24
	bra	(?L8)
?L17:
	bsr	$_connectionDmInit
	bra	(?L8)
?L18:
	bsr	$_connectionRfcInit
	bra	(?L8)
?L19:
	bsr	$_connectionL2capInit
	bra	(?L8)
?L20:
	bsr	$_connectionUdpInit
	bra	(?L8)
?L21:
	bsr	$_connectionTcpInit
	bra	(?L8)
?L22:
	ld	AH,#(_theCm+H'0015)
	bsr	$_connectionSdpInit
	bra	(?L8)
?L23:
	bsr	$_connectionVersionInit
	bra	(?L8)
?L24:
	ld	AH,#(_theCm+H'0012)
	bsr	$_connectionSmInit
	ld	AL,@$XAP_AH
	asl	#H'000C
	ld	AH,@_theCm+H'0007
	and	AH,#H'0FFF
	or	AH,@$XAP_AL
	st	AH,@_theCm+H'0007
?L8:
?LBE_connectionHandleInternalInit:
	leave	#6
$_connectionSendInternalInitCfm:
	enter	#4
?LBB_connectionSendInternalInitCfm:
	st	AH,@(H'0001,Y)
?LBB2:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'0002
	bsr	$_MessageSend
?LBE2:
?LBE_connectionSendInternalInitCfm:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
$_connectionSendInitCfm:
	enter	#4
?LBB_connectionSendInitCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB3:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7000
	bsr	$_MessageSend
	tst	@(H'0002,Y)
	bne	?L43
	bsr	$_connectionGetCmTask
	ld	AL,#H'0000
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
?L43:
?LBE3:
?LBE_connectionSendInitCfm:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
	.SEG	VAR
_theCm:
	DS	31
	ENDMOD

;# Function pattern *movqi2 used[0] = 46 used[1] = 1 total = 47
;# Function pattern *movqi3 used[0] = 42 total = 42
;# Function pattern *andqi3 used[0] = 8 total = 8
;# Function pattern *iorqi3 used[0] = 5 total = 5
;# Function pattern *ashlqi3 used[0] = 1 total = 1
;# Function pattern jump used[0] = 13 total = 13
;# Function pattern *call1 used[0] = 20 total = 20
;# Function pattern *call_value1 used[0] = 13 total = 13
;# Function pattern movstrqi+2 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 1 used[1] = 1 total = 2
;# Function pattern movstrqi+4 used[1] = 2 total = 2
;# Function pattern movstrqi+5 used[0] = 12 total = 12
	MODULE	rfc
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_initConfigParams:
	enter	#1
?LBB_initConfigParams:
	ld	X,@$XAP_AH
	ld	AL,#H'007F
	st	AL,@(0,X)
	ld	AH,#H'0000
	st	AH,@(H'0001,X)
	st	AH,@(H'0002,X)
	ld	AL,#-H'15A0
	st	AL,@(H'0004,X)
	st	AH,@(H'0003,X)
	ld	AL,#H'0001
	st	AL,@(H'0005,X)
	ld	AL,#H'00FF
	st	AL,@(H'0006,X)
	ld	AL,#H'0003
	st	AL,@(H'0007,X)
	st	AH,@(H'0008,X)
	ld	AL,#H'0001
	st	AL,@(H'0009,X)
	st	AH,@(H'000A,X)
	st	AH,@(H'000B,X)
	ld	AL,#H'0011
	st	AL,@(H'000C,X)
	ld	AL,#H'0013
	st	AL,@(H'000D,X)
	ld	AL,#H'3F7F
	st	AL,@(H'000E,X)
?LBE_initConfigParams:
	leave	#1
_sendInternalRfcommRegisterMessage:
	enter	#5
?LBB_sendInternalRfcommRegisterMessage:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'004A
	bsr	$_MessageSend
?LBE2:
?LBE_sendInternalRfcommRegisterMessage:
	leave	#5
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
$_ConnectionRfcommAllocateChannel:
	enter	#2
?LBB_ConnectionRfcommAllocateChannel:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	bsr	_sendInternalRfcommRegisterMessage
?LBE_ConnectionRfcommAllocateChannel:
	leave	#2
$_ConnectionRfcommAllocateChannelLazy:
	enter	#2
?LBB_ConnectionRfcommAllocateChannelLazy:
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	bsr	_sendInternalRfcommRegisterMessage
?LBE_ConnectionRfcommAllocateChannelLazy:
	leave	#2
$_ConnectionRfcommConnectRequest:
	enter	#5
?LBB_ConnectionRfcommConnectRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB3:
	cmp	AL,#H'0000
	bne	?L6
	st	AL,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L6:
?LBB4:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0006,X)
	tst	@(H'0007,Y)
	beq	?L7
	ld	AH,@$XAP_UXL
	add	AH,#H'0007
	ld	AL,#H'000F
	ld	X,@(H'0007,Y)
	bc2
	bra	(?L8)
?L7:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0007
	bsr	_initConfigParams
?L8:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'004B
	bsr	$_MessageSend
?LBE4:
?LBE3:
?LBE_ConnectionRfcommConnectRequest:
	leave	#5
	.SEG	CONST
?LC0:
	dc	H'4F
	dc	H'75
	dc	H'74
	dc	H'20
	dc	H'6F
	dc	H'66
	dc	H'20
	dc	H'72
	dc	H'61
	dc	H'6E
	dc	H'67
	dc	H'65
	dc	H'20
	dc	H'42
	dc	H'6C
	dc	H'75
	dc	H'65
	dc	H'74
	dc	H'6F
	dc	H'6F
	dc	H'74
	dc	H'68
	dc	H'20
	dc	H'41
	dc	H'64
	dc	H'64
	dc	H'72
	dc	H'65
	dc	H'73
	dc	H'73
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'70
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
$_ConnectionRfcommConnectResponse:
	enter	#5
?LBB_ConnectionRfcommConnectResponse:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB5:
	tst	@(H'0005,Y)
	bne	?L10
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L10:
?LBB6:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0006,X)
	tst	@(H'0007,Y)
	beq	?L11
	ld	AH,@$XAP_UXL
	add	AH,#H'0007
	ld	AL,#H'000F
	ld	X,@(H'0007,Y)
	bc2
	bra	(?L12)
?L11:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0007
	bsr	_initConfigParams
?L12:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'004C
	bsr	$_MessageSend
?LBE6:
?LBE5:
?LBE_ConnectionRfcommConnectResponse:
	leave	#5
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
$_ConnectionRfcommDisconnectRequest:
	enter	#5
?LBB_ConnectionRfcommDisconnectRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB7:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'004D
	bsr	$_MessageSend
?LBE7:
?LBE_ConnectionRfcommDisconnectRequest:
	leave	#5
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
$_ConnectionRfcommControlSignalRequest:
	enter	#5
?LBB_ConnectionRfcommControlSignalRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0003,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'0050
	bsr	$_MessageSend
?LBE8:
?LBE_ConnectionRfcommControlSignalRequest:
	leave	#5
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
	ENDMOD

;# Function pattern *movqi2 used[0] = 65 used[1] = 2 total = 67
;# Function pattern *movqi3 used[0] = 63 total = 63
;# Function pattern *addqi2 used[0] = 4 total = 4
;# Function pattern jump used[0] = 2 total = 2
;# Function pattern *call1 used[0] = 11 total = 11
;# Function pattern *call_value1 used[0] = 12 total = 12
;# Function pattern *movstrqi2 used[0] = 2 total = 2
;# Function pattern movstrqi+2 used[0] = 5 total = 5
;# Function pattern movstrqi+3 used[0] = 1 used[1] = 3 total = 4
	MODULE	bluestack_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_connectionBluestackHandlerDm:
	enter	#4
?LBB_connectionBluestackHandlerDm:
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,@$XAP_AH
?LBB2:
	ld	AH,@(H'0002,X)
	lsr	#H'0008
	cmp	AH,#H'0002
	bne	?L2
	ld	X,@H'fff9
	ld	AL,@(0,X)
	add	AL,#-H'7C06
	cmp	AL,#(H'0001+H'0021)
	bcc	?L3
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE13,X)
	brxl
	.SEG	CONST
?JTBASE13:
	.CODE
?L13:
	.SEG	CONST
	dc	?L8-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L5-?L13
	dc	?L5-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L3-?L13
	dc	?L6-?L13
	dc	?L7-?L13
	dc	?L3-?L13
	dc	?L9-?L13
	dc	?L10-?L13
	dc	?L3-?L13
	dc	?L11-?L13
	dc	?L12-?L13
	.CODE
?L5:
	ld	AH,@H'fff9
	bsr	$_connectionHandleSyncRegisterCfm
	bra	(?L1)
?L6:
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleSyncConnectCfm
	bra	(?L1)
?L7:
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleSyncConnectCompleteInd
	bra	(?L1)
?L8:
	ld	AH,@H'fff9
	bsr	$_connectionHandleSyncConnectInd
	bra	(?L1)
?L9:
	ld	AH,@H'fff9
	bsr	$_connectionHandleSyncDisconnectInd
	bra	(?L1)
?L10:
	ld	AH,@H'fff9
	bsr	$_connectionHandleSyncDisconnectCfm
	bra	(?L1)
?L11:
	ld	AH,@H'fff9
	bsr	$_connectionHandleSyncRenegotiateInd
	bra	(?L1)
?L12:
	ld	AH,@H'fff9
	bsr	$_connectionHandleSyncRenegotiateCfm
	bra	(?L1)
?L3:
	ld	X,@H'fff9
	ld	AL,@(0,X)
	add	AL,#-H'2C14
	cmp	AL,#(H'0001+H'0014)
	bcc	?L15
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE34,X)
	brxl
	.SEG	CONST
?JTBASE34:
	.CODE
?L34:
	.SEG	CONST
	dc	?L17-?L34
	dc	?L15-?L34
	dc	?L18-?L34
	dc	?L19-?L34
	dc	?L20-?L34
	dc	?L21-?L34
	dc	?L1-?L34
	dc	?L23-?L34
	dc	?L24-?L34
	dc	?L15-?L34
	dc	?L15-?L34
	dc	?L25-?L34
	dc	?L17-?L34
	dc	?L26-?L34
	dc	?L27-?L34
	dc	?L28-?L34
	dc	?L29-?L34
	dc	?L30-?L34
	dc	?L31-?L34
	dc	?L32-?L34
	dc	?L33-?L34
	.CODE
?L17:
	ld	AH,#H'0007
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleSmAddDeviceCfmReady
	bra	(?L1)
?L18:
	ld	AH,@H'fff9
	bsr	$_connectionHandleSmLinkKeyReqInd
	bra	(?L1)
?L19:
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleSmPinReqInd
	bra	(?L1)
?L20:
	ld	AL,#H'0012
	add	AL,@H'fff8
	ld	AH,#H'0007
	add	AH,@H'fff8
	st	AH,@(0,Y)
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(H'0001,Y)
	ld	AL,@H'ffff
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	bsr	$_connectionHandleSmLinkKeyInd
	bra	(?L1)
?L21:
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleSmAuthoriseInd
	bra	(?L1)
?L23:
	ld	AH,#H'0007
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleEncryptCfm
	bra	(?L1)
?L24:
	ld	AH,@H'fff9
	bsr	$_connectionHandleEncryptionChange
	bra	(?L1)
?L25:
	ld	AH,#H'0007
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadLocalOobDataCfm
	bra	(?L1)
?L26:
	ld	AL,#H'0007
	add	AL,@H'fff8
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	bsr	$_connectionHandleSmIoCapResInd
	bra	(?L1)
?L27:
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleSmIoCapReqInd
	bra	(?L1)
?L28:
	ld	AL,#H'0007
	add	AL,@H'fff8
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	bsr	$_connectionHandleSmSimplePairingCompleteInd
	bra	(?L1)
?L29:
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleSmUserConfirmationReqInd
	bra	(?L1)
?L30:
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleSmUserPasskeyReqInd
	bra	(?L1)
?L31:
	ld	AL,#H'0007
	add	AL,@H'fff8
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	bsr	$_connectionHandleSmSspLinkKeyReqInd
	bra	(?L1)
?L32:
	ld	AL,#H'0007
	add	AL,@H'fff8
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	bsr	$_connectionHandleSmUserPasskeyNotificationInd
	bra	(?L1)
?L33:
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleSmKeypressNotificationInd
	bra	(?L1)
?L15:
	ld	X,@H'fff9
	ld	AL,@(0,X)
	add	AL,#-H'0421
	cmp	AL,#(H'0001+H'000B)
	bcc	?L36
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE44,X)
	brxl
	.SEG	CONST
?JTBASE44:
	.CODE
?L44:
	.SEG	CONST
	dc	?L39-?L44
	dc	?L36-?L44
	dc	?L36-?L44
	dc	?L38-?L44
	dc	?L39-?L44
	dc	?L36-?L44
	dc	?L36-?L44
	dc	?L36-?L44
	dc	?L40-?L44
	dc	?L41-?L44
	dc	?L42-?L44
	dc	?L43-?L44
	.CODE
?L38:
	ld	AH,#H'0004
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleInquiryResult
	bra	(?L1)
?L39:
	ld	AH,#H'0004
	add	AH,@H'fff8
	bsr	$_connectionHandleInquiryComplete
	bra	(?L1)
?L40:
	ld	AH,#H'0004
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleRemoteNameComplete
	bra	(?L1)
?L41:
	ld	AH,#H'0012
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadRemoteSupportedFeaturesCfm
	bra	(?L1)
?L42:
	ld	AH,#H'0012
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadRemoteVersionCfm
	bra	(?L1)
?L43:
	ld	AH,#H'0012
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadClkOffsetComplete
	bra	(?L1)
?L36:
	ld	X,@H'fff9
	ld	AL,@(0,X)
	add	AL,#-H'780A
	cmp	AL,#(H'0001+H'0040)
	bcc	?L46
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE56,X)
	brxl
	.SEG	CONST
?JTBASE56:
	.CODE
?L56:
	.SEG	CONST
	dc	?L47-?L56
	dc	?L48-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L49-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L46-?L56
	dc	?L50-?L56
	dc	?L46-?L56
	dc	?L51-?L56
	dc	?L46-?L56
	dc	?L52-?L56
	dc	?L46-?L56
	dc	?L53-?L56
	dc	?L46-?L56
	dc	?L54-?L56
	dc	?L46-?L56
	dc	?L55-?L56
	.CODE
?L47:
	ld	AH,#H'0004
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadInquiryModeComplete
	bra	(?L1)
?L48:
	ld	AH,#H'0004
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleWriteInquiryModeComplete
	bra	(?L1)
?L49:
	ld	AH,#H'0004
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleInquiryResultWithRssi
	bra	(?L1)
?L50:
	ld	AH,@H'fff9
	bsr	$_connectionHandleSniffSubRatingInd
	bra	(?L1)
?L51:
	ld	AH,#H'0004
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadEirDataComplete
	bra	(?L1)
?L52:
	ld	AH,#H'0004
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleExtendedInquiryResult
	bra	(?L1)
?L53:
	ld	AH,#H'0004
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadInquiryTxComplete
	bra	(?L1)
?L54:
	ld	AH,@H'fff9
	bsr	$_connectionHandleLinkSupervisionTimeoutInd
	bra	(?L1)
?L55:
	ld	AH,@H'fff9
	bsr	$_connectionHandleEncryptionKeyRefreshInd
	bra	(?L1)
?L46:
	ld	X,@H'fff9
	ld	AL,@(0,X)
	cmp	AL,#H'0C58
	beq	?L63
	cmp	AL,#(H'0001+H'0C58)
	bcc	?L71
	cmp	AL,#H'0812
	beq	?L60
	cmp	AL,#(H'0001+H'0812)
	bcc	?L72
	cmp	AL,#H'0810
	beq	?L59
	bra	(?L2)
?L72:
	cmp	AL,#H'0813
	beq	?L61
	cmp	AL,#H'0C4B
	beq	?L62
	bra	(?L2)
?L71:
	cmp	AL,#H'1409
	beq	?L66
	cmp	AL,#(H'0001+H'1409)
	bcc	?L73
	cmp	AL,#H'0C69
	beq	?L64
	cmp	AL,#H'100E
	beq	?L65
	bra	(?L2)
?L73:
	cmp	AL,#H'140A
	beq	?L67
	cmp	AL,#H'7901
	beq	?L68
	bra	(?L2)
?L59:
	ld	AH,@H'fff9
	bsr	$_connectionHandleQosSetupCfm
	bra	(?L1)
?L60:
	ld	AH,#H'001E
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleRoleDiscoveryComplete
	bra	(?L1)
?L61:
	ld	AL,#H'001E
	add	AL,@H'fff8
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	bsr	$_connectionHandleDmSwitchRoleComplete
	bra	(?L1)
?L62:
	ld	AH,#H'0004
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleLocalNameComplete
	bra	(?L1)
?L63:
	ld	AH,#H'0012
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadClassOfDeviceComplete
	bra	(?L1)
?L64:
	ld	AH,#H'0004
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleWriteIacLapComplete
	bra	(?L1)
?L65:
	ld	AH,#H'0012
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadBdAddrComplete
	bra	(?L1)
?L66:
	ld	AH,#H'0012
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadLinkQualityComplete
	bra	(?L1)
?L67:
	ld	AH,#H'0012
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadRssiComplete
	bra	(?L1)
?L68:
	ld	AH,@H'fff9
	bsr	$_connectionLinkPolicyHandleWritePowerStatesCfm
	bra	(?L1)
?L2:
	cmp	AH,#H'0000
	beq	?L74
	cmp	AH,#H'0001
	beq	?L75
	ld	X,@H'fff9
	ld	AL,@(0,X)
	cmp	AL,#H'280E
	beq	?L82
	cmp	AL,#(H'0001+H'280E)
	bcc	?L86
	cmp	AL,#H'280C
	beq	?L78
	cmp	AL,#(H'0001+H'280C)
	bcc	?L79
	cmp	AL,#H'080F
	beq	?L77
	bra	(?L75)
?L86:
	cmp	AL,#H'3004
	beq	?L80
	cmp	AL,#(H'0001+H'3004)
	bcc	?L87
	cmp	AL,#H'2C29
	beq	?L83
	bra	(?L75)
?L87:
	cmp	AL,#H'3005
	beq	?L81
	bra	(?L75)
?L77:
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleDmHciModeChangeEvent
	bra	(?L1)
?L78:
	ld	AH,#H'0007
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleDmAclOpenCfm
	bra	(?L1)
?L79:
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleDmAclOpenInd
	bra	(?L1)
?L80:
	ld	AL,#H'0007
	add	AL,@H'fff8
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	bsr	$_connectionHandleDmEnAclOpenInd
	bra	(?L1)
?L81:
	ld	AL,#H'0007
	add	AL,@H'fff8
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	bsr	$_connectionHandleDmEnAclClosedInd
	bra	(?L1)
?L82:
	ld	AL,#H'0007
	add	AL,@H'fff8
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	bsr	$_connectionHandleDmAclClosedInd
	bra	(?L1)
?L83:
	ld	AL,#H'0007
	add	AL,@H'fff8
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	bsr	$_connectionHandleSmBondingCfm
	bra	(?L1)
?L75:
	ld	X,@H'fff9
	ld	AL,@(0,X)
	cmp	AL,#H'100C
	beq	?L1
	cmp	AL,#(H'0001+H'100C)
	bcc	?L130
	cmp	AL,#H'0C4A
	beq	?L116
	cmp	AL,#(H'0001+H'0C4A)
	bcc	?L131
	cmp	AL,#H'0426
	beq	?L1
	cmp	AL,#(H'0001+H'0426)
	bcc	?L132
	cmp	AL,#H'0001
	beq	?L91
	cmp	AL,#H'0003
	beq	?L89
	bra	(?L74)
?L132:
	cmp	AL,#H'0C42
	beq	?L116
	cmp	AL,#(H'0001+H'0C42)
	bcc	?L133
	cmp	AL,#H'0815
	beq	?L1
	bra	(?L74)
?L133:
	cmp	AL,#H'0C49
	beq	?L1
	bra	(?L74)
?L131:
	cmp	AL,#H'0C59
	beq	?L116
	cmp	AL,#(H'0001+H'0C59)
	bcc	?L134
	cmp	AL,#H'0C53
	beq	?L116
	cmp	AL,#(H'0001+H'0C53)
	bcc	?L135
	cmp	AL,#H'0C51
	beq	?L116
	bra	(?L74)
?L135:
	cmp	AL,#H'0C55
	beq	?L116
	bra	(?L74)
?L134:
	cmp	AL,#H'0C66
	beq	?L1
	cmp	AL,#(H'0001+H'0C66)
	bcc	?L136
	cmp	AL,#H'0C5D
	beq	?L1
	bra	(?L74)
?L136:
	cmp	AL,#H'100B
	beq	?L90
	bra	(?L74)
?L130:
	cmp	AL,#H'2C20
	beq	?L94
	cmp	AL,#(H'0001+H'2C20)
	bcc	?L137
	cmp	AL,#H'2C13
	beq	?L100
	cmp	AL,#(H'0001+H'2C13)
	bcc	?L138
	cmp	AL,#H'1808
	beq	?L103
	cmp	AL,#H'1808
	bcs	?L74
	add	AL,#-H'2808
	cmp	AL,#(H'0001+H'0002)
	bcc	?L74
	bra	(?L116)
?L138:
	cmp	AL,#H'2C15
	beq	?L1
	cmp	AL,#H'2C15
	bcs	?L94
	cmp	AL,#H'2C1E
	beq	?L98
	bra	(?L74)
?L137:
	cmp	AL,#H'7802
	beq	?L1
	cmp	AL,#(H'0001+H'7802)
	bcc	?L139
	cmp	AL,#H'3001
	beq	?L1
	cmp	AL,#(H'0001+H'3001)
	bcc	?L140
	cmp	AL,#H'2C2B
	beq	?L96
	bra	(?L74)
?L140:
	cmp	AL,#H'7800
	beq	?L1
	bra	(?L74)
?L139:
	cmp	AL,#H'7843
	beq	?L116
	cmp	AL,#(H'0001+H'7843)
	bcc	?L141
	cmp	AL,#H'7841
	beq	?L116
	bra	(?L74)
?L141:
	cmp	AL,#H'7847
	beq	?L116
	bra	(?L74)
?L89:
	ld	AH,#H'0012
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleSetBtVersionCfm
	bra	(?L1)
?L90:
	ld	AH,#H'0012
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleReadLocalVersionCfm
	bra	(?L1)
?L91:
	cmp	AH,#H'0001
	bne	?L74
	ld	AH,#H'0001
	bsr	$_connectionSendInternalInitCfm
	bra	(?L1)
?L94:
	cmp	AH,#H'0001
	bne	?L74
	ld	AH,#H'0007
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleSmAddDeviceCfm
	bra	(?L1)
?L96:
	cmp	AH,#H'0003
	beq	?L74
	ld	AH,#H'0015
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleSmAccessInd
	bra	(?L1)
?L98:
	cmp	AH,#H'0003
	beq	?L74
	ld	AH,#H'0007
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleConfigureSecurityCfm
	bra	(?L1)
?L100:
	cmp	AH,#H'0003
	bne	?L101
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleDutSecurityDisabled
	bra	(?L1)
?L101:
	ld	AH,#H'0007
	add	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$_connectionHandleSetSecurityModeCfm
	bra	(?L1)
?L103:
	cmp	AH,#H'0003
	bne	?L74
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@H'fff9
	bsr	$_connectionHandleDutCfm
	bra	(?L1)
?L116:
	ld	X,@H'fff9
?LBB3:
	tst	@(H'0002,X)
	beq	?L1
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
	bra	(?L142)
?L74:
?LBE3:
	ld	AL,#H'0001
	st	AL,@(0,Y)
	st	AH,@(H'0001,Y)
	ld	X,@H'fff9
	ld	AL,@(0,X)
	st	AL,@(H'0002,Y)
	ld	AH,#(?LC1)
	bsr	$_printf
?L142:
;	bsr	$_Panic
	DC	((256*14)+9)
?L1:
?LBE2:
?LBE_connectionBluestackHandlerDm:
	leave	#4
	.SEG	CONST
?LC0:
	dc	H'49
	dc	H'67
	dc	H'6E
	dc	H'6F
	dc	H'72
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'72
	dc	H'65
	dc	H'73
	dc	H'75
	dc	H'6C
	dc	H'74
	dc	H'20
	dc	H'70
	dc	H'72
	dc	H'69
	dc	H'6D
	dc	H'20
	dc	H'72
	dc	H'65
	dc	H'70
	dc	H'6F
	dc	H'72
	dc	H'74
	dc	H'73
	dc	H'20
	dc	H'65
	dc	H'72
	dc	H'72
	dc	H'6F
	dc	H'72
	dc	H'3A
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'78
	dc	H'0A
	dc	H'00
?LC1:
	dc	H'68
	dc	H'61
	dc	H'6E
	dc	H'64
	dc	H'6C
	dc	H'65
	dc	H'55
	dc	H'6E
	dc	H'65
	dc	H'78
	dc	H'70
	dc	H'65
	dc	H'63
	dc	H'74
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'2D
	dc	H'20
	dc	H'43
	dc	H'6F
	dc	H'64
	dc	H'65
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'78
	dc	H'20
	dc	H'53
	dc	H'74
	dc	H'61
	dc	H'74
	dc	H'65
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'78
	dc	H'20
	dc	H'4D
	dc	H'73
	dc	H'67
	dc	H'49
	dc	H'64
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'78
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
_connectionBluestackHandlerL2cap:
	enter	#4
?LBB_connectionBluestackHandlerL2cap:
	st	AL,@H'fff8
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	and	AL,#-H'0100
	cmp	AL,#H'0200
	bne	?L197
	ld	X,@H'fff8
	ld	AL,@(0,X)
	cmp	AL,#(H'0001+H'0012)
	bcc	?L197
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE207,X)
	brxl
	.SEG	CONST
?JTBASE207:
	.CODE
?L207:
	.SEG	CONST
	dc	?L197-?L207
	dc	?L197-?L207
	dc	?L199-?L207
	dc	?L197-?L207
	dc	?L197-?L207
	dc	?L200-?L207
	dc	?L201-?L207
	dc	?L197-?L207
	dc	?L197-?L207
	dc	?L202-?L207
	dc	?L203-?L207
	dc	?L197-?L207
	dc	?L197-?L207
	dc	?L197-?L207
	dc	?L197-?L207
	dc	?L197-?L207
	dc	?L204-?L207
	dc	?L205-?L207
	dc	?L196-?L207
	.CODE
?L199:
	add	AH,#H'001D
	ld	AL,@H'fff8
	bsr	$_connectionHandleL2capRegisterCfm
	bra	(?L196)
?L200:
	ld	AH,@H'fff8
	bsr	$_connectionHandleL2capConnectInd
	bra	(?L196)
?L201:
	ld	AH,@H'fff8
	bsr	$_connectionHandleL2capConnectCfm
	bra	(?L196)
?L202:
	ld	AH,@H'fff8
	bsr	$_connectionHandleL2capConfigInd
	bra	(?L196)
?L203:
	ld	AH,@H'fff8
	bsr	$_connectionHandleL2capConfigCfm
	bra	(?L196)
?L204:
	ld	AH,@H'fff8
	bsr	$_connectionHandleL2capDisconnectInd
	bra	(?L196)
?L205:
	ld	AH,@H'fff8
	bsr	$_connectionHandleL2capDisconnectCfm
	bra	(?L196)
?L197:
	ld	AL,#H'0004
	st	AL,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0002,X)
	lsr	#H'0008
	st	AH,@(H'0001,Y)
	ld	X,@H'fff8
	ld	AL,@(0,X)
	st	AL,@(H'0002,Y)
	ld	AH,#(?LC1)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L196:
?LBE_connectionBluestackHandlerL2cap:
	leave	#4
_connectionBluestackHandlerRfcomm:
	enter	#4
?LBB_connectionBluestackHandlerRfcomm:
	st	AL,@H'fff8
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	and	AL,#-H'0100
	cmp	AL,#H'0200
	bne	?L211
	ld	X,@H'fff8
	ld	AL,@(0,X)
	add	AL,#-H'0004
	cmp	AL,#(H'0001+H'002B)
	bcc	?L227
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE225,X)
	brxl
	.SEG	CONST
?JTBASE225:
	.CODE
?L225:
	.SEG	CONST
	dc	?L213-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L215-?L225
	dc	?L214-?L225
	dc	?L216-?L225
	dc	?L227-?L225
	dc	?L210-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L220-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L221-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L218-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L223-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L222-?L225
	dc	?L217-?L225
	dc	?L227-?L225
	dc	?L227-?L225
	dc	?L219-?L225
	.CODE
?L213:
	add	AH,#H'001B
	ld	AL,@H'fff8
	bsr	$_connectionHandleRfcommRegisterCfm
	bra	(?L210)
?L214:
	add	AH,#H'001B
	ld	AL,@H'fff8
	bsr	$_connectionHandleRfcommStartCfm
	bra	(?L210)
?L215:
	ld	AH,@H'fff8
	bsr	$_connectionHandleRfcommStartInd
	bra	(?L210)
?L216:
	ld	AH,@H'fff8
	bsr	$_connectionHandleRfcommStartCmpInd
	bra	(?L210)
?L217:
	ld	AH,@H'fff8
	bsr	$_connectionHandleRfcommParnegInd
	bra	(?L210)
?L218:
	ld	AH,@H'fff8
	bsr	$_connectionHandleRfcommParnegCfm
	bra	(?L210)
?L219:
	ld	AH,@H'fff8
	bsr	$_connectionHandleRfcommEstablishInd
	bra	(?L210)
?L220:
	ld	AH,@H'fff8
	bsr	$_connectionHandleRfcommEstablishCfm
	bra	(?L210)
?L221:
	ld	AH,@H'fff8
	bsr	$_connectionHandleRfcommControlInd
	bra	(?L210)
?L222:
	ld	AH,@H'fff8
	bsr	$_connectionHandleRfcommReleaseInd
	bra	(?L210)
?L223:
	ld	AH,@H'fff8
	bsr	$_connectionHandleRfcommPortNegInd
	bra	(?L210)
?L211:
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	and	AL,#-H'0100
	cmp	AL,#H'0100
	bne	?L227
	ld	X,@H'fff8
	ld	AL,@(0,X)
	cmp	AL,#H'0002
	bne	?L227
	ld	AH,#H'0002
	bsr	$_connectionSendInternalInitCfm
	bra	(?L210)
?L227:
	ld	AL,#H'0002
	st	AL,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0002,X)
	lsr	#H'0008
	st	AH,@(H'0001,Y)
	ld	X,@H'fff8
	ld	AL,@(0,X)
	st	AL,@(H'0002,Y)
	ld	AH,#(?LC1)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L210:
?LBE_connectionBluestackHandlerRfcomm:
	leave	#4
_connectionBluestackHandlerSdp:
	enter	#4
?LBB_connectionBluestackHandlerSdp:
	st	AL,@H'fff8
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	and	AL,#-H'0100
	cmp	AL,#H'0200
	bne	?L234
	ld	X,@H'fff8
	ld	AL,@(0,X)
	add	AL,#-H'0009
	cmp	AL,#(H'0001+H'000C)
	bcc	?L234
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE243,X)
	brxl
	.SEG	CONST
?JTBASE243:
	.CODE
?L243:
	.SEG	CONST
	dc	?L238-?L243
	dc	?L234-?L243
	dc	?L234-?L243
	dc	?L239-?L243
	dc	?L234-?L243
	dc	?L234-?L243
	dc	?L236-?L243
	dc	?L234-?L243
	dc	?L237-?L243
	dc	?L234-?L243
	dc	?L242-?L243
	dc	?L240-?L243
	dc	?L241-?L243
	.CODE
?L236:
	add	AH,#H'0015
	ld	AL,@H'fff8
	bsr	$_connectionHandleSdpRegisterCfm
	bra	(?L233)
?L237:
	add	AH,#H'0015
	ld	AL,@H'fff8
	bsr	$_connectionHandleSdpUnregisterCfm
	bra	(?L233)
?L238:
	add	AH,#H'0015
	ld	AL,@H'fff8
	bsr	$_connectionHandleSdpOpenSearchCfm
	bra	(?L233)
?L239:
	add	AH,#H'0015
	ld	AL,@H'fff8
	bsr	$_connectionHandleSdpCloseSearchInd
	bra	(?L233)
?L240:
	add	AH,#H'0015
	ld	AL,@H'fff8
	bsr	$_connectionHandleSdpServiceSearchCfm
	bra	(?L233)
?L241:
	add	AH,#H'0015
	ld	AL,@H'fff8
	bsr	$_connectionHandleSdpAttributeSearchCfm
	bra	(?L233)
?L242:
	add	AH,#H'0015
	ld	AL,@H'fff8
	bsr	$_connectionHandleSdpServiceSearchAttributeCfm
	bra	(?L233)
?L234:
	ld	AL,#H'0003
	st	AL,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0002,X)
	lsr	#H'0008
	st	AH,@(H'0001,Y)
	ld	X,@H'fff8
	ld	AL,@(0,X)
	st	AL,@(H'0002,Y)
	ld	AH,#(?LC1)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L233:
?LBE_connectionBluestackHandlerSdp:
	leave	#4
_connectionBluestackHandlerUninitialised:
	enter	#4
?LBB_connectionBluestackHandlerUninitialised:
	st	AL,@H'fff8
	cmp	AL,#H'0001
	bne	?L247
	ld	AH,#H'0000
	bsr	$_connectionHandleInternalInit
	bra	(?L246)
?L247:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0002,X)
	lsr	#H'0008
	st	AH,@(H'0001,Y)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(H'0002,Y)
	ld	AL,@H'ffff
	ld	AH,#(?LC1)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L246:
?LBE_connectionBluestackHandlerUninitialised:
	leave	#4
_connectionBluestackHandlerInitialising:
	enter	#5
?LBB_connectionBluestackHandlerInitialising:
	st	AH,@(H'0003,Y)
	st	AL,@H'fff8
	cmp	AL,#(H'0001+H'0037)
	bcc	?L259
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE260,X)
	brxl
	.SEG	CONST
?JTBASE260:
	.CODE
?L260:
	.SEG	CONST
	dc	?L253-?L260
	dc	?L259-?L260
	dc	?L252-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L254-?L260
	dc	?L255-?L260
	dc	?L256-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L259-?L260
	dc	?L258-?L260
	dc	?L259-?L260
	dc	?L257-?L260
	.CODE
?L252:
	ld	X,@(H'0005,Y)
	ld	AH,@(0,X)
	bsr	$_connectionHandleInternalInit
	bra	(?L250)
?L253:
	ld	AH,@(H'0003,Y)
	ld	AL,#H'0002
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	and	AL,#H'00FF
	st	AL,@(H'0002,X)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'0001
	bsr	$_connectionSendInitCfm
	bra	(?L250)
?L254:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0007
	ld	AL,@(H'0005,Y)
	bsr	$_handleSetSecurityModeReq
	bra	(?L250)
?L255:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0007
	ld	AL,@(H'0003,Y)
	add	AL,#H'0012
	ld	X,@(H'0005,Y)
	st	X,@(0,Y)
	bsr	$_handleSetSspSecurityLevelReq
	bra	(?L250)
?L256:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0007
	ld	AL,@(H'0003,Y)
	add	AL,#H'0012
	ld	X,@(H'0005,Y)
	st	X,@(0,Y)
	bsr	$_handleSecModeConfigReq
	bra	(?L250)
?L257:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0012
	ld	AL,@(H'0005,Y)
	bsr	$_connectionHandleReadLocalVersionRequest
	bra	(?L250)
?L258:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0012
	ld	AL,@(H'0005,Y)
	bsr	$_connectionHandleSetBtVersionReq
	bra	(?L250)
?L259:
	ld	AL,#H'0005
	st	AL,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	lsr	#H'0008
	st	AH,@(H'0001,Y)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(H'0002,Y)
	ld	AL,@H'ffff
	ld	AH,#(?LC1)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L250:
?LBE_connectionBluestackHandlerInitialising:
	leave	#5
_connectionBluestackHandlerTestMode:
	enter	#4
?LBB_connectionBluestackHandlerTestMode:
	st	AH,@H'fff8
	st	AL,@H'fff9
	cmp	AL,#H'0029
	beq	?L266
	cmp	AL,#(H'0001+H'0029)
	bcc	?L272
	cmp	AL,#H'0013
	beq	?L264
	cmp	AL,#(H'0001+H'0013)
	bcc	?L273
	cmp	AL,#H'0012
	beq	?L263
	bra	(?L270)
?L273:
	cmp	AL,#H'0014
	beq	?L265
	bra	(?L270)
?L272:
	cmp	AL,#H'0037
	beq	?L267
	cmp	AL,#(H'0001+H'0037)
	bcc	?L274
	cmp	AL,#H'0035
	beq	?L268
	bra	(?L270)
?L274:
	cmp	AL,#H'005E
	beq	?L269
	bra	(?L270)
?L263:
	add	AH,#H'0007
	ld	AL,@(H'0004,Y)
	bsr	$_handleSetSecurityModeReq
	bra	(?L261)
?L264:
	add	AH,#H'0007
	ld	AL,#H'0012
	add	AL,@H'fff8
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	bsr	$_handleSetSspSecurityLevelReq
	bra	(?L261)
?L265:
	add	AH,#H'0007
	ld	AL,#H'0012
	add	AL,@H'fff8
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	bsr	$_handleSecModeConfigReq
	bra	(?L261)
?L266:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleWriteScanEnableRequest
	bra	(?L261)
?L267:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadLocalVersionRequest
	bra	(?L261)
?L268:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSetBtVersionReq
	bra	(?L261)
?L269:
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	ld	AL,#H'0001
	bsr	$_connectionSendDutCfmToClient
	bra	(?L261)
?L270:
	ld	AL,#H'0005
	st	AL,@(0,Y)
	ld	X,@H'fff8
	ld	AH,@(H'0002,X)
	lsr	#H'0008
	st	AH,@(H'0001,Y)
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(H'0002,Y)
	ld	AL,@H'ffff
	ld	AH,#(?LC1)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L261:
?LBE_connectionBluestackHandlerTestMode:
	leave	#4
_connectionBluestackHandlerReady:
	enter	#4
?LBB_connectionBluestackHandlerReady:
	st	AH,@H'fff9
	st	AL,@H'fff8
	add	AL,#-H'0003
	cmp	AL,#(H'0001+H'005D)
	bcc	?L377
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE378,X)
	brxl
	.SEG	CONST
?JTBASE378:
	.CODE
?L378:
	.SEG	CONST
	dc	?L310-?L378
	dc	?L311-?L378
	dc	?L312-?L378
	dc	?L313-?L378
	dc	?L315-?L378
	dc	?L316-?L378
	dc	?L328-?L378
	dc	?L329-?L378
	dc	?L317-?L378
	dc	?L318-?L378
	dc	?L335-?L378
	dc	?L286-?L378
	dc	?L287-?L378
	dc	?L288-?L378
	dc	?L289-?L378
	dc	?L305-?L378
	dc	?L285-?L378
	dc	?L284-?L378
	dc	?L290-?L378
	dc	?L292-?L378
	dc	?L291-?L378
	dc	?L293-?L378
	dc	?L294-?L378
	dc	?L295-?L378
	dc	?L302-?L378
	dc	?L296-?L378
	dc	?L297-?L378
	dc	?L298-?L378
	dc	?L299-?L378
	dc	?L300-?L378
	dc	?L377-?L378
	dc	?L303-?L378
	dc	?L304-?L378
	dc	?L301-?L378
	dc	?L319-?L378
	dc	?L322-?L378
	dc	?L320-?L378
	dc	?L321-?L378
	dc	?L309-?L378
	dc	?L323-?L378
	dc	?L324-?L378
	dc	?L325-?L378
	dc	?L326-?L378
	dc	?L314-?L378
	dc	?L327-?L378
	dc	?L337-?L378
	dc	?L330-?L378
	dc	?L331-?L378
	dc	?L332-?L378
	dc	?L333-?L378
	dc	?L307-?L378
	dc	?L334-?L378
	dc	?L308-?L378
	dc	?L336-?L378
	dc	?L338-?L378
	dc	?L339-?L378
	dc	?L340-?L378
	dc	?L341-?L378
	dc	?L342-?L378
	dc	?L343-?L378
	dc	?L344-?L378
	dc	?L345-?L378
	dc	?L346-?L378
	dc	?L347-?L378
	dc	?L348-?L378
	dc	?L349-?L378
	dc	?L350-?L378
	dc	?L351-?L378
	dc	?L352-?L378
	dc	?L353-?L378
	dc	?L376-?L378
	dc	?L354-?L378
	dc	?L355-?L378
	dc	?L356-?L378
	dc	?L357-?L378
	dc	?L359-?L378
	dc	?L360-?L378
	dc	?L358-?L378
	dc	?L361-?L378
	dc	?L362-?L378
	dc	?L363-?L378
	dc	?L364-?L378
	dc	?L365-?L378
	dc	?L366-?L378
	dc	?L367-?L378
	dc	?L368-?L378
	dc	?L369-?L378
	dc	?L370-?L378
	dc	?L371-?L378
	dc	?L372-?L378
	dc	?L373-?L378
	dc	?L306-?L378
	dc	?L374-?L378
	dc	?L375-?L378
	.CODE
?L284:
	add	AH,#H'0007
	ld	AL,#H'0012
	add	AL,@H'fff9
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	bsr	$_handleSecModeConfigReq
	bra	(?L282)
?L285:
	add	AH,#H'0007
	ld	AL,#H'0012
	add	AL,@H'fff9
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	bsr	$_handleSetSspSecurityLevelReq
	bra	(?L282)
?L286:
	add	AH,#H'0012
	ld	AL,#H'0007
	add	AL,@H'fff9
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	bsr	$_connectionHandleReadLocalOobDataReq
	bra	(?L282)
?L287:
	add	AH,#H'0007
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleAuthenticationReq
	bra	(?L282)
?L288:
	add	AH,#H'0012
	ld	AL,#H'0007
	add	AL,@H'fff9
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	bsr	$_connectionHandleCancelAuthenticationReq
	bra	(?L282)
?L289:
	add	AH,#H'0007
	bsr	$_connectionHandleAuthenticationTimeout
	bra	(?L282)
?L290:
	ld	AH,@(H'0004,Y)
	bsr	$_handleRegisterReq
	bra	(?L282)
?L291:
	ld	AH,@(H'0004,Y)
	bsr	$_handleUnRegisterReq
	bra	(?L282)
?L292:
	ld	AH,@(H'0004,Y)
	bsr	$_handleRegisterOutgoingReq
	bra	(?L282)
?L293:
	ld	AH,@(H'0004,Y)
	bsr	$_handleUnRegisterOutgoingReq
	bra	(?L282)
?L294:
	add	AH,#H'0007
	ld	AL,@(H'0004,Y)
	bsr	$_handleEncryptReq
	bra	(?L282)
?L295:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_handleEncryptionKeyRefreshReq
	bra	(?L282)
?L296:
	ld	AH,@(H'0004,Y)
	bsr	$_handlePinRequestRes
	bra	(?L282)
?L297:
	add	AH,#H'0007
	ld	AL,@(H'0004,Y)
	bsr	$_handleIoCapabilityRequestRes
	bra	(?L282)
?L298:
	ld	AH,@(H'0004,Y)
	bsr	$_handleUserConfirmationRequestRes
	bra	(?L282)
?L299:
	ld	AH,@(H'0004,Y)
	bsr	$_handleUserPasskeyRequestRes
	bra	(?L282)
?L300:
	ld	AH,@(H'0004,Y)
	bsr	$_handleSendKeypressNotificationReq
	bra	(?L282)
?L301:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_handleSetTrustLevelReq
	bra	(?L282)
?L302:
	ld	AH,@(H'0004,Y)
	bsr	$_handleAuthoriseRes
	bra	(?L282)
?L303:
	add	AH,#H'0012
	ld	AL,#H'0007
	add	AL,@H'fff9
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	bsr	$_handleAddAuthDeviceReq
	bra	(?L282)
?L304:
	add	AH,#H'0007
	ld	AL,@(H'0004,Y)
	bsr	$_handleGetAuthDeviceReq
	bra	(?L282)
?L305:
	add	AH,#H'0007
	ld	AL,@(H'0004,Y)
	bsr	$_handleSetSecurityModeReq
	bra	(?L282)
?L306:
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	and	AL,#H'00FF
	or	AL,#H'0300
	st	AL,@(H'0002,X)
	add	AH,#H'0012
	bsr	$_connectionHandleEnterDutModeReq
	bra	(?L282)
?L307:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSetBtVersionReq
	bra	(?L282)
?L308:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadLocalVersionRequest
	bra	(?L282)
?L309:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleWriteScanEnableRequest
	bra	(?L282)
?L310:
	add	AH,#H'0004
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleInquiryStart
	bra	(?L282)
?L311:
	add	AH,#H'0004
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleInquiryCancel
	bra	(?L282)
?L312:
	add	AH,#H'0004
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadRemoteName
	bra	(?L282)
?L313:
	add	AH,#H'0004
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadLocalName
	bra	(?L282)
?L314:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleChangeLocalName
	bra	(?L282)
?L315:
	add	AH,#H'0012
	ld	AL,#H'0004
	add	AL,@H'fff9
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	bsr	$_connectionHandleWriteInquiryTx
	bra	(?L282)
?L316:
	add	AH,#H'0012
	ld	AL,#H'0004
	add	AL,@H'fff9
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	bsr	$_connectionHandleReadInquiryTx
	bra	(?L282)
?L317:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleWriteEirDataRequest
	bra	(?L282)
?L318:
	add	AH,#H'0012
	ld	AL,#H'0004
	add	AL,@H'fff9
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	bsr	$_connectionHandleReadEirDataRequest
	bra	(?L282)
?L319:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadClassOfDeviceRequest
	bra	(?L282)
?L320:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleWritePageScanActivityRequset
	bra	(?L282)
?L321:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleWriteInquiryScanActivityRequest
	bra	(?L282)
?L322:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleWriteCodRequset
	bra	(?L282)
?L323:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleWriteCachedPageModeRequest
	bra	(?L282)
?L324:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleWriteCachedClkOffsetRequest
	bra	(?L282)
?L325:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleClearParamCacheRequest
	bra	(?L282)
?L326:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleWriteFlushTimeoutRequest
	bra	(?L282)
?L327:
	add	AH,#H'0004
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleWriteIacLapRequest
	bra	(?L282)
?L328:
	add	AH,#H'0004
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleWriteInquiryModeRequest
	bra	(?L282)
?L329:
	add	AH,#H'0004
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadInquiryModeRequest
	bra	(?L282)
?L330:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadAddrRequest
	bra	(?L282)
?L331:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadLinkQualityRequest
	bra	(?L282)
?L332:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadRssiRequest
	bra	(?L282)
?L333:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadclkOffsetRequest
	bra	(?L282)
?L334:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadRemoteSupportedFeaturesRequest
	bra	(?L282)
?L335:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleDmEnAclDetachReq
	bra	(?L282)
?L336:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleReadRemoteVersionRequest
	bra	(?L282)
?L337:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleSmChangeLinkKeyReq
	bra	(?L282)
?L338:
	add	AH,#H'0015
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSdpRegisterRequest
	bra	(?L282)
?L339:
	add	AH,#H'0015
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSdpUnregisterRequest
	bra	(?L282)
?L340:
	add	AH,#H'0015
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSdpServerConfigMtu
	bra	(?L282)
?L341:
	add	AH,#H'0015
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSdpClientConfigMtu
	bra	(?L282)
?L342:
	add	AH,#H'0015
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSdpOpenSearchRequest
	bra	(?L282)
?L343:
	add	AH,#H'0015
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSdpCloseSearchRequest
	bra	(?L282)
?L344:
	add	AH,#H'0015
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSdpServiceSearchRequest
	bra	(?L282)
?L345:
	add	AH,#H'0015
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSdpAttributeSearchRequest
	bra	(?L282)
?L346:
	add	AH,#H'0015
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSdpServiceSearchAttrRequest
	bra	(?L282)
?L347:
	add	AH,#H'0015
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSdpTerminatePrimitiveRequest
	bra	(?L282)
?L348:
	add	AH,#H'001D
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleL2capRegisterReq
	bra	(?L282)
?L349:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleL2capUnregisterReq
	bra	(?L282)
?L350:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleL2capConnectReq
	bra	(?L282)
?L351:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleL2capConnectRes
	bra	(?L282)
?L352:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleL2capDisconnectReq
	bra	(?L282)
?L353:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleL2capConnectTimeout
	bra	(?L282)
?L354:
	add	AH,#H'001B
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleRfcommRegisterReq
	bra	(?L282)
?L355:
	add	AH,#H'001B
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleRfcommConnectReq
	bra	(?L282)
?L356:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleRfcommConnectRes
	bra	(?L282)
?L357:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleRfcommDisconnectReq
	bra	(?L282)
?L358:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleRfcommControlReq
	bra	(?L282)
?L359:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleRfcommRegisterTimeout
	bra	(?L282)
?L360:
	add	AH,#H'001B
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleRfcommConnectTimeout
	bra	(?L282)
?L361:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleSyncRegisterReq
	bra	(?L282)
?L362:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleSyncUnregisterReq
	bra	(?L282)
?L363:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleSyncConnectReq
	bra	(?L282)
?L364:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleSyncConnectRes
	bra	(?L282)
?L365:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleSyncDisconnectReq
	bra	(?L282)
?L366:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleSyncRenegotiateReq
	bra	(?L282)
?L367:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleSyncRegisterTimeoutInd
	bra	(?L282)
?L368:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleSyncUnregisterTimeoutInd
	bra	(?L282)
?L369:
	add	AH,#H'001E
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleLinkPolicySetRoleReq
	bra	(?L282)
?L370:
	add	AH,#H'001E
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleLinkPolicyGetRoleReq
	bra	(?L282)
?L371:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleSetLinkSupervisionTimeoutReq
	bra	(?L282)
?L372:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleSetLinkPolicyReq
	bra	(?L282)
?L373:
	add	AH,#H'0012
	ld	AL,@(H'0004,Y)
	bsr	$_connectionHandleSetSniffSubRatePolicyReq
	bra	(?L282)
?L374:
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0004,Y)
	bsr	$_connectionSmHandleGetAttributeReq
	bra	(?L282)
?L375:
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0004,Y)
	bsr	$_connectionSmHandleGetIndexedAttributeReq
	bra	(?L282)
?L376:
	ld	AH,@(H'0004,Y)
	bsr	$_connectionHandleL2capInterlockDisconnectRsp
	bra	(?L282)
?L377:
	ld	AL,#H'0005
	st	AL,@(0,Y)
	ld	X,@H'fff9
	ld	AH,@(H'0002,X)
	lsr	#H'0008
	st	AH,@(H'0001,Y)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(H'0002,Y)
	ld	AL,@H'ffff
	ld	AH,#(?LC1)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L282:
?LBE_connectionBluestackHandlerReady:
	leave	#4
$_connectionBluestackHandler:
	enter	#4
?LBB_connectionBluestackHandler:
	st	AL,@H'fff9
?LBB4:
	st	AH,@H'fff8
	ld	X,@$XAP_AH
	ld	AH,@(H'0002,X)
	lsr	#H'0008
	ld	AL,@H'fff9
	cmp	AL,#-H'7FFA
	beq	?L382
	cmp	AL,#(H'0001-H'7FFA)
	bcc	?L397
	cmp	AL,#-H'7FFC
	beq	?L381
	cmp	AL,#(H'0001-H'7FFC)
	bcc	?L383
	cmp	AL,#H'702C
	beq	?L379
	bra	(?L388)
?L397:
	cmp	AL,#-H'7FF9
	beq	?L384
	ld	AL,#H'7FF2
	add	AL,@H'fff9
	cmp	AL,#(H'0001+H'0001)
	bcc	?L388
	bra	(?L386)
?L381:
	ld	AH,@H'fff8
	ld	AL,@(H'0004,Y)
	bsr	_connectionBluestackHandlerDm
	bra	(?L379)
?L382:
	ld	AH,@H'fff8
	ld	AL,@(H'0004,Y)
	bsr	_connectionBluestackHandlerRfcomm
	bra	(?L379)
?L383:
	ld	AH,@H'fff8
	ld	AL,@(H'0004,Y)
	bsr	_connectionBluestackHandlerL2cap
	bra	(?L379)
?L384:
	ld	AH,@H'fff8
	ld	AL,@(H'0004,Y)
	bsr	_connectionBluestackHandlerSdp
	bra	(?L379)
?L386:
	ld	AL,#H'0005
	st	AL,@(0,Y)
	ld	X,@H'fff8
	ld	AH,@(H'0002,X)
	lsr	#H'0008
	st	AH,@(H'0001,Y)
	st	AL,@H'ffff
	ld	AL,@H'fff9
	st	AL,@(H'0002,Y)
	ld	AL,@H'ffff
	ld	AH,#(?LC1)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	bra	(?L379)
?L388:
	cmp	AH,#H'0001
	beq	?L392
	cmp	AH,#H'0001
	bcs	?L391
	cmp	AH,#H'0002
	beq	?L390
	cmp	AH,#H'0003
	beq	?L393
	bra	(?L379)
?L390:
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	_connectionBluestackHandlerReady
	bra	(?L379)
?L391:
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	_connectionBluestackHandlerUninitialised
	bra	(?L379)
?L392:
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	_connectionBluestackHandlerInitialising
	bra	(?L379)
?L393:
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	_connectionBluestackHandlerTestMode
?L379:
?LBE4:
?LBE_connectionBluestackHandler:
	leave	#4
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
	ENDMOD

;# Function pattern *movqi2 used[0] = 78 used[1] = 225 used[3] = 15 total = 318
;# Function pattern *movqi3 used[0] = 109 total = 109
;# Function pattern *addqi2 used[0] = 81 used[2] = 51 total = 132
;# Function pattern *andqi3 used[0] = 6 total = 6
;# Function pattern *iorqi3 used[0] = 1 total = 1
;# Function pattern *lshrqi3 used[0] = 10 total = 10
;# Function pattern jump used[0] = 235 total = 235
;# Function pattern *call1 used[0] = 216 total = 216
;# Function pattern *call_value1 used[0] = 11 total = 11
;# Function pattern tablejump_1 used[0] = 9 total = 9
;# Function pattern movstrqi+2 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 1 used[1] = 1 total = 2
;# Function pattern movstrqi+4 used[1] = 34 total = 34
;# Function pattern movstrqi+5 used[0] = 74 total = 74
	MODULE	dm_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_setDefaultLinkPolicy:
	enter	#3
?LBB_setDefaultLinkPolicy:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB2:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'2804
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0002,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE2:
?LBE_setDefaultLinkPolicy:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
$_connectionVersionInit:
	enter	#1
?LBB_connectionVersionInit:
	bsr	$_connectionGetCmTask
	bsr	$_ConnectionReadLocalVersion
?LBE_connectionVersionInit:
	leave	#1
$_connectionDmInit:
	enter	#1
?LBB_connectionDmInit:
?LBB3:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	AH,#H'0001
	ld	AL,#H'0001
;	bsr	$_StreamConfigure
	DC	((256*70)+9)
?LBE3:
?LBE_connectionDmInit:
	leave	#1
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
$_connectionDmInfoInit:
	enter	#1
?LBB_connectionDmInfoInit:
?LBB4:
	ld	AH,#H'0005
	ld	AL,#H'0005
	bsr	_setDefaultLinkPolicy
?LBB5:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'3000
	st	AL,@(0,X)
	ld	AL,#H'0005
	st	AL,@(H'0002,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE5:
?LBE4:
?LBE_connectionDmInfoInit:
	leave	#1
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
	ENDMOD

;# Function pattern *movqi2 used[0] = 13 total = 13
;# Function pattern *movqi3 used[0] = 14 total = 14
;# Function pattern *call1 used[0] = 6 total = 6
;# Function pattern *call_value1 used[0] = 4 total = 4
	MODULE	dm_security_auth
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_register_device:
	enter	#5
?LBB_register_device:
	st	AL,@(H'0001,Y)
?LBB2:
	cmp	AH,#H'0000
	beq	?L2
?LBB3:
	ld	AH,#H'0019
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'2E08
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(H'0001,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,#H'0001
	ld	X,@(H'0002,Y)
	st	AH,@(H'0005,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0014,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0006,X)
	st	AH,@(H'0007,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0008
	ld	AL,@(H'0001,Y)
	add	AL,#H'0004
	ld	X,#H'0010
	st	X,@(0,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0015,X)
	bsr	$_connectionConvertLinkKeyType_t
	ld	X,@(H'0002,Y)
	st	AH,@(H'0018,X)
	ld	AH,@$XAP_UXL
	bra	(?L4)
?L2:
?LBE3:
?LBB4:
	ld	AH,#H'0018
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,#H'2C08
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(H'0001,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,#H'0001
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0014,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0006,X)
	st	AH,@(H'0007,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0008
	ld	AL,@(H'0001,Y)
	add	AL,#H'0004
	ld	X,#H'0010
	st	X,@(0,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AH,@(H'0003,Y)
?L4:
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE4:
?LBE2:
?LBE_register_device:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
_unregister_device:
	enter	#3
?LBB_unregister_device:
	st	AH,@(0,Y)
?LBB5:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C09
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE5:
?LBE_unregister_device:
	leave	#3
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
_find_trusted_device:
	enter	#26
?LBB_find_trusted_device:
	st	AH,@(H'0017,Y)
?LBB6:
	ld	AL,#H'0000
	st	AL,@(H'0018,Y)
?L13:
	ld	AH,@(H'0018,Y)
	add	AH,#H'002A
	ld	AL,#H'0016
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L9
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	AL,@(H'0017,Y)
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L9
	ld	AH,@(H'0018,Y)
	add	AH,#H'0001
	bra	(?L6)
?L9:
	ld	AL,@(H'0018,Y)
	add	AL,#H'0001
	st	AL,@(H'0018,Y)
	cmp	AL,#H'0007
	bcz	?L13
	ld	AH,#H'0000
?L6:
?LBE6:
?LBE_find_trusted_device:
	leave	#26
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
_find_free_position:
	enter	#35
?LBB_find_free_position:
?LBB7:
	ld	AH,#H'0000
	st	AH,@(H'001F,Y)
?L23:
	ld	AH,@(H'001F,Y)
	add	AH,#H'002A
	ld	AL,#H'0016
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0009
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	bne	?L20
	ld	AH,@(H'001F,Y)
	add	AH,#H'0001
	bra	(?L17)
?L20:
	ld	AL,@(H'001F,Y)
	add	AL,#H'0001
	st	AL,@(H'001F,Y)
	cmp	AL,#H'0007
	bcz	?L23
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	ld	AH,#H'0008
	st	AH,@(H'0020,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
?L24:
	ld	AH,@(H'0020,Y)
	add	AH,#-H'0001
	st	AH,@(H'0020,Y)
	ld	X,@$XAP_AH
	add	X,@$XAP_AL
	tst	@(0,X)
	bne	?L25
	cmp	AH,#H'0000
	bne	?L24
?L25:
	ld	X,@$XAP_UY
	add	X,@(H'0020,Y)
	ld	X,@(H'0001,X)
	st	X,@(H'0021,Y)
	ld	AH,@$XAP_UXL
	add	AH,#H'0029
	ld	AL,#H'0016
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0009
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L29
	ld	AH,@$XAP_UY
	add	AH,#H'0009
	bsr	_unregister_device
?L29:
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	ld	X,@(H'0020,Y)
	add	X,@$XAP_AL
	ld	AH,#H'0000
	st	AH,@(0,X)
	ld	AH,#H'0008
	st	AH,@(0,Y)
	ld	AH,#H'0029
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AH,@(H'0021,Y)
?L17:
?LBE7:
?LBE_find_free_position:
	leave	#35
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
_search_trusted_device_index:
	enter	#12
?LBB_search_trusted_device_index:
	st	AH,@(H'0009,Y)
?LBB8:
	ld	AL,#H'0063
	st	AL,@(H'000A,Y)
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L34
	ld	AL,#H'0000
	st	AL,@(H'000A,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
?L40:
	ld	X,@(H'000A,Y)
	add	X,@$XAP_AH
	ld	AL,@(0,X)
	cmp	AL,@(H'0009,Y)
	beq	?L34
	ld	AL,@(H'000A,Y)
	add	AL,#H'0001
	st	AL,@(H'000A,Y)
	cmp	AL,#H'0007
	bcz	?L40
?L34:
?LBE8:
	ld	AH,@(H'000A,Y)
?LBE_search_trusted_device_index:
	leave	#12
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
_update_trusted_device_index:
	enter	#12
?LBB_update_trusted_device_index:
	st	AH,@(H'0009,Y)
	st	AL,@(H'000A,Y)
?LBB9:
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L44
	ld	AL,@(H'000A,Y)
	cmp	AL,#H'0063
	beq	?L46
	ld	X,#H'0000
	st	X,@H'fff8
	cmp	X,@$XAP_AL
	bcc	?L46
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	st	AL,@H'fff9
?L51:
	ld	AL,@(H'000A,Y)
	sub	AL,@H'fff8
	ld	AH,@H'fff9
	add	AH,@$XAP_AL
	ld	X,@$XAP_UY
	add	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0001
	add	AL,@H'fff8
	st	AL,@H'fff8
	cmp	AL,@(H'000A,Y)
	bcs	?L51
?L46:
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsStore
	DC	((256*17)+9)
?L44:
?LBE9:
?LBE_update_trusted_device_index:
	leave	#12
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
_update_trusted_device_list:
	enter	#27
?LBB_update_trusted_device_list:
	st	AH,@(H'0017,Y)
	ld	X,@(H'001B,Y)
?LBB10:
	ld	AH,#H'0000
	st	AH,@(H'0018,Y)
	ld	AH,#H'0001
	st	AH,@(H'0019,Y)
	cmp	AL,#H'0000
	beq	?L57
	add	AL,#-H'0001
	st	AL,@(H'0018,Y)
?L57:
	ld	AL,@(0,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'001C,Y)
	st	AL,@(H'0016,Y)
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0005
	ld	AL,@(H'001D,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AH,@(H'001E,Y)
	st	AH,@(H'0015,Y)
	tst	@(H'001F,Y)
	beq	?L58
	ld	AH,@(H'0018,Y)
	add	AH,#H'002A
	ld	AL,#H'0016
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsStore
	DC	((256*17)+9)
	cmp	AH,#H'0000
	bne	?L58
	ld	AL,#H'0000
	st	AL,@(H'0019,Y)
	bra	(?L61)
?L58:
	ld	AH,@(H'0017,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	bsr	_register_device
?L61:
?LBE10:
	ld	AH,@(H'0019,Y)
?LBE_update_trusted_device_list:
	leave	#27
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
_delete_from_trusted_device_index:
	enter	#14
?LBB_delete_from_trusted_device_index:
	st	AH,@(H'0009,Y)
	st	AL,@(H'000A,Y)
?LBB11:
	ld	AL,#H'0000
	st	AL,@(H'000B,Y)
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L63
	ld	AL,@(H'0009,Y)
	cmp	AL,#H'0063
	beq	?L64
	ld	AH,@$XAP_AL
	ld	AL,@(H'000A,Y)
	add	AL,#-H'0001
	cmp	AH,@$XAP_AL
	bcc	?L71
	ld	X,@$XAP_UY
	add	X,#H'0001
	st	X,@H'fff9
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	st	AL,@(-1,Y)
	ld	X,@(H'000A,Y)
	add	X,#-H'0001
	st	X,@H'fff8
?L69:
	ld	AL,@H'fff9
	add	AL,@$XAP_AH
	st	AL,@(H'000C,Y)
	ld	AL,@$XAP_AH
	add	AL,@(-1,Y)
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@(H'000C,Y)
	st	AL,@(0,X)
	add	AH,#H'0001
	cmp	AH,@H'fff8
	bcs	?L69
?L71:
	ld	X,@$XAP_UY
	add	X,@(H'000A,Y)
	ld	AL,#H'0000
	st	AL,@(0,X)
?L64:
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AL,#H'0001
	st	AL,@(H'000B,Y)
?L63:
?LBE11:
	ld	AH,@(H'000B,Y)
?LBE_delete_from_trusted_device_index:
	leave	#14
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
$_connectionAuthInit:
	enter	#35
?LBB_connectionAuthInit:
	st	AH,@(H'001F,Y)
?LBB12:
	ld	AL,#H'0000
	st	AL,@(H'0020,Y)
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	bne	?L76
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	AL,#H'0000
	bsr	$_memset
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AL,#H'002A
	st	AL,@(H'0021,Y)
?L81:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'0021,Y)
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AL,@(H'0021,Y)
	add	AL,#H'0001
	st	AL,@(H'0021,Y)
	cmp	AL,#H'0031
	bcz	?L81
	bra	(?L82)
?L76:
	ld	AL,#H'0000
	st	AL,@(H'0021,Y)
?L88:
	ld	AH,@(H'0021,Y)
	add	AH,#H'002A
	ld	AL,#H'0016
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0009
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L85
	ld	AH,@(H'001F,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0009
	bsr	_register_device
	ld	AL,@(H'0020,Y)
	add	AL,#H'0001
	st	AL,@(H'0020,Y)
?L85:
	ld	AL,@(H'0021,Y)
	add	AL,#H'0001
	st	AL,@(H'0021,Y)
	cmp	AL,#H'0007
	bcz	?L88
?L82:
?LBE12:
	ld	AH,@(H'0020,Y)
?LBE_connectionAuthInit:
	leave	#35
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
$_connectionAuthAddDevice:
	enter	#10
?LBB_connectionAuthAddDevice:
	st	AH,@(H'0005,Y)
	st	AL,@(H'0006,Y)
?LBB13:
	ld	AL,#H'0000
	st	AL,@(H'0008,Y)
	ld	AH,@(H'0006,Y)
	bsr	_find_trusted_device
	st	AH,@(H'0007,Y)
	cmp	AH,#H'0000
	beq	?L95
	bsr	_search_trusted_device_index
	st	AH,@(H'0008,Y)
	bra	(?L96)
?L95:
	tst	@(H'000D,Y)
	beq	?L96
	ld	AL,#H'0007
	st	AL,@(H'0008,Y)
	bsr	_find_free_position
	st	AH,@(H'0007,Y)
	cmp	AH,#H'0000
	bne	?L96
	ld	AL,#H'0001
	st	AL,@(H'0007,Y)
?L96:
	tst	@(H'000D,Y)
	beq	?L99
	ld	AH,@(H'0007,Y)
	ld	AL,@(H'0008,Y)
	bsr	_update_trusted_device_index
	bra	(?L100)
?L99:
	tst	@(H'0007,Y)
	beq	?L100
	ld	AH,@(H'0008,Y)
	ld	AL,#H'0008
	bsr	_delete_from_trusted_device_index
	ld	AH,@(H'0007,Y)
	add	AH,#H'0029
	ld	AL,#H'0000
	st	AL,@(0,Y)
;	bsr	$_PsStore
	DC	((256*17)+9)
?L100:
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'000C,Y)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'000D,Y)
	st	AL,@(H'0004,Y)
	ld	AH,@(H'0005,Y)
	ld	AL,@(H'0007,Y)
	bsr	_update_trusted_device_list
?LBE13:
?LBE_connectionAuthAddDevice:
	leave	#10
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
$_connectionAuthGetDevice:
	enter	#26
?LBB_connectionAuthGetDevice:
	st	AL,@(H'0017,Y)
?LBB14:
	ld	AL,#H'0000
	st	AL,@(H'0018,Y)
	bsr	_find_trusted_device
	cmp	AH,#H'0000
	beq	?L103
	add	AH,#H'0029
	ld	AL,#H'0016
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	ld	X,#H'0001
	st	X,@(H'0018,Y)
	ld	AL,@(H'0015,Y)
	ld	X,@(H'001B,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0016,Y)
	ld	X,@(H'0017,Y)
	st	AL,@(0,X)
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AH,@(H'001A,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0005
;	bsr	$_memmove
	DC	((256*6)+9)
?L103:
?LBE14:
	ld	AH,@(H'0018,Y)
?LBE_connectionAuthGetDevice:
	leave	#26
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
$_connectionAuthDeleteDevice:
	enter	#5
?LBB_connectionAuthDeleteDevice:
	st	AH,@(H'0001,Y)
?LBB15:
	ld	AL,#H'0000
	st	AL,@(H'0003,Y)
	bsr	_find_trusted_device
	st	AH,@(H'0002,Y)
	cmp	AH,#H'0000
	beq	?L105
	bsr	_search_trusted_device_index
	ld	AL,#H'0008
	bsr	_delete_from_trusted_device_index
	ld	AH,@(H'0002,Y)
	add	AH,#H'0029
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0000
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AH,@(H'0001,Y)
	bsr	_unregister_device
	ld	AL,#H'0001
	st	AL,@(H'0003,Y)
?L105:
?LBE15:
	ld	AH,@(H'0003,Y)
?LBE_connectionAuthDeleteDevice:
	leave	#5
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
$_connectionAuthDeleteAllDevice:
	enter	#36
?LBB_connectionAuthDeleteAllDevice:
	st	AH,@(H'001F,Y)
?LBB16:
	ld	AL,#H'0000
	st	AL,@(H'0020,Y)
	st	AL,@(H'0021,Y)
?L113:
	ld	AL,@(H'0021,Y)
	add	AL,#H'002A
	st	AL,@(H'0022,Y)
	ld	AL,#H'0016
	st	AL,@(0,Y)
	ld	AH,@(H'0022,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L111
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	_unregister_device
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'0022,Y)
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AL,#H'0001
	st	AL,@(H'0020,Y)
?L111:
	tst	@(H'001F,Y)
	beq	?L109
	ld	AH,@(H'001F,Y)
	add	AH,@(H'0021,Y)
	ld	AL,#H'0000
	st	AL,@(0,Y)
;	bsr	$_PsStore
	DC	((256*17)+9)
?L109:
	ld	AL,@(H'0021,Y)
	add	AL,#H'0001
	st	AL,@(H'0021,Y)
	cmp	AL,#H'0007
	bcz	?L113
	tst	@(H'0020,Y)
	beq	?L114
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0017
	ld	AL,#H'0000
	bsr	$_memset
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0017
;	bsr	$_PsStore
	DC	((256*17)+9)
?L114:
?LBE16:
	ld	AH,@(H'0020,Y)
?LBE_connectionAuthDeleteAllDevice:
	leave	#36
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
$_connectionAuthSetTrustLevel:
	enter	#26
?LBB_connectionAuthSetTrustLevel:
	st	AH,@(H'0017,Y)
?LBB17:
	ld	AH,@$XAP_AL
	bsr	_find_trusted_device
	cmp	AH,#H'0000
	beq	?L119
	add	AH,#H'0029
	st	AH,@(H'0018,Y)
	ld	AH,#H'0016
	st	AH,@(0,Y)
	ld	AH,@(H'0018,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	ld	AL,@(H'001A,Y)
	st	AL,@(H'0015,Y)
	ld	AH,#H'0016
	st	AH,@(0,Y)
	ld	AH,@(H'0018,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AH,@(H'0017,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	bsr	_register_device
	ld	AH,#H'0001
	bra	(?L118)
?L119:
	ld	AH,#H'0000
?L118:
?LBE17:
?LBE_connectionAuthSetTrustLevel:
	leave	#26
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
$_connectionAuthUpdateMru:
	enter	#3
?LBB_connectionAuthUpdateMru:
?LBB18:
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	bsr	_find_trusted_device
	st	AH,@(0,Y)
	cmp	AH,#H'0000
	beq	?L121
	ld	AL,#H'0001
	st	AL,@(H'0001,Y)
	bsr	_search_trusted_device_index
	ld	AL,@$XAP_AH
	ld	AH,@(0,Y)
	bsr	_update_trusted_device_index
?L121:
?LBE18:
	ld	AH,@(H'0001,Y)
?LBE_connectionAuthUpdateMru:
	leave	#3
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
$_connectionAuthSendLinkKey:
	enter	#26
?LBB_connectionAuthSendLinkKey:
	st	AH,@(H'0017,Y)
?LBB19:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0018,Y)
	ld	AL,#H'2C0A
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(H'0017,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0017,Y)
	bsr	_find_trusted_device
	cmp	AH,#H'0000
	beq	?L123
	add	AH,#H'0029
	ld	AL,#H'0016
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	ld	AL,#H'0001
	ld	X,@(H'0018,Y)
	st	AL,@(H'0015,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0005
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0005
;	bsr	$_memmove
	DC	((256*6)+9)
	bra	(?L124)
?L123:
	ld	AL,#H'0000
	ld	X,@(H'0018,Y)
	st	AL,@(H'0015,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0005
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AL,#H'0000
	bsr	$_memset
?L124:
	ld	AH,@(H'0018,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE19:
?LBE_connectionAuthSendLinkKey:
	leave	#26
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
$_connectionAuthSendSspLinkKey:
	enter	#29
?LBB_connectionAuthSendSspLinkKey:
	st	AH,@(H'0017,Y)
	st	AL,@(H'0018,Y)
?LBB20:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'001B,Y)
	ld	AL,#H'2C00
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(H'0017,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0017,Y)
	bsr	_find_trusted_device
	cmp	AH,#H'0000
	beq	?L126
	add	AH,#H'0029
	ld	AL,#H'0016
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	tst	@(H'0016,Y)
	bne	?L127
	ld	AL,#H'0001
	st	AL,@(H'0016,Y)
?L127:
	tst	@(H'0018,Y)
	beq	?L128
	ld	AL,@(H'0016,Y)
	cmp	AL,#H'0004
	bne	?L126
	ld	AH,#H'0004
	bra	(?L134)
?L128:
	ld	AH,@(H'0016,Y)
?L134:
	bsr	$_connectionConvertLinkKeyType_t
	ld	X,@(H'001B,Y)
	st	AH,@(H'0005,X)
	ld	AH,#H'0010
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'001A,Y)
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0005
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AH,@(H'001A,Y)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'001B,Y)
	st	AH,@(H'0006,X)
	ld	AL,#H'0001
	bra	(?L133)
?L126:
	ld	AH,#H'0000
	bsr	$_connectionConvertLinkKeyType_t
	ld	X,@(H'001B,Y)
	st	AH,@(H'0005,X)
	ld	AL,#H'0000
	st	AL,@(H'0006,X)
?L133:
	st	AL,@(H'0019,Y)
	ld	AH,@(H'001B,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE20:
	ld	AH,@(H'0019,Y)
?LBE_connectionAuthSendSspLinkKey:
	leave	#29
;.stabn	192,0,0,?LBB20
;.stabn	224,0,0,?LBE20
$_connectionAuthPutAttribute:
	enter	#3
?LBB_connectionAuthPutAttribute:
	st	AH,@(H'0001,Y)
?LBB21:
	ld	AH,@$XAP_AL
	bsr	_find_trusted_device
	cmp	AH,#H'0000
	beq	?L136
	add	AH,#-H'0001
	ld	AL,@(H'0001,Y)
	add	AH,@$XAP_AL
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
;	bsr	$_PsStore
	DC	((256*17)+9)
?L136:
?LBE21:
?LBE_connectionAuthPutAttribute:
	leave	#3
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
$_connectionAuthGetAttribute:
	enter	#6
?LBB_connectionAuthGetAttribute:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB22:
	ld	AH,@(H'0006,Y)
	bsr	_find_trusted_device
	st	AH,@(H'0003,Y)
	tst	@(H'0001,Y)
	beq	?L138
	ld	AH,@(H'0007,Y)
?LBB23:
	add	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0005,X)
	ld	AL,#H'0000
	st	AL,@(H'0006,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0004,X)
	tst	@(H'0003,Y)
	beq	?L140
	ld	AL,@(H'0003,Y)
	add	AL,#-H'0001
	st	AL,@(H'0003,Y)
	tst	@(H'0007,Y)
	beq	?L140
	ld	AH,@(H'0002,Y)
	add	AH,@$XAP_AL
	ld	X,@(H'0004,Y)
	add	X,#H'0006
	ld	AL,@(H'0007,Y)
	st	AL,@(0,Y)
	ld	AL,@$XAP_UXL
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L140
	ld	AL,#H'0000
	ld	X,@(H'0004,Y)
	st	AL,@(0,X)
?L140:
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7041
	bsr	$_MessageSend
?L138:
?LBE23:
?LBE22:
?LBE_connectionAuthGetAttribute:
	leave	#6
;.stabn	192,0,0,?LBB22
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
;.stabn	224,0,0,?LBE22
$_connectionAuthGetAttributeNow:
	enter	#4
?LBB_connectionAuthGetAttributeNow:
	st	AH,@(H'0001,Y)
?LBB24:
	ld	AH,@$XAP_AL
	bsr	_find_trusted_device
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	cmp	AH,#H'0000
	beq	?L144
	add	AH,#-H'0001
	tst	@(H'0004,Y)
	beq	?L144
	ld	AL,@(H'0001,Y)
	add	AH,@$XAP_AL
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0005,Y)
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L144
	ld	AH,#H'0001
	st	AH,@(H'0002,Y)
?L144:
?LBE24:
	ld	AH,@(H'0002,Y)
?LBE_connectionAuthGetAttributeNow:
	leave	#4
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
$_connectionAuthGetIndexedAttribute:
	enter	#36
?LBB_connectionAuthGetIndexedAttribute:
	st	AH,@(H'001F,Y)
	st	AL,@(H'0020,Y)
	ld	AH,@(H'0025,Y)
?LBB25:
?LBB26:
	add	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0021,Y)
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0025,Y)
	st	AL,@(H'0005,X)
	ld	AL,#H'0000
	st	AL,@(H'0006,X)
	ld	X,@(H'0024,Y)
	cmp	X,#(H'0001+H'0007)
	bcc	?L148
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L148
	ld	AL,@(H'0024,Y)
	add	AL,@$XAP_UY
	add	AL,#H'0001
	st	AL,@(H'0022,Y)
	ld	X,@$XAP_AL
	tst	@(0,X)
	beq	?L148
	ld	AH,@(0,X)
	add	AH,#H'0029
	ld	AL,#H'0016
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0009
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L148
	ld	AL,@(H'0009,Y)
	ld	X,@(H'0021,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'000C,Y)
	st	AL,@(H'0004,X)
	tst	@(H'0025,Y)
	beq	?L150
	ld	AH,@(H'0020,Y)
	ld	X,@(H'0022,Y)
	add	AH,@(0,X)
	add	AH,#-H'0001
	ld	X,@(H'0021,Y)
	add	X,#H'0006
	ld	AL,@(H'0025,Y)
	st	AL,@(0,Y)
	ld	AL,@$XAP_UXL
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L148
?L150:
	ld	AL,#H'0000
	ld	X,@(H'0021,Y)
	st	AL,@(0,X)
?L148:
	ld	AL,@(H'0021,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'001F,Y)
	ld	AL,#H'7042
	bsr	$_MessageSend
?LBE26:
?LBE25:
?LBE_connectionAuthGetIndexedAttribute:
	leave	#36
;.stabn	192,0,0,?LBB25
;.stabn	192,0,0,?LBB26
;.stabn	224,0,0,?LBE26
;.stabn	224,0,0,?LBE25
$_connectionAuthGetIndexedAttributeNow:
	enter	#36
?LBB_connectionAuthGetIndexedAttributeNow:
	st	AH,@(H'001F,Y)
	st	AL,@(H'0020,Y)
?LBB27:
	ld	AL,#H'0000
	st	AL,@(H'0021,Y)
	ld	AL,@(H'0020,Y)
	cmp	AL,#(H'0001+H'0007)
	bcc	?L154
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L154
	ld	X,@(H'0020,Y)
	add	X,@$XAP_UY
	add	X,#H'0001
	st	X,@(H'0022,Y)
	tst	@(0,X)
	beq	?L154
	ld	AH,@(0,X)
	add	AH,#H'0029
	ld	AL,#H'0016
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0009
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L154
	ld	AL,@(H'0009,Y)
	ld	X,@(H'0026,Y)
	st	AL,@(0,X)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'000C,Y)
	st	AL,@(H'0003,X)
	tst	@(H'0024,Y)
	beq	?L156
	ld	AH,@(H'001F,Y)
	ld	X,@(H'0022,Y)
	add	AH,@(0,X)
	add	AH,#-H'0001
	ld	AL,@(H'0024,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0025,Y)
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L154
	ld	X,#H'0001
	st	X,@(H'0021,Y)
	bra	(?L154)
?L156:
	ld	AL,#H'0001
	st	AL,@(H'0021,Y)
?L154:
?LBE27:
	ld	AH,@(H'0021,Y)
?LBE_connectionAuthGetIndexedAttributeNow:
	leave	#36
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
	ENDMOD

;# Function pattern *movqi2 used[0] = 224 used[1] = 48 total = 272
;# Function pattern *movqi3 used[0] = 227 total = 227
;# Function pattern *movqi8 used[0] = 9 total = 9
;# Function pattern *addqi4 used[0] = 2 total = 2
;# Function pattern *addqi0 used[0] = 42 total = 42
;# Function pattern *addqi2 used[0] = 58 used[2] = 6 total = 64
;# Function pattern *subqi3 used[0] = 1 total = 1
;# Function pattern jump used[0] = 12 total = 12
;# Function pattern *call1 used[0] = 19 total = 19
;# Function pattern *call_value1 used[0] = 74 total = 74
;# Function pattern movstrqi+2 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 32 used[1] = 17 total = 49
;# Function pattern movstrqi+4 used[1] = 2 total = 2
;# Function pattern movstrqi+5 used[0] = 14 total = 14
	MODULE	dm_security_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_connectionSmInit:
	enter	#4
?LBB_connectionSmInit:
	st	AH,@(H'0001,Y)
?LBB2:
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	bsr	$_ConnectionSmSetSecurityMode
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionAuthInit
	st	AH,@(H'0002,Y)
	cmp	AH,#H'0000
	bne	?L2
	ld	AH,#H'0080
	bsr	$_connectionSendInternalInitCfm
?L2:
?LBE2:
	ld	AH,@(H'0002,Y)
?LBE_connectionSmInit:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 4 used[1] = 1 total = 5
;# Function pattern *movqi3 used[0] = 6 total = 6
;# Function pattern *call1 used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	dm_security_mode
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_ConnectionSmSetSecurityMode:
	enter	#5
?LBB_ConnectionSmSetSecurityMode:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	cmp	AL,#H'0004
	bcz	?L2
	st	AL,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L2:
	ld	AL,@(H'0005,Y)
	cmp	AL,#H'0002
	bcz	?L3
	st	AL,@(0,Y)
	ld	AH,#(?LC1)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L3:
?LBB3:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'0012
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionSmSetSecurityMode:
	leave	#5
	.SEG	CONST
?LC0:
	dc	H'4F
	dc	H'75
	dc	H'74
	dc	H'20
	dc	H'6F
	dc	H'66
	dc	H'20
	dc	H'72
	dc	H'61
	dc	H'6E
	dc	H'67
	dc	H'65
	dc	H'20
	dc	H'73
	dc	H'65
	dc	H'63
	dc	H'75
	dc	H'72
	dc	H'69
	dc	H'74
	dc	H'79
	dc	H'20
	dc	H'6D
	dc	H'6F
	dc	H'64
	dc	H'65
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'78
	dc	H'0A
	dc	H'00
?LC1:
	dc	H'4F
	dc	H'75
	dc	H'74
	dc	H'20
	dc	H'6F
	dc	H'66
	dc	H'20
	dc	H'72
	dc	H'61
	dc	H'6E
	dc	H'67
	dc	H'65
	dc	H'20
	dc	H'65
	dc	H'6E
	dc	H'63
	dc	H'79
	dc	H'70
	dc	H'74
	dc	H'69
	dc	H'6F
	dc	H'6E
	dc	H'20
	dc	H'6D
	dc	H'6F
	dc	H'64
	dc	H'65
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'78
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
$_ConnectionSmSecModeConfig:
	enter	#5
?LBB_ConnectionSmSecModeConfig:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB4:
	cmp	AL,#H'0005
	bcz	?L7
	st	AL,@(0,Y)
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L7:
?LBB5:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0003,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'0014
	bsr	$_MessageSend
?LBE5:
?LBE4:
?LBE_ConnectionSmSecModeConfig:
	leave	#5
	.SEG	CONST
?LC2:
	dc	H'4F
	dc	H'75
	dc	H'74
	dc	H'20
	dc	H'6F
	dc	H'66
	dc	H'20
	dc	H'72
	dc	H'61
	dc	H'6E
	dc	H'67
	dc	H'65
	dc	H'20
	dc	H'77
	dc	H'61
	dc	H'65
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'78
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
	ENDMOD

;# Function pattern *movqi2 used[0] = 18 total = 18
;# Function pattern *movqi3 used[0] = 13 total = 13
;# Function pattern *call1 used[0] = 5 total = 5
;# Function pattern *call_value1 used[0] = 7 total = 7
;# Function pattern movstrqi+2 used[0] = 2 total = 2
;# Function pattern movstrqi+5 used[0] = 3 total = 3
	MODULE	l2cap_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_connectionL2capInit:
	enter	#1
?LBB_connectionL2capInit:
	ld	AH,#H'0004
	bsr	$_connectionSendInternalInitCfm
?LBE_connectionL2capInit:
	leave	#1
	ENDMOD

;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 1 total = 1
	MODULE	rfc_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_connectionRfcInit:
	enter	#1
?LBB_connectionRfcInit:
?LBB2:
?LBB3:
	ld	AH,#H'000C
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0001
	st	AL,@(0,X)
	ld	AH,#H'0000
	st	AH,@(H'0001,X)
	ld	AL,#H'0003
	st	AL,@(H'0002,X)
	ld	AL,#H'0001
	st	AL,@(H'0003,X)
	st	AL,@(H'0004,X)
	st	AH,@(H'0005,X)
	ld	AL,#H'03E8
	st	AL,@(H'0007,X)
	st	AH,@(H'0006,X)
	st	AH,@(H'0009,X)
	st	AH,@(H'0008,X)
	st	AH,@(H'000B,X)
	st	AH,@(H'000A,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE3:
?LBE2:
?LBE_connectionRfcInit:
	leave	#1
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
	ENDMOD

;# Function pattern *movqi2 used[0] = 14 total = 14
;# Function pattern *movqi3 used[0] = 6 total = 6
;# Function pattern *call1 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
	MODULE	sdp_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_connectionSdpInit:
	enter	#1
?LBB_connectionSdpInit:
	add	AH,#H'0002
	bsr	$_BdaddrSetZero
	ld	AH,#H'0020
	bsr	$_connectionSendInternalInitCfm
?LBE_connectionSdpInit:
	leave	#1
	ENDMOD

;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 2 total = 2
	MODULE	tcp_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_connectionTcpInit:
	enter	#1
?LBB_connectionTcpInit:
	ld	AH,#H'0010
	bsr	$_connectionSendInternalInitCfm
?LBE_connectionTcpInit:
	leave	#1
	ENDMOD

;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 1 total = 1
	MODULE	udp_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_connectionUdpInit:
	enter	#1
?LBB_connectionUdpInit:
	ld	AH,#H'0008
	bsr	$_connectionSendInternalInitCfm
?LBE_connectionUdpInit:
	leave	#1
	ENDMOD

;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 1 total = 1
	MODULE	common
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_connectionConvertHciStatus:
	enter	#2
?LBB_connectionConvertHciStatus:
	cmp	AH,#H'0035
	bcz	?L1
?L5:
	st	AH,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0036
?L1:
?LBE_connectionConvertHciStatus:
	leave	#2
	.SEG	CONST
?LC0:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'73
	dc	H'74
	dc	H'61
	dc	H'74
	dc	H'75
	dc	H'73
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertAuthStatus:
	enter	#1
?LBB_connectionConvertAuthStatus:
	cmp	AH,#(H'0001+H'0038)
	bcc	?L193
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE194,X)
	brxl
	.SEG	CONST
?JTBASE194:
	.CODE
?L194:
	.SEG	CONST
	dc	?L169-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L176-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L179-?L194
	dc	?L182-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L185-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L193-?L194
	dc	?L188-?L194
	dc	?L191-?L194
	.CODE
?L176:
	ld	AH,#H'0001
	bra	(?L169)
?L179:
	ld	AH,#H'0003
	bra	(?L169)
?L182:
	ld	AH,#H'0004
	bra	(?L169)
?L185:
	ld	AH,#H'0005
	bra	(?L169)
?L188:
	ld	AH,#H'0006
	bra	(?L169)
?L191:
	ld	AH,#H'0007
	bra	(?L169)
?L173:
?L193:
	ld	AH,#H'0002
?L169:
?LBE_connectionConvertAuthStatus:
	leave	#1
$_connectionConvertHciVersion:
	enter	#2
?LBB_connectionConvertHciVersion:
	cmp	AH,#H'0004
	bcz	?L195
?L199:
	st	AH,@(0,Y)
	ld	AH,#(?LC1)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0005
?L195:
?LBE_connectionConvertHciVersion:
	leave	#2
	.SEG	CONST
?LC1:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'76
	dc	H'65
	dc	H'72
	dc	H'73
	dc	H'69
	dc	H'6F
	dc	H'6E
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertInquiryMode_t:
	enter	#2
?LBB_connectionConvertInquiryMode_t:
	cmp	AH,#H'0002
	bcz	?L216
?L220:
	st	AH,@(0,Y)
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0000
?L216:
?LBE_connectionConvertInquiryMode_t:
	leave	#2
	.SEG	CONST
?LC2:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'6D
	dc	H'6F
	dc	H'64
	dc	H'65
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertInquiryMode:
	enter	#2
?LBB_connectionConvertInquiryMode:
	cmp	AH,#H'0002
	bcz	?L231
?L235:
	st	AH,@(0,Y)
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0000
?L231:
?LBE_connectionConvertInquiryMode:
	leave	#2
$_connectionConvertSdpOpenStatus:
	enter	#2
?LBB_connectionConvertSdpOpenStatus:
	cmp	AH,#H'0009
	bcz	?L246
?L250:
	st	AH,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'000A
?L246:
?LBE_connectionConvertSdpOpenStatus:
	leave	#2
$_connectionConvertSdpSearchStatus:
	enter	#2
?LBB_connectionConvertSdpSearchStatus:
	ld	AL,@$XAP_AH
	cmp	AH,#(H'0001+H'0022)
	bcc	?L345
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE346,X)
	brxl
	.SEG	CONST
?JTBASE346:
	.CODE
?L346:
	.SEG	CONST
	dc	?L282-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L345-?L346
	dc	?L289-?L346
	dc	?L292-?L346
	dc	?L295-?L346
	dc	?L298-?L346
	dc	?L301-?L346
	dc	?L304-?L346
	dc	?L307-?L346
	dc	?L310-?L346
	dc	?L313-?L346
	dc	?L316-?L346
	dc	?L319-?L346
	dc	?L322-?L346
	dc	?L325-?L346
	dc	?L328-?L346
	dc	?L331-?L346
	dc	?L334-?L346
	dc	?L337-?L346
	dc	?L340-?L346
	dc	?L343-?L346
	.CODE
?L289:
	ld	AH,#H'0001
	bra	(?L282)
?L292:
	ld	AH,#H'0002
	bra	(?L282)
?L295:
	ld	AH,#H'0003
	bra	(?L282)
?L298:
	ld	AH,#H'0004
	bra	(?L282)
?L301:
	ld	AH,#H'0005
	bra	(?L282)
?L304:
	ld	AH,#H'0006
	bra	(?L282)
?L307:
	ld	AH,#H'0007
	bra	(?L282)
?L310:
	ld	AH,#H'0008
	bra	(?L282)
?L313:
	ld	AH,#H'0009
	bra	(?L282)
?L316:
	ld	AH,#H'000A
	bra	(?L282)
?L319:
	ld	AH,#H'000B
	bra	(?L282)
?L322:
	ld	AH,#H'000C
	bra	(?L282)
?L325:
	ld	AH,#H'000D
	bra	(?L282)
?L328:
	ld	AH,#H'000E
	bra	(?L282)
?L331:
	ld	AH,#H'000F
	bra	(?L282)
?L334:
	ld	AH,#H'0010
	bra	(?L282)
?L337:
	ld	AH,#H'0011
	bra	(?L282)
?L340:
	ld	AH,#H'0012
	bra	(?L282)
?L343:
	ld	AH,#H'0013
	bra	(?L282)
?L286:
?L345:
	st	AL,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0014
?L282:
?LBE_connectionConvertSdpSearchStatus:
	leave	#2
$_connectionConvertRfcommDisconnectStatus:
	enter	#2
?LBB_connectionConvertRfcommDisconnectStatus:
	ld	AL,@$XAP_AH
	cmp	AH,#(H'0001+H'0030)
	bcc	?L449
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE450,X)
	brxl
	.SEG	CONST
?JTBASE450:
	.CODE
?L450:
	.SEG	CONST
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L449-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L449-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L347-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L449-?L450
	dc	?L347-?L450
	.CODE
?L351:
?L449:
	st	AL,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0031
?L347:
?LBE_connectionConvertRfcommDisconnectStatus:
	leave	#2
$_connectionConvertBdaddr_t:
	enter	#1
?LBB_connectionConvertBdaddr_t:
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,@$XAP_AL
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@H'fff8
	st	AH,@(0,X)
	st	AL,@(1,X)
	ld	X,@H'fff9
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	st	AL,@(H'0002,X)
	ld	X,@H'fff9
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AL,@(H'0003,X)
?LBE_connectionConvertBdaddr_t:
	leave	#1
$_connectionConvertBdaddr:
	enter	#1
?LBB_connectionConvertBdaddr:
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,@$XAP_AL
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@H'fff8
	st	AH,@(0,X)
	st	AL,@(1,X)
	ld	X,@H'fff9
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	st	AL,@(H'0002,X)
	ld	X,@H'fff9
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AL,@(H'0003,X)
?LBE_connectionConvertBdaddr:
	leave	#1
$_connectionConvertPageScanRepMode_t:
	enter	#2
?LBB_connectionConvertPageScanRepMode_t:
	cmp	AH,#H'0002
	bcz	?L453
?L457:
	st	AH,@(0,Y)
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0003
?L453:
?LBE_connectionConvertPageScanRepMode_t:
	leave	#2
$_connectionConvertPageScanRepMode:
	enter	#2
?LBB_connectionConvertPageScanRepMode:
	cmp	AH,#H'0002
	bcz	?L468
?L472:
	st	AH,@(0,Y)
	ld	AH,#(?LC3)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0002
?L468:
?LBE_connectionConvertPageScanRepMode:
	leave	#2
	.SEG	CONST
?LC3:
	dc	H'49
	dc	H'6E
	dc	H'76
	dc	H'61
	dc	H'6C
	dc	H'69
	dc	H'64
	dc	H'20
	dc	H'70
	dc	H'61
	dc	H'67
	dc	H'65
	dc	H'20
	dc	H'73
	dc	H'63
	dc	H'61
	dc	H'6E
	dc	H'20
	dc	H'72
	dc	H'65
	dc	H'70
	dc	H'20
	dc	H'6D
	dc	H'6F
	dc	H'64
	dc	H'65
	dc	H'20
	dc	H'70
	dc	H'61
	dc	H'73
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'69
	dc	H'6E
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'78
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertPageScanMode_t:
	enter	#2
?LBB_connectionConvertPageScanMode_t:
	cmp	AH,#H'0003
	bcz	?L484
?L488:
	st	AH,@(0,Y)
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0004
?L484:
?LBE_connectionConvertPageScanMode_t:
	leave	#2
$_connectionConvertPageScanMode:
	enter	#2
?LBB_connectionConvertPageScanMode:
	cmp	AH,#H'0003
	bcz	?L502
?L506:
	st	AH,@(0,Y)
	ld	AH,#(?LC4)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0000
?L502:
?LBE_connectionConvertPageScanMode:
	leave	#2
	.SEG	CONST
?LC4:
	dc	H'49
	dc	H'6E
	dc	H'76
	dc	H'61
	dc	H'6C
	dc	H'69
	dc	H'64
	dc	H'20
	dc	H'70
	dc	H'61
	dc	H'67
	dc	H'65
	dc	H'20
	dc	H'73
	dc	H'63
	dc	H'61
	dc	H'6E
	dc	H'20
	dc	H'6D
	dc	H'6F
	dc	H'64
	dc	H'65
	dc	H'20
	dc	H'70
	dc	H'61
	dc	H'73
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'69
	dc	H'6E
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'78
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertProtocolId_t:
	enter	#2
?LBB_connectionConvertProtocolId_t:
	cmp	AH,#H'0000
	bne	?L522
	cmp	AL,#H'0000
	bne	?L522
	ld	AH,#H'0000
	bra	(?L521)
?L522:
	cmp	AH,#H'0000
	bne	?L524
	cmp	AL,#H'0001
	bne	?L524
	ld	AH,#H'0001
	bra	(?L521)
?L524:
	cmp	AH,#hwrd(H'0001+H'7FFF)
	bcs	?L526
	bne	?L530
	cmp	AL,#lwrd(H'0001+H'7FFF)
	bcs	?L526
?L530:
	ld	AH,@$XAP_AL
	bra	(?L521)
?L526:
	st	AL,@(0,Y)
	ld	AH,#(?LC5)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0002
?L521:
?LBE_connectionConvertProtocolId_t:
	leave	#2
	.SEG	CONST
?LC5:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'69
	dc	H'64
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertProtocolId:
	enter	#1
?LBB_connectionConvertProtocolId:
	cmp	AH,#H'0000
	bne	?L532
	ld	AL,#H'0000
	bra	(?L536)
?L532:
	cmp	AH,#H'0001
	bne	?L534
	ld	AL,#H'0001
?L536:
	ld	AH,#H'0000
	bra	(?L531)
?L534:
	ld	AL,@$XAP_AH
	ld	AH,#H'0000
?L531:
?LBE_connectionConvertProtocolId:
	leave	#1
$_connectionConvertHciScanEnable:
	enter	#2
?LBB_connectionConvertHciScanEnable:
	cmp	AH,#H'0003
	bcz	?L538
?L542:
	st	AH,@(0,Y)
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0003
?L538:
?LBE_connectionConvertHciScanEnable:
	leave	#2
$_connectionConvertSecurityMode_t:
	enter	#2
?LBB_connectionConvertSecurityMode_t:
	cmp	AH,#H'0005
	beq	?L575
	cmp	AH,#H'0005
	bcs	?L556
	bra	(?L578)
?L575:
	ld	AH,#H'0080
	bra	(?L556)
?L560:
?L578:
	st	AH,@(0,Y)
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0000
?L556:
?LBE_connectionConvertSecurityMode_t:
	leave	#2
$_connectionConvertSecurityLevel_t:
	enter	#2
?LBB_connectionConvertSecurityLevel_t:
	ld	AL,@$XAP_AH
	cmp	AH,#(H'0001+H'0008)
	bcc	?L610
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE611,X)
	brxl
	.SEG	CONST
?JTBASE611:
	.CODE
?L611:
	.SEG	CONST
	dc	?L582-?L611
	dc	?L582-?L611
	dc	?L582-?L611
	dc	?L595-?L611
	dc	?L598-?L611
	dc	?L601-?L611
	dc	?L604-?L611
	dc	?L607-?L611
	dc	?L610-?L611
	.CODE
?L595:
	ld	AH,#H'0004
	bra	(?L582)
?L598:
	ld	AH,#H'0008
	bra	(?L582)
?L601:
	ld	AH,#H'0010
	bra	(?L582)
?L604:
	ld	AH,#H'0020
	bra	(?L582)
?L607:
	ld	AH,#H'0040
	bra	(?L582)
?L586:
?L610:
	st	AL,@(0,Y)
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0000
?L582:
?LBE_connectionConvertSecurityLevel_t:
	leave	#2
$_connectionConvertSspSecurityLevel_t:
	enter	#2
?LBB_connectionConvertSspSecurityLevel_t:
	st	AH,@H'fff8
?LBB2:
	cmp	AL,#H'0000
	beq	?L613
	cmp	AH,#(H'0001+H'0004)
	bcc	?L620
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE621,X)
	brxl
	.SEG	CONST
?JTBASE621:
	.CODE
?L621:
	.SEG	CONST
	dc	?L615-?L621
	dc	?L616-?L621
	dc	?L635-?L621
	dc	?L618-?L621
	dc	?L620-?L621
	.CODE
?L615:
	ld	AH,#H'0000
	bra	(?L614)
?L616:
	ld	AH,#H'0900
	bra	(?L614)
?L618:
	ld	AH,#H'1B36
	bra	(?L614)
?L620:
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L635:
	ld	AH,#H'0936
?L614:
	tst	@(H'0002,Y)
	beq	?L622
	or	AH,#H'0009
?L622:
	tst	@(H'0003,Y)
	beq	?L624
	or	AH,#H'2400
	bra	(?L624)
?L613:
	cmp	AH,#(H'0001+H'0004)
	bcc	?L631
	ld	X,@H'fff8
	ld	X,@(?JTBASE632,X)
	brxl
	.SEG	CONST
?JTBASE632:
	.CODE
?L632:
	.SEG	CONST
	dc	?L626-?L632
	dc	?L627-?L632
	dc	?L636-?L632
	dc	?L629-?L632
	dc	?L631-?L632
	.CODE
?L626:
	ld	AH,#H'0000
	bra	(?L625)
?L627:
	ld	AH,#H'0100
	bra	(?L625)
?L629:
	ld	AH,#H'0306
	bra	(?L625)
?L631:
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	AH,#(?LC2)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L636:
	ld	AH,#H'0106
?L625:
	tst	@(H'0002,Y)
	beq	?L633
	or	AH,#H'0001
?L633:
	tst	@(H'0003,Y)
	beq	?L624
	or	AH,#H'0400
?L624:
?LBE2:
?LBE_connectionConvertSspSecurityLevel_t:
	leave	#2
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
$_connectionConvertWriteAuthEnable_t:
	enter	#2
?LBB_connectionConvertWriteAuthEnable_t:
	cmp	AH,#(H'0001+H'0005)
	bcc	?L658
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE659,X)
	brxl
	.SEG	CONST
?JTBASE659:
	.CODE
?L659:
	.SEG	CONST
	dc	?L637-?L659
	dc	?L637-?L659
	dc	?L637-?L659
	dc	?L650-?L659
	dc	?L653-?L659
	dc	?L656-?L659
	.CODE
?L650:
	ld	AH,#H'0004
	bra	(?L637)
?L653:
	ld	AH,#H'0008
	bra	(?L637)
?L656:
	ld	AH,#H'000F
	bra	(?L637)
?L641:
?L658:
	st	AH,@(0,Y)
	ld	AH,#(?LC6)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0001
?L637:
?LBE_connectionConvertWriteAuthEnable_t:
	leave	#2
	.SEG	CONST
?LC6:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'77
	dc	H'61
	dc	H'65
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertAuthenticationRequirements:
	enter	#2
?LBB_connectionConvertAuthenticationRequirements:
	cmp	AH,#H'0005
	bcz	?L660
?L664:
	st	AH,@(0,Y)
	ld	AH,#(?LC7)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0006
?L660:
?LBE_connectionConvertAuthenticationRequirements:
	leave	#2
	.SEG	CONST
?LC7:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'61
	dc	H'75
	dc	H'74
	dc	H'68
	dc	H'65
	dc	H'6E
	dc	H'74
	dc	H'69
	dc	H'63
	dc	H'61
	dc	H'74
	dc	H'69
	dc	H'6F
	dc	H'6E
	dc	H'20
	dc	H'72
	dc	H'65
	dc	H'71
	dc	H'75
	dc	H'69
	dc	H'72
	dc	H'65
	dc	H'6D
	dc	H'65
	dc	H'6E
	dc	H'74
	dc	H'73
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertLinkKeyType_t:
	enter	#2
?LBB_connectionConvertLinkKeyType_t:
	cmp	AH,#(H'0001+H'0005)
	bcc	?L705
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE706,X)
	brxl
	.SEG	CONST
?JTBASE706:
	.CODE
?L706:
	.SEG	CONST
	dc	?L707-?L706
	dc	?L691-?L706
	dc	?L694-?L706
	dc	?L697-?L706
	dc	?L700-?L706
	dc	?L703-?L706
	.CODE
?L691:
	ld	AH,#H'0000
	bra	(?L684)
?L694:
	ld	AH,#H'0003
	bra	(?L684)
?L697:
	ld	AH,#H'0004
	bra	(?L684)
?L700:
	ld	AH,#H'0005
	bra	(?L684)
?L703:
	ld	AH,#H'0006
	bra	(?L684)
?L688:
?L705:
	st	AH,@(0,Y)
	ld	AH,#(?LC8)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L707:
	ld	AH,#H'00FE
?L684:
?LBE_connectionConvertLinkKeyType_t:
	leave	#2
	.SEG	CONST
?LC8:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'6C
	dc	H'69
	dc	H'6E
	dc	H'6B
	dc	H'20
	dc	H'6B
	dc	H'65
	dc	H'79
	dc	H'20
	dc	H'74
	dc	H'79
	dc	H'70
	dc	H'65
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertLinkKeyType:
	enter	#2
?LBB_connectionConvertLinkKeyType:
	cmp	AH,#H'0004
	beq	?L721
	cmp	AH,#(H'0001+H'0004)
	bcc	?L731
	cmp	AH,#H'0000
	beq	?L715
	cmp	AH,#H'0003
	beq	?L718
	bra	(?L729)
?L731:
	cmp	AH,#H'0006
	beq	?L727
	cmp	AH,#H'0006
	bcs	?L724
	cmp	AH,#H'00FE
	bne	?L729
	bra	(?L732)
?L715:
	ld	AH,#H'0001
	bra	(?L708)
?L718:
	ld	AH,#H'0002
	bra	(?L708)
?L721:
	ld	AH,#H'0003
	bra	(?L708)
?L724:
	ld	AH,#H'0004
	bra	(?L708)
?L727:
	ld	AH,#H'0005
	bra	(?L708)
?L712:
?L729:
	st	AH,@(0,Y)
	ld	AH,#(?LC8)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L732:
	ld	AH,#H'0000
?L708:
?LBE_connectionConvertLinkKeyType:
	leave	#2
$_connectionConvertIoCapability_t:
	enter	#2
?LBB_connectionConvertIoCapability_t:
	cmp	AH,#H'0003
	bcz	?L738
?L742:
	st	AH,@(0,Y)
	ld	AH,#(?LC9)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0003
?L738:
?LBE_connectionConvertIoCapability_t:
	leave	#2
	.SEG	CONST
?LC9:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'49
	dc	H'4F
	dc	H'20
	dc	H'63
	dc	H'61
	dc	H'70
	dc	H'61
	dc	H'62
	dc	H'69
	dc	H'6C
	dc	H'69
	dc	H'74
	dc	H'79
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertIoCapability:
	enter	#2
?LBB_connectionConvertIoCapability:
	cmp	AH,#H'0003
	bcz	?L756
?L760:
	st	AH,@(0,Y)
	ld	AH,#(?LC9)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0003
?L756:
?LBE_connectionConvertIoCapability:
	leave	#2
$_connectionConvertKeypressType_t:
	enter	#2
?LBB_connectionConvertKeypressType_t:
	cmp	AH,#H'0004
	bcz	?L774
?L778:
	st	AH,@(0,Y)
	ld	AH,#(?LC10)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0001
?L774:
?LBE_connectionConvertKeypressType_t:
	leave	#2
	.SEG	CONST
?LC10:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'6B
	dc	H'65
	dc	H'79
	dc	H'70
	dc	H'72
	dc	H'65
	dc	H'73
	dc	H'73
	dc	H'20
	dc	H'74
	dc	H'79
	dc	H'70
	dc	H'65
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertKeypressType:
	enter	#2
?LBB_connectionConvertKeypressType:
	cmp	AH,#H'0004
	bcz	?L795
?L799:
	st	AH,@(0,Y)
	ld	AH,#(?LC10)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0001
?L795:
?LBE_connectionConvertKeypressType:
	leave	#2
$_connectionConvertHciRole:
	enter	#2
?LBB_connectionConvertHciRole:
	cmp	AH,#H'0001
	bcz	?L816
?L820:
	st	AH,@(0,Y)
	ld	AH,#(?LC11)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0002
?L816:
?LBE_connectionConvertHciRole:
	leave	#2
	.SEG	CONST
?LC11:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'72
	dc	H'6F
	dc	H'6C
	dc	H'65
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'00
	.CODE
$_connectionConvertHciRole_t:
	enter	#2
?LBB_connectionConvertHciRole_t:
	cmp	AH,#H'0001
	bcz	?L828
?L832:
	st	AH,@(0,Y)
	ld	AH,#(?LC12)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0002
?L828:
?LBE_connectionConvertHciRole_t:
	leave	#2
	.SEG	CONST
?LC12:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'72
	dc	H'6F
	dc	H'6C
	dc	H'65
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'0A
	dc	H'00
	.CODE
$_connectionConvertBtVersion:
	enter	#2
?LBB_connectionConvertBtVersion:
	cmp	AH,#H'0000
	beq	?L851
	cmp	AH,#H'0002
	bcz	?L841
?L845:
?L851:
	st	AH,@(0,Y)
	ld	AH,#(?LC13)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
	ld	AH,#H'0000
?L841:
?LBE_connectionConvertBtVersion:
	leave	#2
	.SEG	CONST
?LC13:
	dc	H'55
	dc	H'6E
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'67
	dc	H'6E
	dc	H'69
	dc	H'73
	dc	H'65
	dc	H'64
	dc	H'20
	dc	H'42
	dc	H'54
	dc	H'20
	dc	H'56
	dc	H'65
	dc	H'72
	dc	H'73
	dc	H'69
	dc	H'6F
	dc	H'6E
	dc	H'5F
	dc	H'74
	dc	H'20
	dc	H'25
	dc	H'64
	dc	H'20
	dc	H'0A
	dc	H'00
	.CODE
$_createTaskInstance:
	enter	#5
?LBB_createTaskInstance:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB3:
	ld	AH,@(0,X)
;	bsr	$_malloc
	DC	((256*3)+9)
	st	AH,@(H'0003,Y)
	cmp	AH,#H'0000
	beq	?L855
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AH,#H'0001
;	bsr	$_malloc
	DC	((256*3)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0003,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	bsr	$_MessageSend
?L855:
?LBE3:
	ld	AH,@(H'0003,Y)
?LBE_createTaskInstance:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
	ENDMOD

;# Function pattern *movqi2 used[0] = 57 used[1] = 13 used[3] = 2 total = 72
;# Function pattern *movqi3 used[0] = 123 total = 123
;# Function pattern *movhi used[2] = 2 used[3] = 2 total = 4
;# Function pattern *iorqi3 used[0] = 4 total = 4
;# Function pattern *zero_extendqihi2_1 used[0] = 1 total = 1
;# Function pattern jump used[0] = 59 total = 59
;# Function pattern *call1 used[0] = 29 total = 29
;# Function pattern *call_value1 used[0] = 30 total = 30
;# Function pattern tablejump_1 used[0] = 8 total = 8
;# Function pattern movstrqi+3 used[0] = 5 used[1] = 4 total = 9
;# Function pattern movstrqi+4 used[1] = 9 total = 9
;# Function pattern movstrqi+5 used[0] = 26 total = 26
;# Function pattern movstrqi+6 used[0] = 1 total = 1
;# Function pattern movstrqi+7 used[0] = 2 total = 2
	MODULE	dm_acl_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_connectionHandleDmEnAclDetachReq:
	enter	#3
?LBB_connectionHandleDmEnAclDetachReq:
	st	AH,@(0,Y)
?LBB2:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'3006
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0002
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0006,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE2:
?LBE_connectionHandleDmEnAclDetachReq:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 used[1] = 1 total = 7
;# Function pattern *movqi3 used[0] = 5 total = 5
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 1 total = 1
	MODULE	dm_baseband_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_connectionHandleReadClassOfDeviceRequest:
	enter	#6
?LBB_connectionHandleReadClassOfDeviceRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB2:
	tst	@(0,X)
	bne	?L2
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
?LBB3:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0C23
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE3:
	bra	(?L1)
?L2:
?LBB4:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0025
	bsr	$_MessageSendConditionallyOnTask
?L1:
?LBE4:
?LBE2:
?LBE_connectionHandleReadClassOfDeviceRequest:
	leave	#6
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
$_connectionHandleReadClassOfDeviceComplete:
	enter	#5
?LBB_connectionHandleReadClassOfDeviceComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB5:
	tst	@(0,X)
	beq	?L4
?LBB6:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0003,X)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7009
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?L4:
?LBE6:
?LBE5:
?LBE_connectionHandleReadClassOfDeviceComplete:
	leave	#5
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
$_connectionHandleWritePageScanActivityRequset:
	enter	#2
?LBB_connectionHandleWritePageScanActivityRequset:
	st	AH,@(0,Y)
?LBB7:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0C1C
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0004
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE7:
?LBE_connectionHandleWritePageScanActivityRequset:
	leave	#2
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
$_connectionHandleWriteInquiryScanActivityRequest:
	enter	#2
?LBB_connectionHandleWriteInquiryScanActivityRequest:
	st	AH,@(0,Y)
?LBB8:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0C1E
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0004
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE8:
?LBE_connectionHandleWriteInquiryScanActivityRequest:
	leave	#2
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
$_connectionHandleWriteScanEnableRequest:
	enter	#3
?LBB_connectionHandleWriteScanEnableRequest:
	st	AH,@(0,Y)
?LBB9:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'0C1A
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0003
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AH,@(0,X)
	bsr	$_connectionConvertHciScanEnable
	ld	X,@(H'0001,Y)
	st	AH,@(H'0002,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE9:
?LBE_connectionHandleWriteScanEnableRequest:
	leave	#3
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
$_connectionHandleWriteCodRequset:
	enter	#2
?LBB_connectionHandleWriteCodRequset:
	st	AH,@(0,Y)
?LBB10:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0C24
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0004
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@H'fff8
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE10:
?LBE_connectionHandleWriteCodRequset:
	leave	#2
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
$_connectionHandleWriteCachedPageModeRequest:
	enter	#3
?LBB_connectionHandleWriteCachedPageModeRequest:
	st	AH,@(0,Y)
?LBB11:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2801
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertPageScanMode
	ld	X,@(H'0001,Y)
	st	AH,@(H'0005,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	bsr	$_connectionConvertPageScanRepMode
	ld	X,@(H'0001,Y)
	st	AH,@(H'0006,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE11:
?LBE_connectionHandleWriteCachedPageModeRequest:
	leave	#3
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
$_connectionHandleWriteCachedClkOffsetRequest:
	enter	#3
?LBB_connectionHandleWriteCachedClkOffsetRequest:
	st	AH,@(0,Y)
?LBB12:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2802
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0005,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE12:
?LBE_connectionHandleWriteCachedClkOffsetRequest:
	leave	#3
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
$_connectionHandleClearParamCacheRequest:
	enter	#3
?LBB_connectionHandleClearParamCacheRequest:
	st	AH,@(0,Y)
?LBB13:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2803
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE13:
?LBE_connectionHandleClearParamCacheRequest:
	leave	#3
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
$_connectionHandleWriteFlushTimeoutRequest:
	enter	#7
?LBB_connectionHandleWriteFlushTimeoutRequest:
	st	AH,@(H'0004,Y)
	ld	X,@$XAP_AH
?LBB14:
	ld	AH,@(0,X)
	ld	AL,@$XAP_UY
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L13
?LBB15:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0C28
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0008
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0007,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L13:
?LBE15:
?LBE14:
?LBE_connectionHandleWriteFlushTimeoutRequest:
	leave	#7
;.stabn	192,0,0,?LBB14
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;.stabn	224,0,0,?LBE14
$_connectionHandleChangeLocalName:
	enter	#3
?LBB_connectionHandleChangeLocalName:
	st	AH,@(0,Y)
?LBB16:
	ld	AH,#H'000A
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'0C13
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'000A
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	add	AL,#H'000A
	ld	X,@(H'0001,Y)
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	tst	@(0,X)
	beq	?L16
	ld	AH,@(H'0001,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0002,X)
	bra	(?L17)
?L16:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0002,X)
?L17:
	ld	AL,#H'0001
	ld	AH,#H'0000
?L22:
	ld	X,@(H'0001,Y)
	add	X,@$XAP_AL
	st	AH,@(H'0002,X)
	add	AL,#H'0001
	cmp	AL,#H'0007
	bcz	?L22
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE16:
?LBE_connectionHandleChangeLocalName:
	leave	#3
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
	ENDMOD

;# Function pattern *movqi2 used[0] = 86 used[1] = 7 total = 93
;# Function pattern *movqi3 used[0] = 81 total = 81
;# Function pattern *movqi8 used[0] = 1 total = 1
;# Function pattern *movhi used[2] = 2 used[3] = 2 total = 4
;# Function pattern *addqi2 used[0] = 7 total = 7
;# Function pattern jump used[0] = 2 total = 2
;# Function pattern *call1 used[0] = 16 total = 16
;# Function pattern *call_value1 used[0] = 19 total = 19
;# Function pattern movstrqi+3 used[0] = 1 used[1] = 3 total = 4
;# Function pattern movstrqi+5 used[0] = 1 total = 1
	MODULE	dm_dut_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_connectionSendDutCfmToClient:
	enter	#4
?LBB_connectionSendDutCfmToClient:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	cmp	AH,#H'0000
	beq	?L1
?LBB3:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'703B
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_connectionSendDutCfmToClient:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
$_connectionHandleEnterDutModeReq:
	enter	#3
?LBB_connectionHandleEnterDutModeReq:
	st	AH,@(H'0001,Y)
?LBB4:
	ld	AH,#H'0003
	bsr	$_ConnectionWriteScanEnable
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	cmp	AL,#(H'0001+H'0001)
	bcc	?L4
	bsr	$_connectionGetCmTask
	ld	AL,#H'0000
	st	AL,@(0,Y)
	bsr	$_ConnectionSmSetSecurityMode
	bra	(?L3)
?L4:
?LBB5:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'1803
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L3:
?LBE5:
?LBE4:
?LBE_connectionHandleEnterDutModeReq:
	leave	#3
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
$_connectionHandleDutSecurityDisabled:
	enter	#1
?LBB_connectionHandleDutSecurityDisabled:
	ld	X,@$XAP_AL
?LBB6:
	tst	@(H'0004,X)
	beq	?L7
?LBB7:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'1803
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE7:
	bra	(?L6)
?L7:
	ld	AL,#H'0001
	bsr	$_connectionSendDutCfmToClient
?L6:
?LBE6:
?LBE_connectionHandleDutSecurityDisabled:
	leave	#1
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
$_connectionHandleDutCfm:
	enter	#1
?LBB_connectionHandleDutCfm:
	ld	X,@$XAP_AL
	tst	@(H'0002,X)
	bne	?L10
	ld	AL,#H'0000
	bra	(?L12)
?L10:
	ld	AL,#H'0001
?L12:
	bsr	$_connectionSendDutCfmToClient
?LBE_connectionHandleDutCfm:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 15 used[1] = 1 total = 16
;# Function pattern *movqi3 used[0] = 16 total = 16
;# Function pattern jump used[0] = 3 total = 3
;# Function pattern *call1 used[0] = 7 total = 7
;# Function pattern *call_value1 used[0] = 4 total = 4
;# Function pattern movstrqi+3 used[0] = 1 used[1] = 2 total = 3
;# Function pattern movstrqi+4 used[1] = 1 total = 1
	MODULE	dm_info_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_sendLinkQualityCfm:
	enter	#4
?LBB_sendLinkQualityCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	cmp	AH,#H'0000
	beq	?L1
?LBB3:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7011
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_sendLinkQualityCfm:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
_sendRssiCfm:
	enter	#4
?LBB_sendRssiCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB4:
	cmp	AH,#H'0000
	beq	?L3
?LBB5:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7012
	bsr	$_MessageSend
?L3:
?LBE5:
?LBE4:
?LBE_sendRssiCfm:
	leave	#4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
_sendClockOffsetCfm:
	enter	#4
?LBB_sendClockOffsetCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB6:
	cmp	AH,#H'0000
	beq	?L5
?LBB7:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0002,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7016
	bsr	$_MessageSend
?L5:
?LBE7:
?LBE6:
?LBE_sendClockOffsetCfm:
	leave	#4
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
_sendRemoteSupportedFeaturesCfm:
	enter	#5
?LBB_sendRemoteSupportedFeaturesCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
	cmp	AH,#H'0000
	beq	?L7
?LBB9:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0001,X)
	tst	@(H'0005,Y)
	beq	?L9
	add	AH,#H'0002
	ld	AL,#H'0004
	st	AL,@(0,Y)
	ld	AL,@(H'0005,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	bra	(?L10)
?L9:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
?L10:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7013
	bsr	$_MessageSend
?L7:
?LBE9:
?LBE8:
?LBE_sendRemoteSupportedFeaturesCfm:
	leave	#5
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
$_connectionHandleReadAddrRequest:
	enter	#6
?LBB_connectionHandleReadAddrRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB10:
	tst	@(0,X)
	bne	?L12
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
?LBB11:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'1009
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE11:
	bra	(?L11)
?L12:
?LBB12:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0031
	bsr	$_MessageSendConditionallyOnTask
?L11:
?LBE12:
?LBE10:
?LBE_connectionHandleReadAddrRequest:
	leave	#6
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
$_connectionHandleReadBdAddrComplete:
	enter	#5
?LBB_connectionHandleReadBdAddrComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB13:
	tst	@(0,X)
	beq	?L14
?LBB14:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0001
	ld	AL,@(H'0002,Y)
	add	AL,#H'0003
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7010
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?L14:
?LBE14:
?LBE13:
?LBE_connectionHandleReadBdAddrComplete:
	leave	#5
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
$_connectionHandleReadLinkQualityRequest:
	enter	#11
?LBB_connectionHandleReadLinkQualityRequest:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB15:
	tst	@(0,X)
	bne	?L17
	ld	X,@$XAP_AL
?LBB16:
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	bne	?L18
	st	AH,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendLinkQualityCfm
	bra	(?L16)
?L18:
?LBB17:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'1403
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0008,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0001,X)
?LBE17:
?LBE16:
	bra	(?L16)
?L17:
?LBB18:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0009,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0006,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0032
	bsr	$_MessageSendConditionallyOnTask
?L16:
?LBE18:
?LBE15:
?LBE_connectionHandleReadLinkQualityRequest:
	leave	#11
;.stabn	192,0,0,?LBB16
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
;.stabn	224,0,0,?LBE16
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
$_connectionHandleReadLinkQualityComplete:
	enter	#5
?LBB_connectionHandleReadLinkQualityComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AL
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0007,X)
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	st	AH,@(H'0001,Y)
	ld	AH,@(0,X)
	bsr	_sendLinkQualityCfm
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
?LBE_connectionHandleReadLinkQualityComplete:
	leave	#5
$_connectionHandleReadRssiRequest:
	enter	#11
?LBB_connectionHandleReadRssiRequest:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB19:
	tst	@(0,X)
	bne	?L23
	ld	X,@$XAP_AL
?LBB20:
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	bne	?L24
	st	AH,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendRssiCfm
	bra	(?L22)
?L24:
?LBB21:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'1405
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0008,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0001,X)
?LBE21:
?LBE20:
	bra	(?L22)
?L23:
?LBB22:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0009,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0006,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0033
	bsr	$_MessageSendConditionallyOnTask
?L22:
?LBE22:
?LBE19:
?LBE_connectionHandleReadRssiRequest:
	leave	#11
;.stabn	192,0,0,?LBB20
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
;.stabn	224,0,0,?LBE20
;.stabn	192,0,0,?LBB22
;.stabn	224,0,0,?LBE22
$_connectionHandleReadRssiComplete:
	enter	#5
?LBB_connectionHandleReadRssiComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AL
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0007,X)
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	st	AH,@(H'0001,Y)
	ld	AH,@(0,X)
	bsr	_sendRssiCfm
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
?LBE_connectionHandleReadRssiComplete:
	leave	#5
$_connectionHandleReadclkOffsetRequest:
	enter	#11
?LBB_connectionHandleReadclkOffsetRequest:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB23:
	tst	@(0,X)
	bne	?L29
	ld	X,@$XAP_AL
?LBB24:
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	bne	?L30
	st	AH,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendClockOffsetCfm
	bra	(?L28)
?L30:
?LBB25:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'041F
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0008,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0001,X)
?LBE25:
?LBE24:
	bra	(?L28)
?L29:
?LBB26:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0009,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0006,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0034
	bsr	$_MessageSendConditionallyOnTask
?L28:
?LBE26:
?LBE23:
?LBE_connectionHandleReadclkOffsetRequest:
	leave	#11
;.stabn	192,0,0,?LBB24
;.stabn	192,0,0,?LBB25
;.stabn	224,0,0,?LBE25
;.stabn	224,0,0,?LBE24
;.stabn	192,0,0,?LBB26
;.stabn	224,0,0,?LBE26
$_connectionHandleReadClkOffsetComplete:
	enter	#5
?LBB_connectionHandleReadClkOffsetComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AL
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0007,X)
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	st	AH,@(H'0001,Y)
	ld	AH,@(0,X)
	bsr	_sendClockOffsetCfm
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
?LBE_connectionHandleReadClkOffsetComplete:
	leave	#5
$_connectionHandleReadRemoteSupportedFeaturesRequest:
	enter	#11
?LBB_connectionHandleReadRemoteSupportedFeaturesRequest:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB27:
	tst	@(0,X)
	bne	?L35
	ld	X,@$XAP_AL
?LBB28:
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	bne	?L36
	st	AH,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendRemoteSupportedFeaturesCfm
	bra	(?L34)
?L36:
?LBB29:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'041B
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0008,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0001,X)
?LBE29:
?LBE28:
	bra	(?L34)
?L35:
?LBB30:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0009,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0006,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0036
	bsr	$_MessageSendConditionallyOnTask
?L34:
?LBE30:
?LBE27:
?LBE_connectionHandleReadRemoteSupportedFeaturesRequest:
	leave	#11
;.stabn	192,0,0,?LBB28
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
;.stabn	224,0,0,?LBE28
;.stabn	192,0,0,?LBB30
;.stabn	224,0,0,?LBE30
$_connectionHandleReadRemoteSupportedFeaturesCfm:
	enter	#5
?LBB_connectionHandleReadRemoteSupportedFeaturesCfm:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
	tst	@(0,X)
	beq	?L40
	ld	X,@$XAP_AL
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	AH,@(H'0003,Y)
	add	AH,#H'0007
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	st	AH,@(H'0001,Y)
	ld	AH,@(0,X)
	bsr	_sendRemoteSupportedFeaturesCfm
?L40:
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
?LBE_connectionHandleReadRemoteSupportedFeaturesCfm:
	leave	#5
$_connectionHandleReadLocalVersionRequest:
	enter	#6
?LBB_connectionHandleReadLocalVersionRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB31:
	tst	@(0,X)
	bne	?L42
?LBB32:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'1001
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
?LBE32:
	bra	(?L41)
?L42:
?LBB33:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0037
	bsr	$_MessageSendConditionallyOnTask
?L41:
?LBE33:
?LBE31:
?LBE_connectionHandleReadLocalVersionRequest:
	leave	#6
;.stabn	192,0,0,?LBB32
;.stabn	224,0,0,?LBE32
;.stabn	192,0,0,?LBB33
;.stabn	224,0,0,?LBE33
$_connectionHandleReadLocalVersionCfm:
	enter	#6
?LBB_connectionHandleReadLocalVersionCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB34:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	cmp	AL,@$XAP_AH
	bne	?L45
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	cmp	AL,#H'0003
	bcz	?L46
?LBB35:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0035
	bra	(?L49)
?L46:
?LBE35:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0002,X)
	ld	AH,#H'0040
	bsr	$_connectionSendInternalInitCfm
	bra	(?L48)
?L45:
?LBB36:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0003,X)
	bsr	$_connectionConvertHciVersion
	ld	X,@(H'0004,Y)
	st	AH,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0004,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0004,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0005,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7014
?L49:
	bsr	$_MessageSend
?L48:
?LBE36:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
?LBE34:
?LBE_connectionHandleReadLocalVersionCfm:
	leave	#6
;.stabn	192,0,0,?LBB35
;.stabn	224,0,0,?LBE35
;.stabn	192,0,0,?LBB36
;.stabn	224,0,0,?LBE36
$_connectionHandleReadRemoteVersionRequest:
	enter	#12
?LBB_connectionHandleReadRemoteVersionRequest:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB37:
	tst	@(0,X)
	bne	?L53
	ld	X,@$XAP_AL
?LBB38:
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	bne	?L54
?LBB39:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0002
	st	AL,@(0,X)
	ld	AH,@(H'0008,Y)
	st	AH,@(H'0001,X)
	st	AH,@(H'0002,X)
	st	AH,@(H'0003,X)
	st	X,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7015
	bsr	$_MessageSend
?LBE39:
	bra	(?L52)
?L54:
?LBB40:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	AL,#H'041D
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0009,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
?LBE40:
?LBE38:
	bra	(?L52)
?L53:
?LBB41:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'000A,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'000A,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'000A,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0006,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0038
	bsr	$_MessageSendConditionallyOnTask
?L52:
?LBE41:
?LBE37:
?LBE_connectionHandleReadRemoteVersionRequest:
	leave	#12
;.stabn	192,0,0,?LBB38
;.stabn	192,0,0,?LBB39
;.stabn	224,0,0,?LBE39
;.stabn	192,0,0,?LBB40
;.stabn	224,0,0,?LBE40
;.stabn	224,0,0,?LBE38
;.stabn	192,0,0,?LBB41
;.stabn	224,0,0,?LBE41
$_connectionHandleReadRemoteVersionCfm:
	enter	#5
?LBB_connectionHandleReadRemoteVersionCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB42:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0009,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7015
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
?LBE42:
?LBE_connectionHandleReadRemoteVersionCfm:
	leave	#5
;.stabn	192,0,0,?LBB42
;.stabn	224,0,0,?LBE42
$_connectionHandleSetBtVersionReq:
	enter	#6
?LBB_connectionHandleSetBtVersionReq:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB43:
	tst	@(0,X)
	bne	?L59
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
?LBB44:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0002
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE44:
	bra	(?L58)
?L59:
?LBB45:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0004,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0035
	bsr	$_MessageSendConditionallyOnTask
?L58:
?LBE45:
?LBE43:
?LBE_connectionHandleSetBtVersionReq:
	leave	#6
;.stabn	192,0,0,?LBB44
;.stabn	224,0,0,?LBE44
;.stabn	192,0,0,?LBB45
;.stabn	224,0,0,?LBE45
$_connectionHandleSetBtVersionCfm:
	enter	#5
?LBB_connectionHandleSetBtVersionCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB46:
	tst	@(0,X)
	beq	?L62
	bsr	$_connectionGetCmTask
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	cmp	AL,@$XAP_AH
	bne	?L63
	ld	AH,#H'0040
	bsr	$_connectionSendInternalInitCfm
	bra	(?L62)
?L63:
?LBB47:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0003,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertBtVersion
	ld	X,@(H'0003,Y)
	st	AH,@(H'0001,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7017
	bsr	$_MessageSend
?L62:
?LBE47:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0002,X)
?LBE46:
?LBE_connectionHandleSetBtVersionCfm:
	leave	#5
;.stabn	192,0,0,?LBB47
;.stabn	224,0,0,?LBE47
$_connectionHandleDmHciModeChangeEvent:
	enter	#5
?LBB_connectionHandleDmHciModeChangeEvent:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB48:
	bsr	$_connectionGetMsgFilter
	ld	X,@$XAP_AH
	tst	@(H'0001,Y)
	beq	?L66
	ld	AL,@(0,X)
	and	AL,#H'0002
	cmp	AL,#H'0000
	beq	?L66
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	bne	?L66
	tst	@(H'0007,X)
	beq	?L69
	ld	AL,@(H'0007,X)
	cmp	AL,#H'0002
	bne	?L66
?L69:
?LBB49:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0003
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0007,X)
	cmp	AL,#H'0000
	beq	?L71
	cmp	AL,#H'0002
	beq	?L72
	bra	(?L73)
?L71:
	ld	AL,#H'0000
	bra	(?L75)
?L72:
	ld	AL,#H'0001
?L75:
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	bra	(?L70)
?L73:
;	bsr	$_Panic
	DC	((256*14)+9)
?L70:
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0005,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'703C
	bsr	$_MessageSend
?L66:
?LBE49:
?LBE48:
?LBE_connectionHandleDmHciModeChangeEvent:
	leave	#5
;.stabn	192,0,0,?LBB48
;.stabn	192,0,0,?LBB49
;.stabn	224,0,0,?LBE49
;.stabn	224,0,0,?LBE48
	ENDMOD

;# Function pattern *movqi2 used[0] = 233 used[1] = 11 total = 244
;# Function pattern *movqi3 used[0] = 284 total = 284
;# Function pattern *movhi used[2] = 6 used[3] = 6 total = 12
;# Function pattern *addqi0 used[0] = 10 total = 10
;# Function pattern *addqi2 used[0] = 10 total = 10
;# Function pattern *andqi3 used[0] = 1 total = 1
;# Function pattern jump used[0] = 20 total = 20
;# Function pattern *call1 used[0] = 44 total = 44
;# Function pattern *call_value1 used[0] = 56 total = 56
;# Function pattern movstrqi+3 used[0] = 11 used[1] = 15 total = 26
;# Function pattern movstrqi+5 used[0] = 5 total = 5
	MODULE	dm_inquiry_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_inquirySendResult:
	enter	#5
?LBB_inquirySendResult:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	tst	@(H'0001,Y)
	beq	?L1
	ld	AH,@(H'000C,Y)
?LBB3:
	add	AH,#H'000D
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	tst	@(H'0005,Y)
	beq	?L3
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	bra	(?L4)
?L3:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0001
	bsr	$_BdaddrSetZero
?L4:
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0007,X)
	ld	AH,@(H'0009,Y)
	bsr	$_connectionConvertPageScanRepMode_t
	ld	X,@(H'0003,Y)
	st	AH,@(H'0008,X)
	ld	AH,@(H'000A,Y)
	bsr	$_connectionConvertPageScanMode_t
	ld	X,@(H'0003,Y)
	st	AH,@(H'0009,X)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'000A,X)
	ld	AL,@(H'000C,Y)
	st	AL,@(H'000B,X)
	cmp	AL,#H'0000
	beq	?L5
	ld	AH,@$XAP_UXL
	add	AH,#H'000C
	st	AL,@(0,Y)
	ld	AL,@(H'000D,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	bra	(?L6)
?L5:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'000C,X)
?L6:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7005
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_inquirySendResult:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
_inquiryAddEirData:
	enter	#4
?LBB_inquiryAddEirData:
	st	AH,@(H'0001,Y)
	ld	AH,@$XAP_AL
	ld	AL,@(H'0004,Y)
	ld	X,@(H'0001,Y)
?LBB4:
	add	AL,@(0,X)
;	bsr	$_realloc
	DC	((256*5)+9)
	st	AH,@(H'0002,Y)
	ld	X,@(H'0001,Y)
	add	AH,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0005,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AL,@(H'0004,Y)
	ld	X,@(H'0001,Y)
	add	AL,@(0,X)
	st	AL,@(0,X)
?LBE4:
	ld	AH,@(H'0002,Y)
?LBE_inquiryAddEirData:
	leave	#4
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
_inquiryParseEir:
	enter	#13
?LBB_inquiryParseEir:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?LBB5:
	ld	AL,#H'0000
	st	AL,@(H'0004,Y)
	st	AL,@(H'000A,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	tst	@(0,X)
	bne	?L9
	ld	AH,#H'0000
	bra	(?L8)
?L9:
	ld	AL,#H'0020
	st	AL,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	add	X,@(H'0004,Y)
	ld	AH,@(0,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0007,Y)
	st	AH,@(H'0006,Y)
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	add	AL,#H'0001
	st	AL,@(H'0008,Y)
	ld	AL,#H'0000
	st	AL,@(H'0009,Y)
	ld	AL,@(H'0008,Y)
	ld	X,@(H'0002,Y)
	add	AL,@(0,X)
	cmp	AL,#H'0028
	bcz	?L10
	ld	AL,#H'0001
	st	AL,@(H'0009,Y)
?L10:
	ld	X,@(H'0006,Y)
	tst	@(0,X)
	beq	?L12
?L25:
	ld	AL,@(H'0008,Y)
	cmp	AL,@(H'0005,Y)
	bcc	?L14
	tst	@(H'000D,Y)
	beq	?L16
	tst	@(H'0009,Y)
	bne	?L15
?L16:
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0006,Y)
	st	X,@(H'0001,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'000A,Y)
	bsr	_inquiryAddEirData
	st	AH,@(H'000A,Y)
?L15:
	ld	AL,@(H'0005,Y)
	sub	AL,@(H'0008,Y)
	st	AL,@(H'0005,Y)
	ld	X,@(H'0006,Y)
	add	X,@(H'0008,Y)
	st	X,@(H'0006,Y)
	bra	(?L28)
?L14:
	tst	@(H'000D,Y)
	beq	?L20
	tst	@(H'0009,Y)
	bne	?L19
?L20:
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0006,Y)
	st	X,@(H'0001,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'000A,Y)
	bsr	_inquiryAddEirData
	st	AH,@(H'000A,Y)
?L19:
	ld	AL,@(H'0004,Y)
	add	AL,#H'0001
	st	AL,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	add	X,@$XAP_AL
	st	X,@(H'000B,Y)
	tst	@(0,X)
	beq	?L12
	ld	AH,@(H'0007,Y)
;	bsr	$_free
	DC	((256*4)+9)
	ld	AL,@(H'0008,Y)
	sub	AL,@(H'0005,Y)
	st	AL,@(H'0008,Y)
	ld	AL,#H'0020
	st	AL,@(H'0005,Y)
	ld	X,@(H'000B,Y)
	ld	AH,@(0,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0007,Y)
	st	AH,@(H'0006,Y)
	tst	@(H'0008,Y)
	bne	?L11
	ld	X,@$XAP_AH
?L28:
	ld	AL,@(0,X)
	add	AL,#H'0001
	st	AL,@(H'0008,Y)
	ld	AL,#H'0000
	st	AL,@(H'0009,Y)
	ld	AL,@(H'0008,Y)
	ld	X,@(H'0002,Y)
	add	AL,@(0,X)
	cmp	AL,#H'0028
	bcz	?L11
	ld	AL,#H'0001
	st	AL,@(H'0009,Y)
?L11:
	ld	X,@(H'0006,Y)
	tst	@(0,X)
	bne	?L25
?L12:
	ld	AH,@(H'0007,Y)
;	bsr	$_free
	DC	((256*4)+9)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	add	AL,#H'0001
	st	AL,@(0,X)
	ld	AH,@(H'000A,Y)
;	bsr	$_realloc
	DC	((256*5)+9)
	st	AH,@(H'000A,Y)
	ld	X,@(H'0002,Y)
	add	AH,@(0,X)
	ld	AL,#H'0000
	ld	X,@$XAP_AH
	st	AL,@(-H'0001,X)
	ld	AH,@(H'000A,Y)
?L8:
?LBE5:
?LBE_inquiryParseEir:
	leave	#13
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
$_connectionHandleInquiryStart:
	enter	#6
?LBB_connectionHandleInquiryStart:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB6:
	tst	@(0,X)
	bne	?L33
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	cmp	AH,#H'0000
	bne	?L36
	cmp	AL,#H'0000
	beq	?L34
?L36:
?LBB7:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0C05
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0009
	st	AL,@(H'0001,X)
	ld	AL,#H'0001
	st	AL,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@H'fff8
	st	AH,@(H'0004,X)
	st	AL,@(H'0005,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@H'fff8
	st	AH,@(H'0006,X)
	st	AL,@(H'0007,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L34:
?LBE7:
?LBB8:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0401
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0006
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	ld	X,@H'fff8
	st	AL,@(H'0004,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AL,@(H'0005,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE8:
	bra	(?L32)
?L33:
?LBB9:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0007
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0003
	bsr	$_MessageSendConditionallyOnTask
?L32:
?LBE9:
?LBE6:
?LBE_connectionHandleInquiryStart:
	leave	#6
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
$_connectionHandleInquiryResult:
	enter	#22
?LBB_connectionHandleInquiryResult:
	st	AH,@(H'000D,Y)
	st	AL,@(H'000E,Y)
	ld	X,@$XAP_AL
?LBB10:
	ld	X,@(H'0002,X)
	st	X,@(H'0011,Y)
	ld	AH,#H'0000
	st	AH,@(H'000F,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'0002
	ld	AH,#H'0000
	udiv	#H'0003
	ld	AH,#H'0000
	cmp	AH,@$XAP_AL
	bcc	?L50
?L48:
?LBB11:
	ld	AL,#H'0003
	st	AL,@(H'0012,Y)
	ld	X,@(H'000E,Y)
	add	X,@(H'000F,Y)
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0013,Y)
	ld	X,@(H'0011,Y)
	cmp	X,#H'0003
	bcc	?L42
	st	X,@(H'0012,Y)
?L42:
	ld	AH,#H'0000
	st	AH,@(H'0010,Y)
	cmp	AH,@(H'0012,Y)
	bcc	?L52
?L47:
?LBB12:
	ld	AL,@(H'0010,Y)
	smult	#H'000A
	ld	X,@(H'0013,Y)
	add	X,@$XAP_AL
	st	X,@(H'0014,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0009
	ld	AL,@$XAP_UXL
	bsr	$_connectionConvertBdaddr
	ld	AL,@$XAP_UY
	add	AL,#H'0009
	st	AL,@(0,Y)
	ld	X,@(H'0014,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0008,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0009,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(H'0005,Y)
	ld	AL,#H'7FFF
	st	AL,@(H'0006,Y)
	ld	AL,#H'0000
	st	AL,@(H'0007,Y)
	st	AL,@(H'0008,Y)
	ld	X,@(H'000D,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	_inquirySendResult
	ld	AH,@(H'0010,Y)
?LBE12:
	add	AH,#H'0001
	st	AH,@(H'0010,Y)
	cmp	AH,@(H'0012,Y)
	bcs	?L47
?L52:
	ld	AH,@(H'0013,Y)
;	bsr	$_free
	DC	((256*4)+9)
	ld	AL,@(H'000F,Y)
?LBE11:
	add	AL,#H'0001
	st	AL,@(H'000F,Y)
	ld	X,@(H'000E,Y)
	ld	AL,@(H'0002,X)
	add	AL,#H'0002
	ld	AH,#H'0000
	udiv	#H'0003
	ld	AH,@(H'000F,Y)
	cmp	AH,@$XAP_AL
	bcs	?L48
?L50:
?LBE10:
?LBE_connectionHandleInquiryResult:
	leave	#22
;.stabn	192,0,0,?LBB10
;.stabn	192,0,0,?LBB11
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
;.stabn	224,0,0,?LBE11
;.stabn	224,0,0,?LBE10
$_connectionHandleInquiryResultWithRssi:
	enter	#22
?LBB_connectionHandleInquiryResultWithRssi:
	st	AH,@(H'000D,Y)
	st	AL,@(H'000E,Y)
	ld	X,@$XAP_AL
?LBB13:
	ld	X,@(H'0002,X)
	st	X,@(H'0011,Y)
	ld	AH,#H'0000
	st	AH,@(H'000F,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'0002
	ld	AH,#H'0000
	udiv	#H'0003
	ld	AH,#H'0000
	cmp	AH,@$XAP_AL
	bcc	?L71
?L69:
?LBB14:
	ld	AL,#H'0003
	st	AL,@(H'0012,Y)
	ld	X,@(H'000E,Y)
	add	X,@(H'000F,Y)
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0013,Y)
	ld	X,@(H'0011,Y)
	cmp	X,#H'0003
	bcc	?L63
	st	X,@(H'0012,Y)
?L63:
	ld	AH,#H'0000
	st	AH,@(H'0010,Y)
	cmp	AH,@(H'0012,Y)
	bcc	?L73
?L68:
?LBB15:
	ld	AL,@(H'0010,Y)
	smult	#H'000A
	ld	X,@(H'0013,Y)
	add	X,@$XAP_AL
	st	X,@(H'0014,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0009
	ld	AL,@$XAP_UXL
	bsr	$_connectionConvertBdaddr
	ld	AL,@$XAP_UY
	add	AL,#H'0009
	st	AL,@(0,Y)
	ld	X,@(H'0014,Y)
	ld	AH,@(H'0006,X)
	ld	AL,@(H'0007,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0008,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(H'0004,Y)
	ld	AL,#H'0000
	st	AL,@(H'0005,Y)
	ld	AL,@(H'0009,X)
	st	AL,@(H'0006,Y)
	ld	X,#H'0000
	st	X,@(H'0007,Y)
	st	X,@(H'0008,Y)
	ld	X,@(H'000D,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	_inquirySendResult
	ld	AH,@(H'0010,Y)
?LBE15:
	add	AH,#H'0001
	st	AH,@(H'0010,Y)
	cmp	AH,@(H'0012,Y)
	bcs	?L68
?L73:
	ld	AH,@(H'0013,Y)
;	bsr	$_free
	DC	((256*4)+9)
	ld	AL,@(H'000F,Y)
?LBE14:
	add	AL,#H'0001
	st	AL,@(H'000F,Y)
	ld	X,@(H'000E,Y)
	ld	AL,@(H'0002,X)
	add	AL,#H'0002
	ld	AH,#H'0000
	udiv	#H'0003
	ld	AH,@(H'000F,Y)
	cmp	AH,@$XAP_AL
	bcs	?L69
?L71:
?LBE13:
?LBE_connectionHandleInquiryResultWithRssi:
	leave	#22
;.stabn	192,0,0,?LBB13
;.stabn	192,0,0,?LBB14
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;.stabn	224,0,0,?LBE14
;.stabn	224,0,0,?LBE13
$_connectionHandleExtendedInquiryResult:
	enter	#18
?LBB_connectionHandleExtendedInquiryResult:
	st	AH,@(H'000E,Y)
	st	AL,@(H'000F,Y)
?LBB16:
	add	AL,#H'000D
	ld	AH,#H'0001
	st	AH,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0009
	bsr	_inquiryParseEir
	st	AH,@(H'0010,Y)
	ld	AL,@(H'000F,Y)
	add	AL,#H'0003
	ld	AH,@$XAP_UY
	add	AH,#H'000A
	bsr	$_connectionConvertBdaddr
	ld	AL,@$XAP_UY
	add	AL,#H'000A
	st	AL,@(0,Y)
	ld	X,@(H'000F,Y)
	ld	AH,@(H'0009,X)
	ld	AL,@(H'000A,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'000B,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'0007,X)
	st	AL,@(H'0004,Y)
	ld	AL,#H'0000
	st	AL,@(H'0005,Y)
	ld	AL,@(H'000C,X)
	st	AL,@(H'0006,Y)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0007,Y)
	ld	AL,@(H'0010,Y)
	st	AL,@(H'0008,Y)
	ld	X,@(H'000E,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	_inquirySendResult
	tst	@(H'0009,Y)
	beq	?L79
	ld	AH,@(H'0010,Y)
;	bsr	$_free
	DC	((256*4)+9)
?L79:
?LBE16:
?LBE_connectionHandleExtendedInquiryResult:
	leave	#18
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
$_connectionHandleInquiryComplete:
	enter	#11
?LBB_connectionHandleInquiryComplete:
	st	AH,@(H'0009,Y)
	ld	AL,#H'0000
?LBB17:
	st	AL,@(0,Y)
	st	AL,@(H'0002,Y)
	st	AL,@(H'0001,Y)
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	st	AL,@(H'0005,Y)
	ld	AL,#H'7FFF
	st	AL,@(H'0006,Y)
	ld	X,#H'0000
	st	X,@(H'0007,Y)
	st	X,@(H'0008,Y)
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	ld	AL,#H'0000
	bsr	_inquirySendResult
	ld	AL,#H'0000
	ld	X,@(H'0009,Y)
	st	AL,@(0,X)
?LBB18:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0C05
	st	AL,@(0,X)
	ld	AL,#H'0009
	st	AL,@(H'0001,X)
	ld	AL,#H'0001
	st	AL,@(H'0002,X)
	ld	AL,#H'0000
	st	AL,@(H'0003,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE18:
?LBE17:
?LBE_connectionHandleInquiryComplete:
	leave	#11
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
$_connectionHandleInquiryCancel:
	enter	#10
?LBB_connectionHandleInquiryCancel:
	ld	X,@$XAP_AH
	st	AL,@H'fff8
?LBB19:
	tst	@(0,X)
	beq	?L83
	ld	AL,@(0,X)
	ld	X,@H'fff8
	cmp	AL,@(0,X)
	bne	?L82
?LBB20:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0402
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE20:
	bra	(?L82)
?L83:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	st	AL,@(H'0002,Y)
	st	AL,@(H'0001,Y)
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	st	AL,@(H'0005,Y)
	ld	AH,#H'7FFF
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	st	AL,@(H'0008,Y)
	ld	X,@H'fff8
	ld	AH,@(0,X)
	bsr	_inquirySendResult
?L82:
?LBE19:
?LBE_connectionHandleInquiryCancel:
	leave	#10
;.stabn	192,0,0,?LBB20
;.stabn	224,0,0,?LBE20
$_connectionHandleReadRemoteName:
	enter	#7
?LBB_connectionHandleReadRemoteName:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB21:
	tst	@(H'0001,X)
	bne	?L88
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
?LBB22:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0419
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0009
	st	AL,@(H'0001,X)
	add	AH,#H'0002
	ld	AL,@(H'0003,Y)
	add	AL,#H'0001
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0004,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE22:
	bra	(?L87)
?L88:
?LBB23:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0005
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'0005
	bsr	$_MessageSendConditionallyOnTask
?L87:
?LBE23:
?LBE21:
?LBE_connectionHandleReadRemoteName:
	leave	#7
;.stabn	192,0,0,?LBB22
;.stabn	224,0,0,?LBE22
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
_remoteNameComplete:
	enter	#5
?LBB_remoteNameComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB24:
	cmp	AH,#H'0000
	beq	?L91
	ld	AH,@(H'0007,Y)
?LBB25:
	add	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0005,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	tst	@(H'0002,Y)
	beq	?L92
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	bra	(?L93)
?L92:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0001
	bsr	$_BdaddrSetZero
?L93:
	ld	AL,@(H'0007,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0005,X)
	cmp	AL,#H'0000
	beq	?L94
	ld	AH,@$XAP_UXL
	add	AH,#H'0006
	st	AL,@(0,Y)
	ld	AL,@(H'0006,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AH,@(H'0006,Y)
;	bsr	$_free
	DC	((256*4)+9)
	bra	(?L95)
?L94:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0006,X)
?L95:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7006
	bsr	$_MessageSend
?LBE25:
	bra	(?L90)
?L91:
	tst	@(H'0007,Y)
	beq	?L90
	ld	AH,@(H'0006,Y)
;	bsr	$_free
	DC	((256*4)+9)
?L90:
?LBE24:
?LBE_remoteNameComplete:
	leave	#5
;.stabn	192,0,0,?LBB25
;.stabn	224,0,0,?LBE25
$_connectionHandleRemoteNameComplete:
	enter	#13
?LBB_connectionHandleRemoteNameComplete:
	st	AH,@(H'0007,Y)
	st	AL,@(H'0008,Y)
?LBB26:
	add	AL,#H'0003
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0008,Y)
	tst	@(H'0002,X)
	bne	?L99
	tst	@(H'0007,X)
	beq	?L99
?LBB27:
	ld	AH,@(H'0007,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'000B,Y)
	ld	AL,#H'0000
	st	AL,@(H'0009,Y)
?L105:
	ld	X,@(H'000B,Y)
	add	X,@(H'0009,Y)
	tst	@(0,X)
	beq	?L101
	ld	AL,@(H'0009,Y)
	add	AL,#H'0001
	st	AL,@(H'0009,Y)
	cmp	AL,#H'001E
	bcz	?L105
?L101:
	ld	X,@(H'000B,Y)
	add	X,@(H'0009,Y)
	ld	AL,#H'0000
	st	AL,@(0,X)
	ld	AL,#H'0001
	st	AL,@(H'000A,Y)
?L111:
	ld	X,@(H'0008,Y)
	add	X,@(H'000A,Y)
	tst	@(H'0007,X)
	beq	?L108
	ld	AH,@(H'0007,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
;	bsr	$_free
	DC	((256*4)+9)
?L108:
	ld	AL,@(H'000A,Y)
	add	AL,#H'0001
	st	AL,@(H'000A,Y)
	cmp	AL,#H'0007
	bcz	?L111
	ld	X,@(H'0008,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@(0,Y)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0009,Y)
	bra	(?L116)
?L99:
	ld	X,@(H'0008,Y)
?LBE27:
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
?L116:
	st	AL,@(H'0002,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	bsr	_remoteNameComplete
	ld	AL,#H'0000
	ld	X,@(H'0007,Y)
	st	AL,@(H'0001,X)
?LBE26:
?LBE_connectionHandleRemoteNameComplete:
	leave	#13
;.stabn	192,0,0,?LBB26
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
;.stabn	224,0,0,?LBE26
$_connectionHandleReadLocalName:
	enter	#6
?LBB_connectionHandleReadLocalName:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB28:
	tst	@(H'0001,X)
	bne	?L120
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
?LBB29:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0C14
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE29:
	bra	(?L119)
?L120:
?LBB30:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'0006
	bsr	$_MessageSendConditionallyOnTask
?L119:
?LBE30:
?LBE28:
?LBE_connectionHandleReadLocalName:
	leave	#6
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
;.stabn	192,0,0,?LBB30
;.stabn	224,0,0,?LBE30
_localNameComplete:
	enter	#5
?LBB_localNameComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB31:
	cmp	AH,#H'0000
	beq	?L123
	ld	AH,@(H'0006,Y)
?LBB32:
	add	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0001,X)
	cmp	AL,#H'0000
	beq	?L124
	add	AH,#H'0002
	st	AL,@(0,Y)
	ld	AL,@(H'0005,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AH,@(H'0005,Y)
;	bsr	$_free
	DC	((256*4)+9)
	bra	(?L125)
?L124:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
?L125:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7007
	bsr	$_MessageSend
?LBE32:
	bra	(?L122)
?L123:
	tst	@(H'0006,Y)
	beq	?L122
	ld	AH,@(H'0005,Y)
;	bsr	$_free
	DC	((256*4)+9)
?L122:
?LBE31:
?LBE_localNameComplete:
	leave	#5
;.stabn	192,0,0,?LBB32
;.stabn	224,0,0,?LBE32
$_connectionHandleLocalNameComplete:
	enter	#8
?LBB_connectionHandleLocalNameComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AL
?LBB33:
	tst	@(H'0002,X)
	bne	?L129
	tst	@(H'0003,X)
	beq	?L129
?LBB34:
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0006,Y)
	ld	AH,#H'0000
	st	AH,@(H'0004,Y)
?L135:
	ld	X,@(H'0006,Y)
	add	X,@(H'0004,Y)
	tst	@(0,X)
	beq	?L131
	ld	AL,@(H'0004,Y)
	add	AL,#H'0001
	st	AL,@(H'0004,Y)
	cmp	AL,#H'001E
	bcz	?L135
?L131:
	ld	X,@(H'0006,Y)
	add	X,@(H'0004,Y)
	ld	AL,#H'0000
	st	AL,@(0,X)
	ld	AH,#H'0001
	st	AH,@(H'0005,Y)
?L141:
	ld	X,@(H'0003,Y)
	add	X,@(H'0005,Y)
	tst	@(H'0003,X)
	beq	?L138
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
;	bsr	$_free
	DC	((256*4)+9)
?L138:
	ld	AL,@(H'0005,Y)
	add	AL,#H'0001
	st	AL,@(H'0005,Y)
	cmp	AL,#H'0007
	bcz	?L141
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	AH,@(H'0006,Y)
	st	AH,@(0,Y)
	ld	AH,@(H'0004,Y)
	bra	(?L146)
?L129:
	ld	X,@(H'0003,Y)
?LBE34:
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	AH,#H'0000
	st	AH,@(0,Y)
?L146:
	st	AH,@(H'0001,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	bsr	_localNameComplete
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(H'0001,X)
?LBE33:
?LBE_connectionHandleLocalNameComplete:
	leave	#8
;.stabn	192,0,0,?LBB34
;.stabn	224,0,0,?LBE34
$_connectionHandleWriteInquiryTx:
	enter	#1
?LBB_connectionHandleWriteInquiryTx:
	ld	X,@$XAP_AH
?LBB35:
	tst	@(H'0002,X)
	beq	?L149
?LBB36:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'7021
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0003
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L149:
?LBE36:
?LBE35:
?LBE_connectionHandleWriteInquiryTx:
	leave	#1
;.stabn	192,0,0,?LBB36
;.stabn	224,0,0,?LBE36
$_connectionHandleReadInquiryTx:
	enter	#5
?LBB_connectionHandleReadInquiryTx:
	ld	X,@$XAP_AH
	st	AL,@(H'0002,Y)
?LBB37:
	tst	@(H'0002,X)
	beq	?L152
	ld	X,@$XAP_AL
	tst	@(0,X)
	bne	?L153
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
?LBB38:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'7020
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE38:
	bra	(?L151)
?L153:
?LBB39:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0008
	bsr	$_MessageSendConditionallyOnTask
?LBE39:
	bra	(?L151)
?L152:
?LBB40:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0011
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7008
	bsr	$_MessageSend
?L151:
?LBE40:
?LBE37:
?LBE_connectionHandleReadInquiryTx:
	leave	#5
;.stabn	192,0,0,?LBB38
;.stabn	224,0,0,?LBE38
;.stabn	192,0,0,?LBB39
;.stabn	224,0,0,?LBE39
;.stabn	192,0,0,?LBB40
;.stabn	224,0,0,?LBE40
$_connectionHandleReadInquiryTxComplete:
	enter	#5
?LBB_connectionHandleReadInquiryTxComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB41:
	tst	@(0,X)
	beq	?L157
?LBB42:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7008
	bsr	$_MessageSend
?L157:
?LBE42:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?LBE41:
?LBE_connectionHandleReadInquiryTxComplete:
	leave	#5
;.stabn	192,0,0,?LBB42
;.stabn	224,0,0,?LBE42
$_connectionHandleWriteIacLapRequest:
	enter	#9
?LBB_connectionHandleWriteIacLapRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB43:
	tst	@(H'0002,X)
	bne	?L159
?LBB44:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0C3A
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0009
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0003
	ld	AL,#H'0006
	st	AL,@(0,Y)
	ld	AL,#H'0000
	bsr	$_memset
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0002,X)
	add	AH,@$XAP_AH
;	bsr	$_malloc
	DC	((256*3)+9)
	ld	X,@(H'0004,Y)
	st	AH,@(H'0003,X)
	st	AH,@H'fff8
	ld	AH,#H'0000
	st	AH,@H'fff9
	ld	X,@(H'0003,Y)
	cmp	AH,@(H'0001,X)
	bcc	?L167
?L164:
	ld	X,@H'fff9
	add	X,@H'fff9
	ld	AH,@H'fff8
	add	AH,@$XAP_UXL
	st	AH,@(H'0006,Y)
	add	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0006,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	ld	AL,#H'0001
	add	AL,@H'fff9
	st	AL,@H'fff9
	ld	X,@(H'0003,Y)
	cmp	AL,@(H'0001,X)
	bcs	?L164
?L167:
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0004,Y)
	st	AH,@(H'0003,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE44:
	bra	(?L158)
?L159:
	ld	X,@(H'0003,Y)
?LBB45:
	ld	AH,@(H'0001,X)
	add	AH,@$XAP_AH
	add	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	add	AL,@$XAP_AL
	add	AL,#H'0004
	st	AL,@(0,Y)
	ld	AL,@$XAP_UXL
;	bsr	$_memmove
	DC	((256*6)+9)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	st	AL,@(H'0001,Y)
	ld	AL,#H'002F
	bsr	$_MessageSendConditionallyOnTask
?L158:
?LBE45:
?LBE43:
?LBE_connectionHandleWriteIacLapRequest:
	leave	#9
;.stabn	192,0,0,?LBB44
;.stabn	224,0,0,?LBE44
;.stabn	192,0,0,?LBB45
;.stabn	224,0,0,?LBE45
$_connectionHandleWriteIacLapComplete:
	enter	#4
?LBB_connectionHandleWriteIacLapComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB46:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	bne	?L171
	ld	AL,#H'0000
	bra	(?L173)
?L171:
	ld	AL,#H'0001
?L173:
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0002,X)
	ld	AL,#H'703D
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0002,X)
?LBE46:
?LBE_connectionHandleWriteIacLapComplete:
	leave	#4
;.stabn	192,0,0,?LBB46
;.stabn	224,0,0,?LBE46
$_connectionHandleWriteInquiryModeRequest:
	enter	#7
?LBB_connectionHandleWriteInquiryModeRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB47:
	tst	@(0,X)
	bne	?L175
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
?LBB48:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'700B
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0003
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	bsr	$_connectionConvertInquiryMode_t
	ld	X,@(H'0004,Y)
	st	AH,@(H'0002,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE48:
	bra	(?L174)
?L175:
?LBB49:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0005,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0009
	bsr	$_MessageSendConditionallyOnTask
?L174:
?LBE49:
?LBE47:
?LBE_connectionHandleWriteInquiryModeRequest:
	leave	#7
;.stabn	192,0,0,?LBB48
;.stabn	224,0,0,?LBE48
;.stabn	192,0,0,?LBB49
;.stabn	224,0,0,?LBE49
$_connectionHandleWriteInquiryModeComplete:
	enter	#4
?LBB_connectionHandleWriteInquiryModeComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB50:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	beq	?L178
	ld	AL,#H'0001
?L178:
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'703E
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?LBE50:
?LBE_connectionHandleWriteInquiryModeComplete:
	leave	#4
;.stabn	192,0,0,?LBB50
;.stabn	224,0,0,?LBE50
$_connectionHandleReadInquiryModeRequest:
	enter	#6
?LBB_connectionHandleReadInquiryModeRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB51:
	tst	@(0,X)
	bne	?L180
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
?LBB52:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'700A
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE52:
	bra	(?L179)
?L180:
?LBB53:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'000A
	bsr	$_MessageSendConditionallyOnTask
?L179:
?LBE53:
?LBE51:
?LBE_connectionHandleReadInquiryModeRequest:
	leave	#6
;.stabn	192,0,0,?LBB52
;.stabn	224,0,0,?LBE52
;.stabn	192,0,0,?LBB53
;.stabn	224,0,0,?LBE53
$_connectionHandleReadInquiryModeComplete:
	enter	#5
?LBB_connectionHandleReadInquiryModeComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB54:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	beq	?L183
	ld	AL,#H'0001
?L183:
	ld	X,@(H'0003,Y)
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0003,X)
	bsr	$_connectionConvertInquiryMode
	ld	X,@(H'0003,Y)
	st	AH,@(H'0001,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'703F
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?LBE54:
?LBE_connectionHandleReadInquiryModeComplete:
	leave	#5
;.stabn	192,0,0,?LBB54
;.stabn	224,0,0,?LBE54
$_connectionHandleWriteEirDataRequest:
	enter	#11
?LBB_connectionHandleWriteEirDataRequest:
	ld	X,@$XAP_AH
	st	AL,@(H'0001,Y)
?LBB55:
	ld	AH,#H'0000
	st	AH,@(H'0004,Y)
	ld	AL,@(H'0002,X)
	cmp	AL,#H'0002
	bne	?L184
?LBB56:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'7018
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'000B
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	ld	X,@(H'0001,X)
	st	X,@(H'0005,Y)
	cmp	X,#H'00F0
	bcz	?L186
	ld	AH,#H'00F0
	st	AH,@(H'0005,Y)
?L186:
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	ld	AH,@(H'0005,Y)
	lsr	#H'0005
	ld	AL,#H'0000
	cmp	AL,@$XAP_AH
	bcc	?L199
?L191:
	ld	AH,#H'0020
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	ld	X,@(H'0001,Y)
	add	AL,@(H'0002,X)
	ld	AH,#H'0020
	st	AH,@(0,Y)
	ld	AH,@(H'0003,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AH,@(H'0004,Y)
	add	AH,#H'0020
	st	AH,@(H'0004,Y)
	ld	AL,@(H'0006,Y)
	add	AL,@(H'0002,Y)
	st	AL,@(H'0007,Y)
	ld	AH,@(H'0003,Y)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0007,Y)
	st	AH,@(H'0003,X)
	ld	AH,@(H'0002,Y)
	add	AH,#H'0001
	st	AH,@(H'0002,Y)
	ld	AH,@(H'0005,Y)
	lsr	#H'0005
	ld	AL,@(H'0002,Y)
	cmp	AL,@$XAP_AH
	bcs	?L191
?L199:
	ld	AH,@(H'0005,Y)
	and	AH,#H'001F
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	beq	?L192
	ld	AH,#H'0020
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	ld	X,@(H'0001,Y)
	add	AL,@(H'0002,X)
	ld	AH,@(H'0008,Y)
	st	AH,@(0,Y)
	ld	AH,@(H'0003,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AL,#H'0020
	sub	AL,@(H'0008,Y)
	ld	AH,@(H'0003,Y)
	add	AH,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	bsr	$_memset
	ld	AL,@(H'0006,Y)
	add	AL,@(H'0002,Y)
	st	AL,@(H'0009,Y)
	ld	AH,@(H'0003,Y)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0009,Y)
	st	AH,@(H'0003,X)
	ld	AH,@(H'0002,Y)
	add	AH,#H'0001
	st	AH,@(H'0002,Y)
?L192:
	ld	AL,@(H'0002,Y)
	cmp	AL,#(H'0001+H'0007)
	bcc	?L201
	ld	AL,#H'0000
?L197:
	ld	X,@(H'0006,Y)
	add	X,@(H'0002,Y)
	st	AL,@(H'0003,X)
	ld	AH,@(H'0002,Y)
	add	AH,#H'0001
	st	AH,@(H'0002,Y)
	cmp	AH,#H'0007
	bcz	?L197
?L201:
	ld	AH,@(H'0006,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L184:
?LBE56:
?LBE55:
?LBE_connectionHandleWriteEirDataRequest:
	leave	#11
;.stabn	192,0,0,?LBB55
;.stabn	192,0,0,?LBB56
;.stabn	224,0,0,?LBE56
;.stabn	224,0,0,?LBE55
$_connectionHandleReadEirDataRequest:
	enter	#6
?LBB_connectionHandleReadEirDataRequest:
	ld	X,@$XAP_AH
	st	AL,@(H'0002,Y)
?LBB57:
	ld	X,@(H'0002,X)
	st	X,@(H'0003,Y)
	cmp	X,#H'0002
	bne	?L208
	ld	X,@$XAP_AL
	tst	@(0,X)
	bne	?L209
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
?LBB58:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'7017
	st	AL,@(0,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE58:
	bra	(?L207)
?L209:
?LBB59:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'000C
	bsr	$_MessageSendConditionallyOnTask
?LBE59:
	bra	(?L207)
?L208:
?LBB60:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0011
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	st	AL,@(H'0002,X)
	st	AL,@(H'0003,X)
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7040
	bsr	$_MessageSend
?L207:
?LBE60:
?LBE57:
?LBE_connectionHandleReadEirDataRequest:
	leave	#6
;.stabn	192,0,0,?LBB58
;.stabn	224,0,0,?LBE58
;.stabn	192,0,0,?LBB59
;.stabn	224,0,0,?LBE59
;.stabn	192,0,0,?LBB60
;.stabn	224,0,0,?LBE60
$_connectionHandleReadEirDataComplete:
	enter	#7
?LBB_connectionHandleReadEirDataComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB61:
	tst	@(0,X)
	beq	?L214
?LBB62:
	ld	AH,#H'0000
	st	AH,@(H'0001,Y)
	add	AL,#H'0004
	st	AH,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	_inquiryParseEir
	st	AH,@(H'0004,Y)
	ld	AH,@(H'0001,Y)
	add	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0005,Y)
	st	AH,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0002,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0003
	ld	AL,@(H'0001,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7040
	bsr	$_MessageSend
	ld	AH,@(H'0004,Y)
;	bsr	$_free
	DC	((256*4)+9)
?L214:
?LBE62:
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
?LBE61:
?LBE_connectionHandleReadEirDataComplete:
	leave	#7
;.stabn	192,0,0,?LBB62
;.stabn	224,0,0,?LBE62
	ENDMOD

;# Function pattern *movqi2 used[0] = 402 used[1] = 48 total = 450
;# Function pattern *movqi3 used[0] = 424 total = 424
;# Function pattern *movqi8 used[0] = 20 total = 20
;# Function pattern *movhi used[2] = 10 used[3] = 9 total = 19
;# Function pattern *addqi0 used[0] = 10 total = 10
;# Function pattern *addqi2 used[0] = 71 used[2] = 3 total = 74
;# Function pattern *andqi3 used[0] = 1 total = 1
;# Function pattern *subqi3 used[0] = 3 total = 3
;# Function pattern *udivqi3_const used[0] = 4 total = 4
;# Function pattern *mulqi3_const used[0] = 2 total = 2
;# Function pattern *lshrqi3 used[0] = 2 total = 2
;# Function pattern *zero_extendqihi2_1 used[0] = 4 total = 4
;# Function pattern jump used[0] = 23 total = 23
;# Function pattern *call1 used[0] = 57 total = 57
;# Function pattern *call_value1 used[0] = 79 total = 79
;# Function pattern *movstrqi2 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 6 used[1] = 39 total = 45
;# Function pattern movstrqi+4 used[1] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 26 total = 26
;# Function pattern movstrqi+6 used[0] = 1 total = 1
	MODULE	dm_link_policy_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_sendRoleCfmToClient:
	enter	#4
?LBB_sendRoleCfmToClient:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	cmp	AH,#H'0000
	beq	?L1
?LBB3:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7001
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_sendRoleCfmToClient:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
_sendSetRoleRequest:
	enter	#7
?LBB_sendSetRoleRequest:
	st	AL,@(H'0004,Y)
?LBB4:
	ld	AL,@$XAP_UY
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L4
?LBB5:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'080B
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0002
	ld	AL,@$XAP_UY
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0004,Y)
	bsr	$_connectionConvertHciRole_t
	ld	X,@(H'0005,Y)
	st	AH,@(H'0006,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	AH,#H'0001
	bra	(?L3)
?L4:
?LBE5:
	ld	AH,#H'0000
?L3:
?LBE4:
?LBE_sendSetRoleRequest:
	leave	#7
;.stabn	192,0,0,?LBB4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;.stabn	224,0,0,?LBE4
_sendGetRoleRequest:
	enter	#6
?LBB_sendGetRoleRequest:
?LBB6:
	ld	AL,@$XAP_UY
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L7
?LBB7:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0809
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0004,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	AH,#H'0001
	bra	(?L6)
?L7:
?LBE7:
	ld	AH,#H'0000
?L6:
?LBE6:
?LBE_sendGetRoleRequest:
	leave	#6
;.stabn	192,0,0,?LBB6
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;.stabn	224,0,0,?LBE6
_setLinkSupervisionTimeout:
	enter	#4
?LBB_setLinkSupervisionTimeout:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB8:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'0C37
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0008
	st	AL,@(H'0001,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	add	AH,#H'0003
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AL,@(H'0001,Y)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0007,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE8:
?LBE_setLinkSupervisionTimeout:
	leave	#4
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
_processPowerTable:
	enter	#7
?LBB_processPowerTable:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB9:
	smult	#H'0006
	st	AL,@(H'0004,Y)
	ld	AH,@$XAP_AL
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0007,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
?LBB10:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'7900
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(H'0001,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AL,@(H'0002,Y)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0005,X)
	ld	AH,@(H'0003,Y)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0005,Y)
	st	AH,@(H'0006,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE10:
?LBE9:
?LBE_processPowerTable:
	leave	#7
;.stabn	192,0,0,?LBB9
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;.stabn	224,0,0,?LBE9
$_connectionHandleLinkPolicySetRoleReq:
	enter	#6
?LBB_connectionHandleLinkPolicySetRoleReq:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB11:
	tst	@(0,X)
	bne	?L12
	ld	X,@$XAP_AL
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	bsr	_sendSetRoleRequest
	cmp	AH,#H'0000
	bne	?L13
	bsr	$_connectionGetAppTask
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0002
	bsr	_sendRoleCfmToClient
	bra	(?L11)
?L13:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	bra	(?L11)
?L12:
?LBB12:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0003
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0059
	bsr	$_MessageSendConditionallyOnTask
?L11:
?LBE12:
?LBE11:
?LBE_connectionHandleLinkPolicySetRoleReq:
	leave	#6
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
$_connectionHandleLinkPolicyGetRoleReq:
	enter	#6
?LBB_connectionHandleLinkPolicyGetRoleReq:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB13:
	tst	@(0,X)
	bne	?L17
	ld	X,@$XAP_AL
	ld	AH,@(H'0001,X)
	bsr	_sendGetRoleRequest
	cmp	AH,#H'0000
	bne	?L18
	bsr	$_connectionGetAppTask
	ld	AL,#H'0002
	st	AL,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0002
	bsr	_sendRoleCfmToClient
	bra	(?L16)
?L18:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	bra	(?L16)
?L17:
?LBB14:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0004,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'005A
	bsr	$_MessageSendConditionallyOnTask
?L16:
?LBE14:
?LBE13:
?LBE_connectionHandleLinkPolicyGetRoleReq:
	leave	#6
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
$_connectionHandleDmSwitchRoleComplete:
	enter	#13
?LBB_connectionHandleDmSwitchRoleComplete:
	st	AL,@(H'0006,Y)
	ld	X,@$XAP_AL
?LBB15:
	tst	@(0,X)
	beq	?L22
	bsr	$_connectionGetAppTask
	st	AH,@(H'0007,Y)
	ld	X,@(H'000D,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@(H'0008,Y)
	ld	X,@(H'000D,Y)
	ld	AH,@(H'0007,X)
	bsr	$_connectionConvertHciRole
	st	AH,@(0,Y)
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0007,Y)
	ld	AL,@(H'0008,Y)
	bsr	_sendRoleCfmToClient
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	bra	(?L21)
?L22:
?LBB16:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'000B,Y)
	ld	X,@(H'000D,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@(H'0009,Y)
	ld	X,@(H'000D,Y)
	ld	AH,@(H'0007,X)
	bsr	$_connectionConvertHciRole
	st	AH,@(H'000A,Y)
	ld	AL,@(H'000D,Y)
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0009,Y)
	ld	X,@(H'000B,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	ld	X,@$XAP_AH
	ld	AL,@(H'0001,X)
	ld	X,@(H'000B,Y)
	st	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	ld	X,@(H'000B,Y)
	st	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	ld	AL,@(H'0003,X)
	ld	X,@(H'000B,Y)
	st	AL,@(H'0003,X)
	bsr	$_connectionGetAppTask
	ld	AL,@(H'000B,Y)
	st	AL,@(0,Y)
	ld	AL,#H'7002
	bsr	$_MessageSend
?L21:
?LBE16:
?LBE15:
?LBE_connectionHandleDmSwitchRoleComplete:
	leave	#13
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
$_connectionHandleRoleDiscoveryComplete:
	enter	#7
?LBB_connectionHandleRoleDiscoveryComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
	tst	@(0,X)
	beq	?L24
	bsr	$_connectionGetAppTask
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0007,X)
	bsr	$_connectionConvertHciRole
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0004,Y)
	ld	AL,@(H'0005,Y)
	bsr	_sendRoleCfmToClient
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
?L24:
?LBE_connectionHandleRoleDiscoveryComplete:
	leave	#7
$_connectionHandleSetLinkSupervisionTimeoutReq:
	enter	#6
?LBB_connectionHandleSetLinkSupervisionTimeoutReq:
	st	AH,@(H'0004,Y)
	ld	X,@$XAP_AH
?LBB17:
	ld	AH,@(0,X)
	ld	AL,@$XAP_UY
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L26
	ld	AH,@$XAP_UY
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0001,X)
	bsr	_setLinkSupervisionTimeout
?L26:
?LBE17:
?LBE_connectionHandleSetLinkSupervisionTimeoutReq:
	leave	#6
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
$_connectionHandleLinkSupervisionTimeoutInd:
	enter	#4
?LBB_connectionHandleLinkSupervisionTimeoutInd:
	st	AH,@(H'0001,Y)
?LBB18:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0004,X)
	bsr	$_connectionGetAppTask
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	AL,#H'7003
	bsr	$_MessageSend
?LBE18:
?LBE_connectionHandleLinkSupervisionTimeoutInd:
	leave	#4
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
$_connectionHandleSetLinkPolicyReq:
	enter	#7
?LBB_connectionHandleSetLinkPolicyReq:
	st	AH,@(H'0005,Y)
	ld	X,@$XAP_AH
?LBB19:
	ld	AH,@(0,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L29
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	AL,@(H'0001,X)
	bsr	_processPowerTable
?L29:
?LBE19:
?LBE_connectionHandleSetLinkPolicyReq:
	leave	#7
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
$_connectionLinkPolicyHandleWritePowerStatesCfm:
	enter	#1
?LBB_connectionLinkPolicyHandleWritePowerStatesCfm:
	ld	X,@$XAP_AH
	tst	@(H'0005,X)
	beq	?L31
	ld	AL,@(H'0005,X)
	cmp	AL,#H'0002
	beq	?L31
;	bsr	$_Panic
	DC	((256*14)+9)
?L31:
?LBE_connectionLinkPolicyHandleWritePowerStatesCfm:
	leave	#1
$_connectionHandleSetSniffSubRatePolicyReq:
	enter	#8
?LBB_connectionHandleSetSniffSubRatePolicyReq:
	st	AH,@(H'0004,Y)
	st	AL,@(H'0005,Y)
	ld	X,@$XAP_AL
?LBB20:
	ld	AH,@(0,X)
	ld	AL,@$XAP_UY
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L34
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0002,X)
	cmp	AL,#H'0002
	bne	?L34
?LBB21:
	ld	AH,#H'000A
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'7016
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'000A
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0008,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0009,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L34:
?LBE21:
?LBE20:
?LBE_connectionHandleSetSniffSubRatePolicyReq:
	leave	#8
;.stabn	192,0,0,?LBB20
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
;.stabn	224,0,0,?LBE20
$_connectionHandleSniffSubRatingInd:
	enter	#4
?LBB_connectionHandleSniffSubRatingInd:
	st	AH,@(H'0001,Y)
?LBB22:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0002,Y)
	st	AH,@(H'0004,X)
	ld	AL,@(H'0001,Y)
	add	AL,#H'0003
	ld	AH,@$XAP_UXL
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0005,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0006,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0009,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'000A,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0008,X)
	bsr	$_connectionGetAppTask
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	AL,#H'7004
	bsr	$_MessageSend
?LBE22:
?LBE_connectionHandleSniffSubRatingInd:
	leave	#4
;.stabn	192,0,0,?LBB22
;.stabn	224,0,0,?LBE22
	ENDMOD

;# Function pattern *movqi2 used[0] = 125 used[1] = 12 total = 137
;# Function pattern *movqi3 used[0] = 139 total = 139
;# Function pattern *movhi used[2] = 1 used[3] = 1 total = 2
;# Function pattern *addqi0 used[0] = 4 total = 4
;# Function pattern *addqi2 used[0] = 8 total = 8
;# Function pattern *mulqi3_const used[0] = 1 total = 1
;# Function pattern jump used[0] = 7 total = 7
;# Function pattern *call1 used[0] = 26 total = 26
;# Function pattern *call_value1 used[0] = 38 total = 38
;# Function pattern *movstrqi2 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 8 used[1] = 5 total = 13
;# Function pattern movstrqi+5 used[0] = 2 total = 2
	MODULE	dm_security_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_aclOpen:
	enter	#3
?LBB_aclOpen:
	st	AH,@(0,Y)
?LBB2:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2805
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE2:
?LBE_aclOpen:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
_aclClose:
	enter	#3
?LBB_aclClose:
	st	AH,@(0,Y)
?LBB3:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2806
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE3:
?LBE_aclClose:
	leave	#3
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
_startBonding:
	enter	#3
?LBB_startBonding:
	st	AH,@(0,Y)
?LBB4:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2E12
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE4:
?LBE_startBonding:
	leave	#3
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
_cancelBonding:
	enter	#4
?LBB_cancelBonding:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB5:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'2E13
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AL,@(H'0001,Y)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0005,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE5:
?LBE_cancelBonding:
	leave	#4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
_connectionSendAuthenticateCfm:
	enter	#4
?LBB_connectionSendAuthenticateCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB6:
	cmp	AH,#H'0000
	beq	?L5
?LBB7:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0006,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'701B
	bsr	$_MessageSend
?L5:
?LBE7:
?LBE6:
?LBE_connectionSendAuthenticateCfm:
	leave	#4
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
_handleInternalSetSecurityModeCfm:
	enter	#3
?LBB_handleInternalSetSecurityModeCfm:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
	tst	@(H'0003,X)
	beq	?L7
	ld	X,@$XAP_AL
	tst	@(H'0004,X)
	beq	?L7
	ld	AL,@$XAP_AH
	add	AL,#H'0006
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_AL
	bsr	$_BdaddrIsZero
	cmp	AH,#H'0000
	bne	?L10
	ld	AH,@(H'0001,Y)
	bsr	_aclOpen
	bra	(?L7)
?L10:
	ld	AL,#H'0000
	ld	X,@(0,Y)
	st	AL,@(H'0003,X)
?L7:
?LBE_handleInternalSetSecurityModeCfm:
	leave	#3
_endAuthentication:
	enter	#6
?LBB_endAuthentication:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	cmp	AL,#H'0000
	beq	?L13
	ld	AL,@$XAP_AH
	add	AL,#H'0006
	ld	AH,@(H'0004,Y)
	st	AH,@(0,Y)
	ld	AH,#H'0000
	st	AH,@(H'0001,Y)
	st	AH,@(H'0002,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0003,X)
	bsr	_connectionSendAuthenticateCfm
?L13:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0001
	bne	?L14
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	and	AL,#H'00FF
	cmp	AL,#H'0004
	beq	?L15
	ld	AH,@$XAP_UXL
	add	AH,#H'0006
	bsr	_aclClose
	bra	(?L17)
?L15:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0006
	ld	AL,#H'0000
	bsr	_cancelBonding
	bra	(?L17)
?L14:
	bsr	$_connectionGetCmTask
	ld	AL,#H'0011
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
?L17:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0006
	bsr	$_BdaddrSetZero
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	and	AL,#H'00FF
	cmp	AL,#H'0004
	beq	?L18
	bsr	$_connectionGetCmTask
	st	AH,@H'fff8
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	and	AL,#H'00FF
	st	AL,@(-1,Y)
	ld	AH,@(H'0001,X)
	lsr	#H'0008
	st	AH,@(0,Y)
	ld	AH,@H'fff8
	ld	AL,@(-1,Y)
	bsr	$_ConnectionSmSetSecurityMode
	bra	(?L12)
?L18:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
?L12:
?LBE_endAuthentication:
	leave	#6
_sendEncryptionChangeInd:
	enter	#4
?LBB_sendEncryptionChangeInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
	cmp	AH,#H'0000
	beq	?L23
?LBB9:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7028
	bsr	$_MessageSend
?L23:
?LBE9:
?LBE8:
?LBE_sendEncryptionChangeInd:
	leave	#4
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
_sendAclOpenedIndToClient:
	enter	#5
?LBB_sendAclOpenedIndToClient:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB10:
	bsr	$_connectionGetMsgFilter
	ld	X,@$XAP_AH
	tst	@(H'0001,Y)
	beq	?L25
	ld	AL,@(0,X)
	and	AL,#H'0001
	cmp	AL,#H'0000
	beq	?L25
?LBB11:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0007,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7018
	bsr	$_MessageSend
?L25:
?LBE11:
?LBE10:
?LBE_sendAclOpenedIndToClient:
	leave	#5
;.stabn	192,0,0,?LBB10
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;.stabn	224,0,0,?LBE10
_handleGenericAclClosedInd:
	enter	#9
?LBB_handleGenericAclClosedInd:
	st	AH,@(H'0005,Y)
	st	AL,@(H'0006,Y)
?LBB12:
	bsr	$_connectionGetMsgFilter
	st	AH,@(H'0007,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	AL,@(H'0009,Y)
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0006,Y)
	tst	@(H'0003,X)
	beq	?L28
	ld	AH,@$XAP_UXL
	add	AH,#H'0006
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L28
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	and	AL,#H'00FF
	cmp	AL,#H'0004
	beq	?L28
	ld	AH,@$XAP_UXL
	ld	AL,#H'0000
	bsr	_endAuthentication
?L28:
	tst	@(H'0005,Y)
	beq	?L27
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	and	AL,#H'0001
	cmp	AL,#H'0000
	beq	?L27
?LBB13:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0004,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0005,Y)
	ld	AL,#H'7019
	bsr	$_MessageSend
?L27:
?LBE13:
?LBE12:
?LBE_handleGenericAclClosedInd:
	leave	#9
;.stabn	192,0,0,?LBB12
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;.stabn	224,0,0,?LBE12
$_connectionHandleSmAddDeviceCfm:
	enter	#2
?LBB_connectionHandleSmAddDeviceCfm:
	ld	X,@$XAP_AL
	tst	@(H'0006,X)
	beq	?L33
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	lsr	#H'0008
	ld	AL,@$XAP_AH
	and	AL,#H'000F
	add	AL,#H'0001
	ld	AH,@$XAP_AL
	and	AH,#H'000F
	st	AH,@(0,Y)
	and	AL,#H'000F
	asl	#H'0008
	ld	AH,@(0,X)
	and	AH,#-H'0F01
	or	AH,@$XAP_AL
	st	AH,@(0,X)
	lsr	#H'000C
	ld	AL,@(0,Y)
	cmp	AL,@$XAP_AH
	bne	?L33
	ld	AH,#H'0080
	bsr	$_connectionSendInternalInitCfm
?L33:
?LBE_connectionHandleSmAddDeviceCfm:
	leave	#2
$_connectionHandleSmAddDeviceCfmReady:
	enter	#8
?LBB_connectionHandleSmAddDeviceCfmReady:
	st	AH,@(H'0005,Y)
	st	AL,@(H'0006,Y)
	ld	X,@$XAP_AH
?LBB14:
	tst	@(H'0005,X)
	beq	?L38
?LBB15:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
?LBB16:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	X,@$XAP_AH
	ld	AL,@(H'0001,X)
	ld	X,@H'fff8
	st	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	st	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AL,@(H'0004,X)
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	tst	@(H'0006,X)
	bne	?L39
	ld	AL,#H'0001
?L39:
	ld	X,@H'fff8
	st	AL,@(0,X)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0005,X)
	ld	AL,#H'7043
	bsr	$_MessageSend
?L38:
?LBE16:
?LBE15:
	ld	AL,#H'0000
	ld	X,@(H'0005,Y)
	st	AL,@(H'0005,X)
?LBE14:
?LBE_connectionHandleSmAddDeviceCfmReady:
	leave	#8
;.stabn	192,0,0,?LBB15
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
;.stabn	224,0,0,?LBE15
$_connectionHandleSmAccessInd:
	enter	#7
?LBB_connectionHandleSmAccessInd:
	st	AH,@(H'0004,Y)
	st	AL,@(H'0005,Y)
?LBB17:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0006,X)
	ld	AL,@(H'0007,X)
	cmp	AH,#H'0000
	bne	?L42
	cmp	AL,#H'0000
	bne	?L42
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0009,X)
	cmp	AH,#H'0000
	bne	?L48
	cmp	AL,#H'0001
	beq	?L40
?L48:
?L42:
	ld	AL,@(H'0004,Y)
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L40
	bsr	$_connectionGetCmTask
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	cmp	AL,@$XAP_AH
	bne	?L40
	bsr	$_connectionGetCmTask
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0001,X)
	cmp	AL,@$XAP_AH
	bne	?L44
	ld	AL,#H'0000
	bra	(?L46)
?L44:
	bsr	$_connectionGetCmTask
	ld	AL,#H'003F
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	AL,#H'0000
	ld	X,@(H'0004,Y)
?L46:
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	bsr	$_ConnectionSdpCloseSearchRequest
?L40:
?LBE17:
?LBE_connectionHandleSmAccessInd:
	leave	#7
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
$_connectionHandleSmLinkKeyReqInd:
	enter	#5
?LBB_connectionHandleSmLinkKeyReqInd:
	ld	AL,@$XAP_AH
?LBB18:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	bsr	$_connectionConvertBdaddr
	ld	AH,@$XAP_UY
	bsr	$_connectionAuthSendLinkKey
?LBE18:
?LBE_connectionHandleSmLinkKeyReqInd:
	leave	#5
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
$_connectionHandleSmSspLinkKeyReqInd:
	enter	#5
?LBB_connectionHandleSmSspLinkKeyReqInd:
	ld	AL,@(H'0005,Y)
?LBB19:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	bsr	$_connectionConvertBdaddr
	ld	AH,@$XAP_UY
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0008,X)
	bsr	$_connectionAuthSendSspLinkKey
	cmp	AH,#H'0000
	bne	?L52
	ld	X,@(H'0005,Y)
	tst	@(H'000A,X)
	bne	?L52
	tst	@(H'0009,X)
	beq	?L52
	bsr	$_connectionGetCmTask
	ld	AL,@$XAP_UY
	bsr	$_ConnectionSdpOpenSearchRequest
?L52:
?LBE19:
?LBE_connectionHandleSmSspLinkKeyReqInd:
	leave	#5
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
$_connectionHandleSmLinkKeyInd:
	enter	#14
?LBB_connectionHandleSmLinkKeyInd:
	st	AH,@(H'0008,Y)
	st	AL,@(H'0009,Y)
?LBB20:
	ld	AL,#H'0000
	st	AL,@(H'000A,Y)
	ld	X,@(H'000F,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertLinkKeyType
	st	AH,@(H'000B,Y)
	ld	X,@(H'000E,Y)
	ld	AH,@(H'0001,X)
	lsr	#H'0004
	ld	AL,@$XAP_AH
	and	AL,#H'000E
	st	AL,@(H'000C,Y)
	cmp	AL,#H'0000
	beq	?L56
	ld	AL,#H'0001
	st	AL,@(H'000C,Y)
?L56:
	ld	AL,@(H'000F,Y)
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0004
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'000B,Y)
	cmp	AL,#H'0001
	beq	?L58
	tst	@(H'000C,Y)
	beq	?L57
	cmp	AL,#H'0002
	beq	?L57
?L58:
	ld	AL,@(H'000B,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'000F,Y)
	add	AL,#H'0007
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	ld	AL,#H'0001
	st	AL,@(H'0003,Y)
	ld	X,@(H'0009,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_connectionAuthAddDevice
	st	AH,@(H'000A,Y)
	bra	(?L59)
?L57:
	tst	@(H'000C,Y)
	bne	?L59
	ld	AL,@(H'000B,Y)
	cmp	AL,#H'0002
	beq	?L59
	ld	AL,#H'0000
	st	AL,@(H'000A,Y)
	ld	AL,@(H'000B,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'000F,Y)
	add	AL,#H'0007
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@(H'0009,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_connectionAuthAddDevice
?L59:
	ld	X,@(H'000E,Y)
	ld	AL,@(0,X)
	and	AL,#H'00FF
	cmp	AL,#H'0004
	bne	?L61
	ld	AL,@(H'000B,Y)
	cmp	AL,#H'0001
	bne	?L61
	ld	AH,@$XAP_UXL
	ld	AL,#H'0000
	bsr	_endAuthentication
?L61:
	ld	X,@(H'000E,Y)
	ld	AL,@(H'0001,X)
	and	AL,#-H'00F1
	or	AL,#H'0080
	st	AL,@(H'0001,X)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@(H'0008,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	_connectionSendAuthenticateCfm
?LBE20:
?LBE_connectionHandleSmLinkKeyInd:
	leave	#14
;.stabn	192,0,0,?LBB20
;.stabn	224,0,0,?LBE20
$_connectionHandleSmBondingCfm:
	enter	#7
?LBB_connectionHandleSmBondingCfm:
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0007,Y)
?LBB21:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0004,Y)
	tst	@(H'0003,X)
	beq	?L67
	ld	AL,@(0,X)
	and	AL,#H'00FF
	cmp	AL,#H'0004
	bne	?L67
	ld	X,@(H'0007,Y)
?LBB22:
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertAuthStatus
	st	AH,@(H'0005,Y)
	cmp	AH,#H'0000
	beq	?L67
	ld	AH,@(H'0004,Y)
	add	AH,#H'0006
	ld	AL,@$XAP_UY
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L67
	ld	AH,@(H'0004,Y)
	ld	AL,@(H'0005,Y)
	bsr	_endAuthentication
?L67:
?LBE22:
?LBE21:
?LBE_connectionHandleSmBondingCfm:
	leave	#7
;.stabn	192,0,0,?LBB21
;.stabn	192,0,0,?LBB22
;.stabn	224,0,0,?LBE22
;.stabn	224,0,0,?LBE21
$_connectionHandleSmPinReqInd:
	enter	#5
?LBB_connectionHandleSmPinReqInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB23:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'701E
	bsr	$_MessageSend
?LBE23:
?LBE_connectionHandleSmPinReqInd:
	leave	#5
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
$_connectionHandleSmIoCapReqInd:
	enter	#5
?LBB_connectionHandleSmIoCapReqInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB24:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'701F
	bsr	$_MessageSend
?LBE24:
?LBE_connectionHandleSmIoCapReqInd:
	leave	#5
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
$_connectionHandleSmIoCapResInd:
	enter	#5
?LBB_connectionHandleSmIoCapResInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB25:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0005,Y)
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0008,X)
	bsr	$_connectionConvertAuthenticationRequirements
	ld	X,@(H'0003,Y)
	st	AH,@(H'0004,X)
	ld	X,@(H'0002,Y)
?LBB26:
	ld	AH,@(H'0001,X)
	lsr	#H'0004
	and	AH,#H'000F
	lsr	#H'0003
	and	AH,#H'0001
	cmp	AH,#H'0000
	beq	?L75
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0008,X)
	and	AL,#H'000F
	asl	#H'0004
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	and	AH,#-H'00F1
	or	AH,@$XAP_AL
	st	AH,@(H'0001,X)
?L75:
	ld	X,@(H'0005,Y)
?LBE26:
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertIoCapability
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0006,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7020
	bsr	$_MessageSend
?LBE25:
?LBE_connectionHandleSmIoCapResInd:
	leave	#5
;.stabn	192,0,0,?LBB25
;.stabn	192,0,0,?LBB26
;.stabn	224,0,0,?LBE26
;.stabn	224,0,0,?LBE25
$_connectionHandleSmUserConfirmationReqInd:
	enter	#5
?LBB_connectionHandleSmUserConfirmationReqInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB27:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0009,X)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0004,X)
	st	AL,@(H'0005,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7021
	bsr	$_MessageSend
?LBE27:
?LBE_connectionHandleSmUserConfirmationReqInd:
	leave	#5
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
$_connectionHandleSmUserPasskeyReqInd:
	enter	#5
?LBB_connectionHandleSmUserPasskeyReqInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB28:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7022
	bsr	$_MessageSend
?LBE28:
?LBE_connectionHandleSmUserPasskeyReqInd:
	leave	#5
;.stabn	192,0,0,?LBB28
;.stabn	224,0,0,?LBE28
$_connectionHandleSmUserPasskeyNotificationInd:
	enter	#4
?LBB_connectionHandleSmUserPasskeyNotificationInd:
	st	AH,@(H'0001,Y)
?LBB29:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0004,Y)
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0006,X)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0002,Y)
	st	AH,@(H'0004,X)
	st	AL,@(H'0005,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7023
	bsr	$_MessageSend
?LBE29:
?LBE_connectionHandleSmUserPasskeyNotificationInd:
	leave	#4
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
$_connectionHandleSmKeypressNotificationInd:
	enter	#5
?LBB_connectionHandleSmKeypressNotificationInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB30:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertKeypressType
	ld	X,@(H'0003,Y)
	st	AH,@(H'0004,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7024
	bsr	$_MessageSend
?LBE30:
?LBE_connectionHandleSmKeypressNotificationInd:
	leave	#5
;.stabn	192,0,0,?LBB30
;.stabn	224,0,0,?LBE30
$_connectionHandleSmChangeLinkKeyReq:
	enter	#6
?LBB_connectionHandleSmChangeLinkKeyReq:
	ld	X,@$XAP_AH
?LBB31:
	ld	AH,@(0,X)
	ld	AL,@$XAP_UY
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L80
?LBB32:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0415
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0004,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L80:
?LBE32:
?LBE31:
?LBE_connectionHandleSmChangeLinkKeyReq:
	leave	#6
;.stabn	192,0,0,?LBB31
;.stabn	192,0,0,?LBB32
;.stabn	224,0,0,?LBE32
;.stabn	224,0,0,?LBE31
$_connectionHandleSmAuthoriseInd:
	enter	#5
?LBB_connectionHandleSmAuthoriseInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB33:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0006,X)
	ld	AL,@(H'0007,X)
	bsr	$_connectionConvertProtocolId_t
	ld	X,@(H'0003,Y)
	st	AH,@(H'0004,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0009,X)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'000A,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0007,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7025
	bsr	$_MessageSend
?LBE33:
?LBE_connectionHandleSmAuthoriseInd:
	leave	#5
;.stabn	192,0,0,?LBB33
;.stabn	224,0,0,?LBE33
$_connectionHandleSmSimplePairingCompleteInd:
	enter	#10
?LBB_connectionHandleSmSimplePairingCompleteInd:
	st	AH,@(H'0007,Y)
	st	AL,@(H'0008,Y)
	ld	AL,@(H'000A,Y)
?LBB34:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'000A,Y)
	tst	@(H'0006,X)
	beq	?L84
	ld	X,@(H'0008,Y)
	tst	@(H'0003,X)
	bne	?L85
	ld	X,@(H'000A,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertAuthStatus
	st	AH,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@(H'0007,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	bsr	_connectionSendAuthenticateCfm
?L85:
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0001,X)
	and	AL,#-H'00F1
	or	AL,#H'0080
	st	AL,@(H'0001,X)
?L84:
	ld	X,@(H'0008,Y)
	tst	@(H'0003,X)
	beq	?L83
	ld	X,@(H'000A,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertAuthStatus
	ld	AL,@$XAP_AH
	ld	AH,@(H'0008,Y)
	bsr	_endAuthentication
?L83:
?LBE34:
?LBE_connectionHandleSmSimplePairingCompleteInd:
	leave	#10
;.stabn	192,0,0,?LBB34
;.stabn	224,0,0,?LBE34
$_connectionHandleDmAclOpenCfm:
	enter	#7
?LBB_connectionHandleDmAclOpenCfm:
	st	AH,@(H'0004,Y)
	ld	X,@$XAP_AH
?LBB35:
	tst	@(H'0003,X)
	beq	?L87
	ld	X,@$XAP_AL
	tst	@(H'0006,X)
	beq	?L89
?LBB36:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0004,Y)
	add	AL,#H'0006
	st	AL,@(H'0005,Y)
	ld	AH,@$XAP_AL
	ld	AL,@$XAP_UY
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L87
	ld	AH,@(H'0005,Y)
	bsr	_aclClose
?LBE36:
	bra	(?L87)
?L89:
	ld	AH,@(H'0004,Y)
	ld	AL,#H'0002
	bsr	_endAuthentication
?L87:
?LBE35:
?LBE_connectionHandleDmAclOpenCfm:
	leave	#7
;.stabn	192,0,0,?LBB36
;.stabn	224,0,0,?LBE36
$_connectionHandleDmAclOpenInd:
	enter	#7
?LBB_connectionHandleDmAclOpenInd:
	st	AH,@H'fff8
	st	AL,@(H'0004,Y)
	ld	AH,@$XAP_AL
	add	AH,#H'0002
	st	AH,@(-1,Y)
	ld	X,@$XAP_AL
	ld	X,@(H'0006,X)
	st	X,@(0,Y)
	ld	X,@$XAP_AL
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0008,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AL,#H'0036
	st	AL,@(H'0003,Y)
	ld	AH,@H'fff8
	ld	AL,@(-1,Y)
	bsr	_sendAclOpenedIndToClient
?LBE_connectionHandleDmAclOpenInd:
	leave	#7
$_connectionHandleDmEnAclOpenInd:
	enter	#8
?LBB_connectionHandleDmEnAclOpenInd:
	st	AH,@(H'0004,Y)
	st	AL,@(H'0005,Y)
	ld	X,@(H'0008,Y)
?LBB37:
	ld	AH,@(H'0009,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@H'fff8
	ld	AH,@(H'0008,Y)
	add	AH,#H'0002
	st	AH,@(-1,Y)
	ld	X,@(H'0008,Y)
	ld	X,@(H'0006,X)
	st	X,@(0,Y)
	ld	X,@(H'0008,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0008,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(H'0003,Y)
	ld	AL,@H'ffff
	ld	AH,@(H'0004,Y)
	ld	AL,@(-1,Y)
	bsr	_sendAclOpenedIndToClient
	ld	X,@(H'0005,Y)
	tst	@(H'0003,X)
	beq	?L93
	ld	AL,@(0,X)
	and	AL,#H'00FF
	cmp	AL,#H'0004
	bne	?L93
	ld	X,@(H'0008,Y)
?LBB38:
	ld	AH,@(H'0009,X)
	bsr	$_connectionConvertAuthStatus
	cmp	AH,#H'0001
	bne	?L93
	bsr	$_connectionGetCmTask
	ld	AL,#H'0011
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	AH,@(H'0005,Y)
	ld	AL,#H'0001
	bsr	_endAuthentication
?L93:
?LBE38:
?LBE37:
?LBE_connectionHandleDmEnAclOpenInd:
	leave	#8
;.stabn	192,0,0,?LBB38
;.stabn	224,0,0,?LBE38
$_connectionHandleDmAclClosedInd:
	enter	#3
?LBB_connectionHandleDmAclClosedInd:
	ld	X,@(H'0003,Y)
	add	X,#H'0002
	st	X,@(0,Y)
	ld	X,#H'0036
	st	X,@(H'0001,Y)
	bsr	_handleGenericAclClosedInd
?LBE_connectionHandleDmAclClosedInd:
	leave	#3
$_connectionHandleDmEnAclClosedInd:
	enter	#5
?LBB_connectionHandleDmEnAclClosedInd:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@(H'0005,Y)
	add	AL,#H'0002
	st	AL,@(0,Y)
	st	AH,@(H'0001,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'0003,Y)
	bsr	_handleGenericAclClosedInd
?LBE_connectionHandleDmEnAclClosedInd:
	leave	#5
$_connectionHandleReadLocalOobDataReq:
	enter	#5
?LBB_connectionHandleReadLocalOobDataReq:
	ld	X,@$XAP_AH
	st	AL,@(H'0002,Y)
?LBB39:
	ld	AL,@(H'0002,X)
	cmp	AL,#H'0002
	bne	?L101
	ld	X,@(H'0002,Y)
	tst	@(H'0003,X)
	bne	?L102
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0003,X)
?LBB40:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'701E
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE40:
	bra	(?L100)
?L102:
?LBB41:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0003
	st	AL,@(H'0001,Y)
	ld	AL,#H'000E
	bsr	$_MessageSendConditionallyOnTask
?LBE41:
	bra	(?L100)
?L101:
?LBB42:
	ld	AH,#H'0021
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0011
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	st	AL,@(H'0011,X)
	st	AH,@(0,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(0,X)
	ld	AL,#H'701A
	bsr	$_MessageSend
?L100:
?LBE42:
?LBE39:
?LBE_connectionHandleReadLocalOobDataReq:
	leave	#5
;.stabn	192,0,0,?LBB40
;.stabn	224,0,0,?LBE40
;.stabn	192,0,0,?LBB41
;.stabn	224,0,0,?LBE41
;.stabn	192,0,0,?LBB42
;.stabn	224,0,0,?LBE42
$_connectionHandleReadLocalOobDataCfm:
	enter	#6
?LBB_connectionHandleReadLocalOobDataCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB43:
	tst	@(H'0003,X)
	beq	?L107
?LBB44:
	ld	AH,#H'0021
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	bne	?L108
?LBB45:
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0004,Y)
	ld	AH,@(H'0003,Y)
	add	AH,#H'0001
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AH,@(H'0004,Y)
;	bsr	$_free
	DC	((256*4)+9)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0004,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0004,Y)
	ld	AH,@(H'0003,Y)
	add	AH,#H'0011
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AH,@(H'0004,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE45:
	bra	(?L109)
?L108:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0001
	ld	X,#H'0010
	st	X,@(0,Y)
	ld	AL,#H'0000
	bsr	$_memset
	ld	AH,@(H'0003,Y)
	add	AH,#H'0011
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AL,#H'0000
	bsr	$_memset
?L109:
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'701A
	bsr	$_MessageSend
?L107:
?LBE44:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0003,X)
?LBE43:
?LBE_connectionHandleReadLocalOobDataCfm:
	leave	#6
;.stabn	192,0,0,?LBB44
;.stabn	192,0,0,?LBB45
;.stabn	224,0,0,?LBE45
;.stabn	224,0,0,?LBE44
$_connectionHandleAuthenticationReq:
	enter	#8
?LBB_connectionHandleAuthenticationReq:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	X,@$XAP_AH
?LBB46:
	tst	@(H'0003,X)
	bne	?L111
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	AH,@(H'0004,Y)
	add	AH,#H'0001
	bsr	$_ConnectionSmDeleteAuthDevice
?LBB47:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	st	AH,@H'fff8
	ld	AH,@(H'0005,Y)
	st	AH,@(0,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@H'fff8
	ld	AL,#H'0011
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
	ld	X,@(H'0004,Y)
?LBE47:
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0006,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0008,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0009,X)
	ld	AL,@(0,X)
	and	AL,#H'00FF
	cmp	AL,#H'0004
	beq	?L112
	bsr	$_connectionGetCmTask
	st	AH,@H'fff8
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	lsr	#H'0008
	st	AH,@(0,Y)
	ld	AH,@H'fff8
	ld	AL,#H'0003
	bsr	$_ConnectionSmSetSecurityMode
	bra	(?L110)
?L112:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	and	AL,#-H'00F1
	or	AL,#H'0020
	st	AL,@(H'0001,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0006
	bsr	_startBonding
	bra	(?L110)
?L111:
?LBB48:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'0007
	ld	X,@(H'0004,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0003,Y)
	add	AL,#H'0003
	st	AL,@(H'0001,Y)
	ld	AL,#H'000F
	bsr	$_MessageSendConditionallyOnTask
?L110:
?LBE48:
?LBE46:
?LBE_connectionHandleAuthenticationReq:
	leave	#8
;.stabn	192,0,0,?LBB47
;.stabn	224,0,0,?LBE47
;.stabn	192,0,0,?LBB48
;.stabn	224,0,0,?LBE48
$_connectionHandleCancelAuthenticationReq:
	enter	#1
?LBB_connectionHandleCancelAuthenticationReq:
	st	AL,@H'fff8
	ld	X,@$XAP_AL
	ld	AL,@(H'0003,X)
	ld	X,@(H'0001,Y)
	cmp	AL,@(0,X)
	bne	?L116
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	cmp	AL,#H'0002
	bne	?L118
	ld	AH,#H'0006
	add	AH,@H'fff8
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	bsr	_cancelBonding
	bra	(?L116)
?L118:
	ld	X,@(H'0001,Y)
	tst	@(H'0001,X)
	beq	?L116
	ld	AH,#H'0006
	add	AH,@H'fff8
	bsr	_aclClose
?L116:
?LBE_connectionHandleCancelAuthenticationReq:
	leave	#1
$_connectionHandleAuthenticationTimeout:
	enter	#1
?LBB_connectionHandleAuthenticationTimeout:
	ld	AL,#H'0001
	bsr	_endAuthentication
?LBE_connectionHandleAuthenticationTimeout:
	leave	#1
$_handleSetSecurityModeReq:
	enter	#7
?LBB_handleSetSecurityModeReq:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB49:
	tst	@(H'0002,X)
	bne	?L125
	tst	@(H'0003,X)
	bne	?L126
	ld	X,@$XAP_AL
	ld	AH,@(H'0001,X)
	and	AH,#H'00FF
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	and	AL,#-H'0100
	or	AL,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	asl	#H'0008
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	and	AH,#H'00FF
	or	AH,@$XAP_AL
	st	AH,@(H'0001,X)
?L126:
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0002,X)
?LBB50:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'2C07
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	bsr	$_connectionConvertSecurityMode_t
	ld	X,@(H'0004,Y)
	st	AH,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE50:
	bra	(?L124)
?L125:
?LBB51:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0003
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	st	AL,@(H'0001,Y)
	ld	AL,#H'0012
	bsr	$_MessageSendConditionallyOnTask
?L124:
?LBE51:
?LBE49:
?LBE_handleSetSecurityModeReq:
	leave	#7
;.stabn	192,0,0,?LBB50
;.stabn	224,0,0,?LBE50
;.stabn	192,0,0,?LBB51
;.stabn	224,0,0,?LBE51
$_handleSetSspSecurityLevelReq:
	enter	#5
?LBB_handleSetSspSecurityLevelReq:
	ld	X,@(H'0005,Y)
?LBB52:
	ld	AL,@(H'0005,X)
	cmp	AL,#(H'0001+H'0003)
	bcc	?L128
	ld	AL,@(0,X)
	cmp	AL,#H'0002
	bne	?L130
?LBB53:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'2C01
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0007,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0008,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0005,X)
	ld	AL,#H'0001
	bsr	$_connectionConvertSspSecurityLevel_t
	ld	X,@(H'0002,Y)
	st	AH,@(H'0001,X)
	bra	(?L132)
?L130:
?LBE53:
?LBB54:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,#H'2C02
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0005,Y)
	ld	AH,@(0,X)
	bsr	$_connectionConvertProtocolId
	ld	X,@(H'0003,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0003,X)
	st	AL,@(H'0004,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0005,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0007,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0008,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	bsr	$_connectionConvertSspSecurityLevel_t
	ld	X,@(H'0003,Y)
	st	AH,@(H'0006,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0007,X)
?L132:
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L128:
?LBE54:
?LBE52:
?LBE_handleSetSspSecurityLevelReq:
	leave	#5
;.stabn	192,0,0,?LBB53
;.stabn	224,0,0,?LBE53
;.stabn	192,0,0,?LBB54
;.stabn	224,0,0,?LBE54
$_handleSecModeConfigReq:
	enter	#7
?LBB_handleSecModeConfigReq:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AL
?LBB55:
	tst	@(H'0002,X)
	beq	?L135
	ld	X,@$XAP_AH
	tst	@(H'0002,X)
	bne	?L136
?LBB56:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'2E10
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0001,X)
	bsr	$_connectionConvertWriteAuthEnable_t
	ld	X,@(H'0004,Y)
	st	AH,@(H'0001,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	cmp	AL,#H'0002
	bne	?L137
	ld	AL,#H'0001
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
?L137:
	ld	X,@(H'0007,Y)
	tst	@(H'0002,X)
	beq	?L138
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0002,X)
	or	AL,#H'0002
	st	AL,@(H'0002,X)
?L138:
	ld	X,@(H'0007,Y)
	tst	@(H'0003,X)
	beq	?L139
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0002,X)
	or	AL,#H'0004
	st	AL,@(H'0002,X)
?L139:
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0002,X)
	ld	AH,@(H'0004,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE56:
	bra	(?L134)
?L136:
?LBB57:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0003,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	st	AL,@(H'0001,Y)
	ld	AL,#H'0014
	bsr	$_MessageSendConditionallyOnTask
?LBE57:
	bra	(?L134)
?L135:
?LBB58:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
	st	AL,@(H'0002,X)
	st	AL,@(H'0003,X)
	st	AH,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,#H'701D
	bsr	$_MessageSend
?L134:
?LBE58:
?LBE55:
?LBE_handleSecModeConfigReq:
	leave	#7
;.stabn	192,0,0,?LBB56
;.stabn	224,0,0,?LBE56
;.stabn	192,0,0,?LBB57
;.stabn	224,0,0,?LBE57
;.stabn	192,0,0,?LBB58
;.stabn	224,0,0,?LBE58
$_connectionHandleSetSecurityModeCfm:
	enter	#4
?LBB_connectionHandleSetSecurityModeCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB59:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	cmp	AL,@$XAP_AH
	bne	?L144
	ld	AH,@$XAP_UXL
	ld	AL,@(H'0002,Y)
	bsr	_handleInternalSetSecurityModeCfm
	bra	(?L145)
?L144:
	ld	X,@(H'0001,Y)
	tst	@(H'0002,X)
	beq	?L145
?LBB60:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0002,X)
	ld	AL,#H'701C
	bsr	$_MessageSend
?L145:
?LBE60:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0002,X)
?LBE59:
?LBE_connectionHandleSetSecurityModeCfm:
	leave	#4
;.stabn	192,0,0,?LBB60
;.stabn	224,0,0,?LBE60
$_connectionHandleConfigureSecurityCfm:
	enter	#4
?LBB_connectionHandleConfigureSecurityCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB61:
	tst	@(H'0002,X)
	beq	?L149
	bsr	$_connectionGetCmTask
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	cmp	AL,@$XAP_AH
	beq	?L149
?LBB62:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	bne	?L151
	ld	AL,#H'0001
?L151:
	ld	X,@H'fff8
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0004,X)
	and	AL,#H'0001
	ld	X,@H'fff8
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0004,X)
	lsr	#H'0001
	and	AH,#H'0001
	ld	X,@H'fff8
	st	AH,@(H'0003,X)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0002,X)
	ld	AL,#H'701D
	bsr	$_MessageSend
?L149:
?LBE62:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0002,X)
?LBE61:
?LBE_connectionHandleConfigureSecurityCfm:
	leave	#4
;.stabn	192,0,0,?LBB62
;.stabn	224,0,0,?LBE62
$_handleRegisterReq:
	enter	#3
?LBB_handleRegisterReq:
	st	AH,@(0,Y)
?LBB63:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C02
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AH,@(0,X)
	bsr	$_connectionConvertProtocolId
	ld	X,@(H'0001,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0003,X)
	st	AL,@(H'0004,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0005,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertSecurityLevel_t
	ld	X,@(H'0001,Y)
	st	AH,@(H'0006,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0007,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE63:
?LBE_handleRegisterReq:
	leave	#3
;.stabn	192,0,0,?LBB63
;.stabn	224,0,0,?LBE63
$_handleUnRegisterReq:
	enter	#3
?LBB_handleUnRegisterReq:
	st	AH,@(0,Y)
?LBB64:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C03
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AH,@(0,X)
	bsr	$_connectionConvertProtocolId
	ld	X,@(H'0001,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0003,X)
	st	AL,@(H'0004,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE64:
?LBE_handleUnRegisterReq:
	leave	#3
;.stabn	192,0,0,?LBB64
;.stabn	224,0,0,?LBE64
$_handleRegisterOutgoingReq:
	enter	#3
?LBB_handleRegisterOutgoingReq:
	st	AH,@(0,Y)
?LBB65:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C04
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertProtocolId
	ld	X,@(H'0001,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0007,X)
	st	AL,@(H'0008,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0007,X)
	bsr	$_connectionConvertSecurityLevel_t
	ld	X,@(H'0001,Y)
	st	AH,@(H'0009,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'000A,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE65:
?LBE_handleRegisterOutgoingReq:
	leave	#3
;.stabn	192,0,0,?LBB65
;.stabn	224,0,0,?LBE65
$_handleUnRegisterOutgoingReq:
	enter	#3
?LBB_handleUnRegisterOutgoingReq:
	st	AH,@(0,Y)
?LBB66:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C05
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertProtocolId
	ld	X,@(H'0001,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0007,X)
	st	AL,@(H'0008,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE66:
?LBE_handleUnRegisterOutgoingReq:
	leave	#3
;.stabn	192,0,0,?LBB66
;.stabn	224,0,0,?LBE66
$_handleEncryptReq:
	enter	#11
?LBB_handleEncryptReq:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB67:
	tst	@(H'0004,X)
	bne	?L158
	ld	X,@$XAP_AL
?LBB68:
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'000A,X)
?LBB69:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'2C0E
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L159
	ld	AH,@(H'0008,Y)
	add	AH,#H'0001
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
?L159:
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'0005,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE69:
?LBE68:
	bra	(?L157)
?L158:
?LBB70:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	AL,#H'0003
	ld	X,@(H'0007,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0006,Y)
	add	AL,#H'0004
	st	AL,@(H'0001,Y)
	ld	AL,#H'0019
	bsr	$_MessageSendConditionallyOnTask
?L157:
?LBE70:
?LBE67:
?LBE_handleEncryptReq:
	leave	#11
;.stabn	192,0,0,?LBB68
;.stabn	192,0,0,?LBB69
;.stabn	224,0,0,?LBE69
;.stabn	224,0,0,?LBE68
;.stabn	192,0,0,?LBB70
;.stabn	224,0,0,?LBE70
$_connectionHandleEncryptCfm:
	enter	#4
?LBB_connectionHandleEncryptCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB71:
	tst	@(H'0004,X)
	beq	?L162
?LBB72:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	tst	@(H'0006,X)
	beq	?L163
	ld	AL,#H'0000
	bra	(?L165)
?L163:
	ld	AL,#H'0001
?L165:
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'000A,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0007,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0004,X)
	ld	AL,#H'7026
	bsr	$_MessageSend
?L162:
?LBE72:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0004,X)
	st	AL,@(H'000A,X)
?LBE71:
?LBE_connectionHandleEncryptCfm:
	leave	#4
;.stabn	192,0,0,?LBB72
;.stabn	224,0,0,?LBE72
$_handleEncryptionKeyRefreshReq:
	enter	#3
?LBB_handleEncryptionKeyRefreshReq:
	ld	X,@$XAP_AH
	st	AL,@(0,Y)
?LBB73:
	tst	@(H'0002,X)
	beq	?L166
?LBB74:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'7022
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L166:
?LBE74:
?LBE73:
?LBE_handleEncryptionKeyRefreshReq:
	leave	#3
;.stabn	192,0,0,?LBB74
;.stabn	224,0,0,?LBE74
$_connectionHandleEncryptionKeyRefreshInd:
	enter	#13
?LBB_connectionHandleEncryptionKeyRefreshInd:
	st	AH,@(H'0006,Y)
?LBB75:
	ld	AL,#H'0000
	st	AL,@(H'0007,Y)
	ld	AL,#H'0006
	st	AL,@(H'0005,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@(H'0008,Y)
	ld	AH,@(H'0005,Y)
	ld	AL,#H'0001
	bsr	$_calloc
;	bsr	$_PanicNull
	DC	((256*15)+9)
	st	AH,@(H'0009,Y)
	ld	AL,@(H'0006,Y)
	add	AL,#H'0003
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0005
	ld	AL,@(H'0009,Y)
;	bsr	$_StreamSinksFromBdAddr
	DC	((256*87)+9)
	cmp	AH,#H'0000
	beq	?L169
	ld	AL,@(H'0007,Y)
	cmp	AL,@(H'0005,Y)
	bcc	?L169
?L176:
	ld	X,@(H'0009,Y)
	add	X,@(H'0007,Y)
	st	X,@(H'000A,Y)
	tst	@(0,X)
	beq	?L172
?LBB76:
	ld	AH,@(0,X)
;	bsr	$_MessageSinkGetTask
	DC	((256*86)+9)
	st	AH,@(H'000B,Y)
	cmp	AH,#H'0000
	beq	?L172
?LBB77:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,@(H'0008,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'000A,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	AH,@(H'000B,Y)
	ld	AL,#H'7027
	bsr	$_MessageSend
?L172:
	ld	AL,@(H'0007,Y)
?LBE77:
?LBE76:
	add	AL,#H'0001
	st	AL,@(H'0007,Y)
	cmp	AL,@(H'0005,Y)
	bcs	?L176
?L169:
	ld	AH,@(H'0009,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE75:
?LBE_connectionHandleEncryptionKeyRefreshInd:
	leave	#13
;.stabn	192,0,0,?LBB75
;.stabn	192,0,0,?LBB76
;.stabn	192,0,0,?LBB77
;.stabn	224,0,0,?LBE77
;.stabn	224,0,0,?LBE76
;.stabn	224,0,0,?LBE75
$_handlePinRequestRes:
	enter	#5
?LBB_handlePinRequestRes:
	st	AH,@(H'0001,Y)
?LBB78:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'2C0B
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(H'0001,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0004,X)
	ld	AL,#-H'0001
	add	AL,@$XAP_AH
	cmp	AL,#(H'0001+H'000F)
	bcc	?L181
	ld	X,@(H'0002,Y)
	st	AH,@(H'0005,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0006
	ld	AL,@(H'0001,Y)
	add	AL,#H'0005
	ld	X,@(H'0001,Y)
	ld	X,@(H'0004,X)
	st	X,@(0,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	bra	(?L182)
?L181:
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(H'0005,X)
?L182:
	ld	AH,@(H'0002,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE78:
?LBE_handlePinRequestRes:
	leave	#5
;.stabn	192,0,0,?LBB78
;.stabn	224,0,0,?LBE78
$_handleIoCapabilityRequestRes:
	enter	#6
?LBB_handleIoCapabilityRequestRes:
	st	AH,@H'fff8
	st	AL,@(0,Y)
	ld	X,@$XAP_AL
?LBB79:
	ld	X,@(H'0004,X)
	st	X,@(H'0001,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	lsr	#H'0004
	and	AH,#H'000F
	lsr	#H'0001
	and	AH,#H'0001
	ld	X,@(0,Y)
	tst	@(H'0005,X)
	beq	?L184
	cmp	AH,#H'0000
	beq	?L185
	tst	@(H'0006,X)
	beq	?L186
	ld	AL,#H'0003
	bra	(?L194)
?L186:
	ld	X,#H'0002
	bra	(?L199)
?L185:
	ld	X,@(0,Y)
	tst	@(H'0006,X)
	beq	?L189
	ld	AL,#H'0005
	bra	(?L194)
?L189:
	ld	X,#H'0004
	bra	(?L199)
?L184:
	cmp	AH,#H'0000
	beq	?L192
	ld	AL,#H'0004
	st	AL,@(H'0001,Y)
	ld	X,#H'0008
?L199:
	st	X,@(H'0002,Y)
	bra	(?L191)
?L192:
	ld	X,@(0,Y)
	ld	AL,@(H'0006,X)
	cmp	AL,#H'0000
	beq	?L194
	ld	AL,#H'0001
?L194:
	st	AL,@(H'0002,Y)
?L191:
	ld	AL,@(H'0002,Y)
	and	AL,#H'000F
	asl	#H'0004
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	and	AH,#-H'00F1
	or	AH,@$XAP_AL
	st	AH,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	cmp	AL,#H'0004
	beq	?L195
?LBB80:
	ld	AH,#H'000A
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,#H'2E11
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
	bsr	$_connectionConvertIoCapability_t
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0007,X)
	ld	X,@(0,Y)
	tst	@(H'0007,X)
	beq	?L196
	ld	AL,#H'0001
	ld	X,@(H'0003,Y)
	st	AL,@(H'0006,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0008,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0008,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0009,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0009,X)
	bra	(?L197)
?L196:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0006,X)
	st	AL,@(H'0008,X)
	st	AL,@(H'0009,X)
?L197:
	ld	AH,@(H'0003,Y)
	bra	(?L200)
?L195:
?LBE80:
?LBB81:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'2E15
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AL,#H'0018
	ld	X,@(H'0004,Y)
	st	AL,@(H'0005,X)
	ld	AH,@$XAP_UXL
?L200:
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE81:
?LBE79:
?LBE_handleIoCapabilityRequestRes:
	leave	#6
;.stabn	192,0,0,?LBB79
;.stabn	192,0,0,?LBB80
;.stabn	224,0,0,?LBE80
;.stabn	192,0,0,?LBB81
;.stabn	224,0,0,?LBE81
;.stabn	224,0,0,?LBE79
$_handleUserConfirmationRequestRes:
	enter	#4
?LBB_handleUserConfirmationRequestRes:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
?LBB82:
	tst	@(H'0004,X)
	beq	?L203
?LBB83:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'701A
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0002
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
	bra	(?L205)
?L203:
?LBE83:
?LBB84:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'701B
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0002
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0002,Y)
?L205:
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE84:
?LBE82:
?LBE_handleUserConfirmationRequestRes:
	leave	#4
;.stabn	192,0,0,?LBB83
;.stabn	224,0,0,?LBE83
;.stabn	192,0,0,?LBB84
;.stabn	224,0,0,?LBE84
$_handleUserPasskeyRequestRes:
	enter	#4
?LBB_handleUserPasskeyRequestRes:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
?LBB85:
	tst	@(H'0004,X)
	bne	?L207
?LBB86:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'701C
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0002
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0006,X)
	st	AL,@(H'0007,X)
	ld	AH,@$XAP_UXL
	bra	(?L209)
?L207:
?LBE86:
?LBB87:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'701D
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0002
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0002,Y)
?L209:
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE87:
?LBE85:
?LBE_handleUserPasskeyRequestRes:
	leave	#4
;.stabn	192,0,0,?LBB86
;.stabn	224,0,0,?LBE86
;.stabn	192,0,0,?LBB87
;.stabn	224,0,0,?LBE87
$_handleSendKeypressNotificationReq:
	enter	#3
?LBB_handleSendKeypressNotificationReq:
	st	AH,@(0,Y)
?LBB88:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'701F
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0002
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertKeypressType_t
	ld	X,@(H'0001,Y)
	st	AH,@(H'0006,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE88:
?LBE_handleSendKeypressNotificationReq:
	leave	#3
;.stabn	192,0,0,?LBB88
;.stabn	224,0,0,?LBE88
$_handleSetTrustLevelReq:
	enter	#2
?LBB_handleSetTrustLevelReq:
	st	AL,@H'fff8
	ld	X,@$XAP_AL
	ld	AL,@(H'0004,X)
	st	AL,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0002,X)
	ld	AL,@H'fff8
	bsr	$_connectionAuthSetTrustLevel
?LBE_handleSetTrustLevelReq:
	leave	#2
$_handleAuthoriseRes:
	enter	#3
?LBB_handleAuthoriseRes:
	st	AH,@(0,Y)
?LBB89:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C0C
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertProtocolId
	ld	X,@(H'0001,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0007,X)
	st	AL,@(H'0008,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0009,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'000A,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE89:
?LBE_handleAuthoriseRes:
	leave	#3
;.stabn	192,0,0,?LBB89
;.stabn	224,0,0,?LBE89
$_handleAddAuthDeviceReq:
	enter	#7
?LBB_handleAddAuthDeviceReq:
	st	AH,@H'fff8
	st	AL,@(H'0004,Y)
	ld	X,@$XAP_AL
?LBB90:
	tst	@(H'0005,X)
	beq	?L214
?LBB91:
	ld	AH,#H'0018
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0018
	ld	X,@(H'0007,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
	add	AL,#H'0005
	st	AL,@(H'0001,Y)
	ld	AL,#H'0022
	bsr	$_MessageSendConditionallyOnTask
?LBE91:
	bra	(?L213)
?L214:
	ld	AL,@(H'0007,Y)
	add	AL,#H'0001
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0005,X)
	st	AH,@(0,Y)
	ld	AH,@$XAP_UXL
	add	AH,#H'0006
	st	AH,@(H'0001,Y)
	ld	AH,@(H'0016,X)
	st	AH,@(H'0002,Y)
	ld	AH,@(H'0017,X)
	st	AH,@(H'0003,Y)
	ld	X,@H'fff8
	ld	AH,@(H'0002,X)
	bsr	$_connectionAuthAddDevice
	cmp	AH,#H'0000
	bne	?L216
?LBB92:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	AL,#H'0001
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7043
	bsr	$_MessageSend
?LBE92:
	bra	(?L213)
?L216:
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0005,X)
?L213:
?LBE90:
?LBE_handleAddAuthDeviceReq:
	leave	#7
;.stabn	192,0,0,?LBB91
;.stabn	224,0,0,?LBE91
;.stabn	192,0,0,?LBB92
;.stabn	224,0,0,?LBE92
$_handleGetAuthDeviceReq:
	enter	#25
?LBB_handleGetAuthDeviceReq:
	st	AH,@(H'0014,Y)
	st	AL,@(H'0015,Y)
	ld	X,@$XAP_AH
?LBB93:
	tst	@(H'0005,X)
	beq	?L219
?LBB94:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0016,Y)
	ld	AL,#H'0005
	ld	X,@(H'0015,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0016,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0014,Y)
	add	AL,#H'0005
	st	AL,@(H'0001,Y)
	ld	AL,#H'0023
	bsr	$_MessageSendConditionallyOnTask
?LBE94:
	bra	(?L218)
?L219:
?LBB95:
	ld	AH,#H'0019
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0017,Y)
	ld	X,@(H'0015,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0015,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0017,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0015,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0017,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0015,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0017,Y)
	st	AL,@(H'0004,X)
	ld	AH,@(H'0015,Y)
	add	AH,#H'0001
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0012
	st	AL,@(H'0001,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0013
	bsr	$_connectionAuthGetDevice
	cmp	AH,#H'0000
	beq	?L221
	ld	AL,#H'0000
	ld	X,@(H'0017,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0012,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0013,Y)
	st	AL,@(H'0006,X)
	ld	AL,#H'0010
	st	AL,@(H'0007,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0008
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_memmove
	DC	((256*6)+9)
	bra	(?L222)
?L221:
	ld	AL,#H'0001
	ld	X,@(H'0017,Y)
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0006,X)
?L222:
	ld	AL,@(H'0017,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0015,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7044
	bsr	$_MessageSend
?L218:
?LBE95:
?LBE93:
?LBE_handleGetAuthDeviceReq:
	leave	#25
;.stabn	192,0,0,?LBB94
;.stabn	224,0,0,?LBE94
;.stabn	192,0,0,?LBB95
;.stabn	224,0,0,?LBE95
$_connectionHandleEncryptionChange:
	enter	#11
?LBB_connectionHandleEncryptionChange:
	st	AH,@(H'0006,Y)
?LBB96:
	ld	AL,#H'0000
	st	AL,@(H'0007,Y)
	ld	AL,#H'0006
	st	AL,@(H'0005,Y)
	ld	AH,@$XAP_AL
	ld	AL,#H'0001
	bsr	$_calloc
;	bsr	$_PanicNull
	DC	((256*15)+9)
	st	AH,@(H'0008,Y)
	ld	AL,@(H'0006,Y)
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0005
	ld	AL,@(H'0008,Y)
;	bsr	$_StreamSinksFromBdAddr
	DC	((256*87)+9)
	cmp	AH,#H'0000
	beq	?L224
	ld	AL,@(H'0007,Y)
	cmp	AL,@(H'0005,Y)
	bcc	?L224
?L231:
	ld	X,@(H'0008,Y)
	add	X,@(H'0007,Y)
	st	X,@(H'0009,Y)
	tst	@(0,X)
	beq	?L227
?LBB97:
	ld	AH,@(0,X)
;	bsr	$_MessageSinkGetTask
	DC	((256*86)+9)
	cmp	AH,#H'0000
	beq	?L227
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(0,Y)
	ld	X,@(H'0009,Y)
	ld	AL,@(0,X)
	bsr	_sendEncryptionChangeInd
?L227:
	ld	AL,@(H'0007,Y)
?LBE97:
	add	AL,#H'0001
	st	AL,@(H'0007,Y)
	cmp	AL,@(H'0005,Y)
	bcs	?L231
?L224:
	ld	AH,@(H'0008,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE96:
?LBE_connectionHandleEncryptionChange:
	leave	#11
;.stabn	192,0,0,?LBB96
;.stabn	192,0,0,?LBB97
;.stabn	224,0,0,?LBE97
;.stabn	224,0,0,?LBE96
$_connectionSmHandleGetAttributeReq:
	enter	#3
?LBB_connectionSmHandleGetAttributeReq:
	ld	X,@$XAP_AL
	st	AL,@(0,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0004,X)
	bsr	$_connectionAuthGetAttribute
?LBE_connectionSmHandleGetAttributeReq:
	leave	#3
$_connectionSmHandleGetIndexedAttributeReq:
	enter	#3
?LBB_connectionSmHandleGetIndexedAttributeReq:
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	bsr	$_connectionAuthGetIndexedAttribute
?LBE_connectionSmHandleGetIndexedAttributeReq:
	leave	#3
	ENDMOD

;# Function pattern *movqi2 used[0] = 533 used[1] = 87 used[3] = 3 total = 623
;# Function pattern *movqi3 used[0] = 660 total = 660
;# Function pattern *movqi8 used[0] = 2 total = 2
;# Function pattern *movhi used[2] = 17 used[3] = 20 total = 37
;# Function pattern *addqi0 used[0] = 22 total = 22
;# Function pattern *addqi2 used[0] = 75 used[2] = 3 total = 78
;# Function pattern *andqi3 used[0] = 31 total = 31
;# Function pattern *iorqi3 used[0] = 10 total = 10
;# Function pattern *lshrqi3 used[0] = 10 total = 10
;# Function pattern *ashlqi3 used[0] = 4 total = 4
;# Function pattern jump used[0] = 34 total = 34
;# Function pattern *call1 used[0] = 126 total = 126
;# Function pattern *call_value1 used[0] = 137 total = 137
;# Function pattern *movstrqi2 used[0] = 5 total = 5
;# Function pattern movstrqi+2 used[0] = 4 total = 4
;# Function pattern movstrqi+3 used[0] = 25 used[1] = 47 total = 72
;# Function pattern movstrqi+4 used[1] = 2 total = 2
;# Function pattern movstrqi+5 used[0] = 28 total = 28
;# Function pattern movstrqi+6 used[0] = 1 total = 1
;# Function pattern movstrqi+7 used[0] = 1 total = 1
	MODULE	dm_sync_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_sendSyncConnectCfmToClient:
	enter	#6
?LBB_sendSyncConnectCfmToClient:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?LBB2:
	cmp	AL,#H'0000
	beq	?L1
?LBB3:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0000
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	st	AL,@(H'0002,X)
	st	AL,@(H'0004,X)
	st	AL,@(H'0003,X)
	st	AL,@(H'0006,X)
	st	AL,@(H'0005,X)
	tst	@(H'0006,Y)
	bne	?L3
	tst	@(H'0007,Y)
	beq	?L3
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0007,Y)
	tst	@(0,X)
	bne	?L4
	ld	AL,#H'0001
	ld	X,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,#H'1F40
	st	AL,@(H'0004,X)
	ld	AH,@(H'0006,Y)
	st	AH,@(H'0003,X)
	st	AL,@(H'0006,X)
	st	AH,@(H'0005,X)
	bra	(?L3)
?L4:
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0002
	bne	?L3
	ld	X,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0007,Y)
	tst	@(H'0001,X)
	beq	?L3
	ld	AL,@(H'0002,X)
	umult	#H'0640
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,#H'0000
	ld	AL,@(H'0001,X)
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$___udivhi3
	ld	X,@(H'0004,Y)
	st	AH,@(H'0003,X)
	st	AL,@(H'0004,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0003,X)
	umult	#H'0640
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,#H'0000
	ld	AL,@(H'0001,X)
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$___udivhi3
	ld	X,@(H'0004,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
?L3:
	ld	AH,@(H'0006,Y)
	ld	X,@(H'0004,Y)
	st	AH,@(0,X)
	cmp	AH,#H'0000
	bne	?L8
	tst	@(H'0002,Y)
	beq	?L8
?LBB4:
	bsr	$_connectionGetMsgFilter
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	and	AL,#H'0004
	cmp	AL,#H'0000
	beq	?L8
?LBB5:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0008
	ld	X,@(H'0004,Y)
	bc2
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	AH,@(H'0002,Y)
	ld	AL,#H'700C
	bsr	$_MessageSend
?L8:
	ld	AL,@(H'0004,Y)
?LBE5:
?LBE4:
	st	AL,@(0,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,#H'700C
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_sendSyncConnectCfmToClient:
	leave	#6
;.stabn	192,0,0,?LBB3
;.stabn	192,0,0,?LBB4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;.stabn	224,0,0,?LBE4
;.stabn	224,0,0,?LBE3
$_connectionHandleSyncRegisterReq:
	enter	#6
?LBB_connectionHandleSyncRegisterReq:
	st	AH,@(H'0003,Y)
?LBB6:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'7C01
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
	ld	X,@H'fff8
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBB7:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,#H'03E8
	st	AL,@(H'0002,Y)
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	ld	AL,#H'0057
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE7:
?LBE6:
?LBE_connectionHandleSyncRegisterReq:
	leave	#6
;.stabn	192,0,0,?LBB6
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;.stabn	224,0,0,?LBE6
$_connectionHandleSyncRegisterCfm:
	enter	#3
?LBB_connectionHandleSyncRegisterCfm:
	st	AH,@(H'0001,Y)
?LBB8:
	bsr	$_connectionGetCmTask
	ld	AL,#H'0057
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L14
	cmp	AL,#H'0000
	beq	?L12
?L14:
?LBB9:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'700A
	bsr	$_MessageSend
?L12:
?LBE9:
?LBE8:
?LBE_connectionHandleSyncRegisterCfm:
	leave	#3
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
$_connectionHandleSyncRegisterTimeoutInd:
	enter	#3
?LBB_connectionHandleSyncRegisterTimeoutInd:
	st	AH,@(H'0001,Y)
?LBB10:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0001
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'700A
	bsr	$_MessageSend
?LBE10:
?LBE_connectionHandleSyncRegisterTimeoutInd:
	leave	#3
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
$_connectionHandleSyncUnregisterReq:
	enter	#6
?LBB_connectionHandleSyncUnregisterReq:
	st	AH,@(H'0003,Y)
?LBB11:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'7C02
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
	ld	X,@H'fff8
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBB12:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,#H'03E8
	st	AL,@(H'0002,Y)
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	ld	AL,#H'0058
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE12:
?LBE11:
?LBE_connectionHandleSyncUnregisterReq:
	leave	#6
;.stabn	192,0,0,?LBB11
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
;.stabn	224,0,0,?LBE11
$_connectionHandleSyncUnregisterTimeoutInd:
	enter	#3
?LBB_connectionHandleSyncUnregisterTimeoutInd:
	st	AH,@(H'0001,Y)
?LBB13:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0001
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'700B
	bsr	$_MessageSend
?LBE13:
?LBE_connectionHandleSyncUnregisterTimeoutInd:
	leave	#3
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
$_connectionHandleSyncConnectReq:
	enter	#9
?LBB_connectionHandleSyncConnectReq:
	st	AH,@(H'0006,Y)
	ld	X,@$XAP_AH
?LBB14:
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	bne	?L19
	ld	AL,#H'0002
	st	AL,@(0,Y)
	st	AH,@(H'0001,Y)
	ld	AH,#H'0000
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	bsr	_sendSyncConnectCfmToClient
	bra	(?L18)
?L19:
?LBB15:
	ld	AH,#H'0010
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0007,Y)
	ld	AL,#H'7C03
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
	ld	X,@(H'0007,Y)
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0004
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0007,Y)
	st	AH,@(H'0008,X)
	st	AL,@(H'0009,X)
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0004,X)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0007,Y)
	st	AH,@(H'000A,X)
	st	AL,@(H'000B,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'000C,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'000D,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'000E,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0009,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'000F,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L18:
?LBE15:
?LBE14:
?LBE_connectionHandleSyncConnectReq:
	leave	#9
;.stabn	192,0,0,?LBB14
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;.stabn	224,0,0,?LBE14
$_connectionHandleSyncConnectCfm:
	enter	#14
?LBB_connectionHandleSyncConnectCfm:
	st	AL,@(H'000C,Y)
	ld	X,@$XAP_AL
?LBB16:
	ld	AL,@(H'000B,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'000C,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'000E,X)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'000F,X)
	st	AL,@(H'0005,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(H'0007,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(H'0006,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	bsr	_sendSyncConnectCfmToClient
	ld	AL,@(H'000C,Y)
	add	AL,#H'0007
	ld	AH,@$XAP_UY
	add	AH,#H'0008
	bsr	$_connectionConvertBdaddr
?LBE16:
?LBE_connectionHandleSyncConnectCfm:
	leave	#14
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
$_connectionHandleSyncConnectInd:
	enter	#4
?LBB_connectionHandleSyncConnectInd:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB17:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L24
	cmp	AL,#H'0000
	beq	?L22
?L24:
?LBB18:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	add	AL,#H'0004
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'700D
	bsr	$_MessageSend
?L22:
?LBE18:
?LBE17:
?LBE_connectionHandleSyncConnectInd:
	leave	#4
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
$_connectionHandleSyncConnectCompleteInd:
	enter	#14
?LBB_connectionHandleSyncConnectCompleteInd:
	st	AL,@(H'000C,Y)
	ld	X,@$XAP_AL
?LBB19:
	ld	AL,@(H'000B,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'000C,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'000E,X)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'000F,X)
	st	AL,@(H'0005,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(H'0007,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(H'0006,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	bsr	_sendSyncConnectCfmToClient
	ld	AL,@(H'000C,Y)
	add	AL,#H'0007
	ld	AH,@$XAP_UY
	add	AH,#H'0008
	bsr	$_connectionConvertBdaddr
?LBE19:
?LBE_connectionHandleSyncConnectCompleteInd:
	leave	#14
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
$_connectionHandleSyncConnectRes:
	enter	#3
?LBB_connectionHandleSyncConnectRes:
	st	AH,@(0,Y)
?LBB20:
	ld	AH,#H'000F
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'7C07
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	add	AL,#H'0001
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0006,X)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0006,X)
	st	AL,@(H'0007,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0009,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0008,X)
	st	AL,@(H'0009,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000A,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'000A,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000B,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'000B,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000C,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'000C,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000D,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'000D,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0005,X)
	ld	X,@(0,Y)
	tst	@(H'0005,X)
	beq	?L27
	ld	AL,#H'0000
	bra	(?L29)
?L27:
	ld	AL,#H'000D
?L29:
	ld	X,@(H'0001,Y)
	st	AL,@(H'000E,X)
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE20:
?LBE_connectionHandleSyncConnectRes:
	leave	#3
;.stabn	192,0,0,?LBB20
;.stabn	224,0,0,?LBE20
$_connectionHandleSyncDisconnectReq:
	enter	#2
?LBB_connectionHandleSyncDisconnectReq:
	st	AH,@(0,Y)
?LBB21:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'7C22
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE21:
?LBE_connectionHandleSyncDisconnectReq:
	leave	#2
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
$_connectionHandleSyncDisconnectInd:
	enter	#8
?LBB_connectionHandleSyncDisconnectInd:
	st	AH,@(H'0005,Y)
	ld	X,@$XAP_AH
?LBB22:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L33
	cmp	AL,#H'0000
	beq	?L32
?L33:
?LBB23:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0006,Y)
	st	AH,@(0,X)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0006,Y)
	st	AH,@(H'0001,X)
	st	X,@(0,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'700E
	bsr	$_MessageSend
?L32:
	ld	AL,@(H'0005,Y)
?LBE23:
	add	AL,#H'0007
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
?LBE22:
?LBE_connectionHandleSyncDisconnectInd:
	leave	#8
;.stabn	192,0,0,?LBB22
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
;.stabn	224,0,0,?LBE22
$_connectionHandleSyncDisconnectCfm:
	enter	#8
?LBB_connectionHandleSyncDisconnectCfm:
	st	AH,@(H'0005,Y)
	ld	X,@$XAP_AH
?LBB24:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L36
	cmp	AL,#H'0000
	beq	?L35
?L36:
?LBB25:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0006,Y)
	st	AH,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	st	X,@(0,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'700E
	bsr	$_MessageSend
?L35:
	ld	AL,@(H'0005,Y)
?LBE25:
	add	AL,#H'0006
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
?LBE24:
?LBE_connectionHandleSyncDisconnectCfm:
	leave	#8
;.stabn	192,0,0,?LBB24
;.stabn	192,0,0,?LBB25
;.stabn	224,0,0,?LBE25
;.stabn	224,0,0,?LBE24
$_connectionHandleSyncRenegotiateReq:
	enter	#4
?LBB_connectionHandleSyncRenegotiateReq:
	st	AH,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB26:
	tst	@(H'0001,X)
	bne	?L38
	ld	AL,#H'0002
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
	bsr	_sendSyncConnectCfmToClient
	bra	(?L37)
?L38:
?LBB27:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'7C25
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0008,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0009,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L37:
?LBE27:
?LBE26:
?LBE_connectionHandleSyncRenegotiateReq:
	leave	#4
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
$_connectionHandleSyncRenegotiateInd:
	enter	#4
?LBB_connectionHandleSyncRenegotiateInd:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB28:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L42
	cmp	AL,#H'0000
	beq	?L40
?L42:
?LBB29:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0002,Y)
	st	AH,@(0,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'700F
	bsr	$_MessageSend
?L40:
?LBE29:
?LBE28:
?LBE_connectionHandleSyncRenegotiateInd:
	leave	#4
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
$_connectionHandleSyncRenegotiateCfm:
	enter	#4
?LBB_connectionHandleSyncRenegotiateCfm:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB30:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L45
	cmp	AL,#H'0000
	beq	?L43
?L45:
?LBB31:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0002,Y)
	st	AH,@(0,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'700F
	bsr	$_MessageSend
?L43:
?LBE31:
?LBE30:
?LBE_connectionHandleSyncRenegotiateCfm:
	leave	#4
;.stabn	192,0,0,?LBB31
;.stabn	224,0,0,?LBE31
	ENDMOD

;# Function pattern *movqi2 used[0] = 155 used[1] = 8 used[3] = 1 total = 164
;# Function pattern *movqi3 used[0] = 207 total = 207
;# Function pattern *movhi used[2] = 12 used[3] = 13 total = 25
;# Function pattern *addqi0 used[0] = 8 total = 8
;# Function pattern *addqi2 used[0] = 8 total = 8
;# Function pattern *andqi3 used[0] = 1 total = 1
;# Function pattern *umulqihi3_const used[0] = 2 total = 2
;# Function pattern *zero_extendqihi2 used[0] = 5 total = 5
;# Function pattern jump used[0] = 4 total = 4
;# Function pattern *call1 used[0] = 29 total = 29
;# Function pattern *call_value1 used[0] = 31 total = 31
;# Function pattern *movstrqi2 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 4 used[1] = 7 total = 11
;# Function pattern movstrqi+5 used[0] = 1 total = 1
;# Function pattern movstrqi+6 used[0] = 6 total = 6
	MODULE	l2cap_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_getNextQosOpt:
	enter	#1
?LBB_getNextQosOpt:
	ld	X,@$XAP_AH
	ld	AH,#H'0000
	ld	AL,@(H'0003,X)
	asl	#H'0018
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,@(H'0002,X)
	ld	AL,#H'0000
	or	AL,@H'fff9
	or	AH,@H'fff8
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,#H'0000
	ld	AL,@(H'0001,X)
	asl	#H'0008
	or	AL,@H'fff9
	or	AH,@H'fff8
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,#H'0000
	ld	AL,@(0,X)
	or	AL,@H'fff9
	or	AH,@H'fff8
?LBE_getNextQosOpt:
	leave	#1
_setQosToDefault:
	enter	#1
?LBB_setQosToDefault:
	ld	X,@$XAP_AH
	ld	AL,#H'0001
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	st	AL,@(H'0001,X)
	st	AL,@(H'0004,X)
	st	AL,@(H'0003,X)
	st	AL,@(H'0006,X)
	st	AL,@(H'0005,X)
	ld	AL,#-H'0001
	st	AL,@(H'0008,X)
	st	AL,@(H'0007,X)
	st	AL,@(H'000A,X)
	st	AL,@(H'0009,X)
?LBE_setQosToDefault:
	leave	#1
_isQosDefault:
	enter	#1
?LBB_isQosDefault:
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(-1,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0001
	bne	?L4
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	cmp	AH,#H'0000
	bne	?L4
	cmp	AL,#H'0000
	bne	?L4
	ld	AH,@(H'0003,X)
	ld	AL,@(H'0004,X)
	cmp	AH,#H'0000
	bne	?L4
	cmp	AL,#H'0000
	bne	?L4
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	cmp	AH,#H'0000
	bne	?L4
	cmp	AL,#H'0000
	bne	?L4
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0008,X)
	xor	AL,#H'FFFF
	xor	AH,#H'FFFF
	cmp	AH,#H'0000
	bne	?L4
	cmp	AL,#H'0000
	bne	?L4
	ld	AH,@(H'0009,X)
	ld	AL,@(H'000A,X)
	xor	AL,#H'FFFF
	xor	AH,#H'FFFF
	cmp	AH,#H'0000
	bne	?L4
	cmp	AL,#H'0000
	bne	?L4
	ld	AL,#H'0001
	st	AL,@(-1,Y)
?L4:
	ld	AH,@(-1,Y)
?LBE_isQosDefault:
	leave	#1
_convertToQosFlow_t:
	enter	#1
?LBB_convertToQosFlow_t:
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	ld	X,@$XAP_AL
	st	AH,@(0,X)
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@H'fff9
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	ld	X,@H'fff8
	ld	AH,@(H'0003,X)
	ld	AL,@(H'0004,X)
	ld	X,@H'fff9
	st	AH,@(H'0003,X)
	st	AL,@(H'0004,X)
	ld	X,@H'fff8
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@H'fff9
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	X,@H'fff8
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0008,X)
	ld	X,@H'fff9
	st	AH,@(H'0007,X)
	st	AL,@(H'0008,X)
	ld	X,@H'fff8
	ld	AH,@(H'0009,X)
	ld	AL,@(H'000A,X)
	ld	X,@H'fff9
	st	AH,@(H'0009,X)
	st	AL,@(H'000A,X)
?LBE_convertToQosFlow_t:
	leave	#1
_getTask:
	enter	#1
?LBB_getTask:
	ld	AL,@$XAP_AH
?LBB2:
	ld	AH,#H'0000
	bsr	$_connectionGetTaskFromMap
?LBE2:
?LBE_getTask:
	leave	#1
_deleteTaskMap:
	enter	#1
?LBB_deleteTaskMap:
	ld	AL,@$XAP_AH
?LBB3:
	ld	AH,#H'0000
	bsr	$_connectionDeleteTaskMap
?LBE3:
?LBE_deleteTaskMap:
	leave	#1
_addConnection:
	enter	#8
?LBB_addConnection:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0008,Y)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0003,Y)
	ld	X,@(H'000A,Y)
	st	X,@(H'0004,Y)
	ld	AH,@(H'000B,Y)
	st	AH,@(H'0005,Y)
?LBB4:
	ld	AH,#H'0023
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'0000
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AH,@(0,Y)
	st	AH,@(H'0001,X)
	ld	AH,@(H'0001,Y)
	st	AH,@(H'0002,X)
	st	AL,@(H'0022,X)
	tst	@(H'000C,Y)
	beq	?L15
	ld	AH,@$XAP_UXL
	add	AH,#H'0008
	ld	AL,#H'0012
	ld	X,@(H'000C,Y)
	bc2
	bra	(?L16)
?L15:
	ld	AL,#H'0030
	ld	X,@(H'0006,Y)
	st	AL,@(H'0008,X)
	st	AL,@(H'0009,X)
	ld	AL,#-H'0001
	st	AL,@(H'000A,X)
	ld	AH,#H'0001
	st	AH,@(H'000B,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'000C
	bsr	_setQosToDefault
	ld	AH,#H'0001
	ld	X,@(H'0006,Y)
	st	AH,@(H'0017,X)
?L16:
	ld	AH,@(H'000E,Y)
	ld	X,@(H'0006,Y)
	st	AH,@(H'001D,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'001E,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'001F,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0020,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0021,X)
	ld	AH,#H'0000
	st	AH,@(H'001A,X)
	ld	AL,@(H'000D,Y)
	st	AL,@(H'001C,X)
	ld	AL,@(H'000E,Y)
	st	AL,@(H'0007,X)
	ld	AL,#H'0001
	st	AL,@(H'001B,X)
	st	AH,@(H'0022,X)
	ld	AH,@$XAP_UXL
	bsr	$_connectionAddInstance
?LBE4:
?LBE_addConnection:
	leave	#8
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
_deleteConnection:
	enter	#14
?LBB_deleteConnection:
?LBB5:
	st	AH,@(H'0007,Y)
	st	AL,@(H'0008,Y)
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'0007
	bc2
	ld	AL,@(H'000E,Y)
	st	AL,@(H'0006,Y)
	ld	AH,#H'0000
	bsr	$_connectionDeleteInstance
?LBE5:
?LBE_deleteConnection:
	leave	#14
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
_getConnection:
	enter	#14
?LBB_getConnection:
?LBB6:
	st	AH,@(H'0007,Y)
	st	AL,@(H'0008,Y)
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'0007
	bc2
	ld	AL,@(H'000E,Y)
	st	AL,@(H'0006,Y)
	ld	AH,#H'0000
	bsr	$_connectionGetInstance
?LBE6:
?LBE_getConnection:
	leave	#14
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
_sendL2capRegisterCfmToTask:
	enter	#4
?LBB_sendL2capRegisterCfmToTask:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB7:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7030
	bsr	$_MessageSend
?LBE7:
?LBE_sendL2capRegisterCfmToTask:
	leave	#4
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
_sendL2capConnectCfmToTask:
	enter	#5
?LBB_sendL2capConnectCfmToTask:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
	bsr	$_connectionGetCmTask
	ld	AL,#H'0048
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
?LBB9:
	ld	AH,#H'0011
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0005,X)
	tst	@(H'0009,Y)
	beq	?L21
	add	AH,#H'0006
	ld	AL,#H'000B
	ld	X,@(H'0009,Y)
	bc2
	bra	(?L22)
?L21:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0006
	bsr	_setQosToDefault
?L22:
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7032
	bsr	$_MessageSend
?LBE9:
?LBE8:
?LBE_sendL2capConnectCfmToTask:
	leave	#5
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
_sendL2capDisconnectIndToTask:
	enter	#4
?LBB_sendL2capDisconnectIndToTask:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB10:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7034
	bsr	$_MessageSend
?LBE10:
?LBE_sendL2capDisconnectIndToTask:
	leave	#4
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
_sendL2capConnectRes:
	enter	#3
?LBB_sendL2capConnectRes:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB11:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0004
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0003,X)
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?LBE11:
?LBE_sendL2capConnectRes:
	leave	#3
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
_sendL2capConfigReq:
	enter	#5
?LBB_sendL2capConfigReq:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB12:
	ld	AH,#H'0011
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,#H'0007
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	X,#H'0000
	st	X,@(H'0002,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0008,X)
	cmp	AL,#H'02A0
	beq	?L26
	ld	AL,#H'0001
	st	AL,@(H'0002,Y)
?L26:
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'000A,X)
	cmp	AL,#-H'0001
	beq	?L27
	ld	AL,@(H'0002,Y)
	or	AL,#H'0002
	st	AL,@(H'0002,Y)
?L27:
	ld	X,@(H'0001,Y)
	ld	AL,@(H'000A,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'000F,X)
	ld	AH,@(H'0001,Y)
	add	AH,#H'000C
	bsr	_isQosDefault
	cmp	AH,#H'0000
	bne	?L28
	ld	AL,@(H'0002,Y)
	or	AL,#H'0004
	st	AL,@(H'0002,Y)
?L28:
	ld	AH,@(H'0001,Y)
	add	AH,#H'000C
	ld	AL,@(H'0003,Y)
	add	AL,#H'0004
	bsr	_convertToQosFlow_t
	ld	AL,@(H'0002,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	AL,#H'0000
	st	AL,@(H'0010,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?LBE12:
?LBE_sendL2capConfigReq:
	leave	#5
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
_sendL2capConfigRes:
	enter	#4
?LBB_sendL2capConfigRes:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB13:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'0008
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0002,X)
	ld	AL,#H'0000
	st	AL,@(H'0006,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0003,X)
	cmp	AL,#H'0000
	beq	?L32
	ld	AH,@(H'0004,Y)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0002,Y)
	st	AH,@(H'0004,X)
	bra	(?L33)
?L32:
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(H'0004,X)
?L33:
	ld	AL,@(H'0006,Y)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0005,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?LBE13:
?LBE_sendL2capConfigRes:
	leave	#4
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
_sendL2capDisconnectReq:
	enter	#2
?LBB_sendL2capDisconnectReq:
	st	AH,@(0,Y)
?LBB14:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0080
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?LBE14:
?LBE_sendL2capDisconnectReq:
	leave	#2
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
_sendInterlockL2capDisconnectRsp:
	enter	#5
?LBB_sendInterlockL2capDisconnectRsp:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB15:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'0049
	bsr	$_MessageSend
?LBE15:
?LBE_sendInterlockL2capDisconnectRsp:
	leave	#5
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
_configDanceCompleted:
	enter	#16
?LBB_configDanceCompleted:
	st	AH,@(H'000A,Y)
	st	AL,@(H'000B,Y)
?LBB16:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AL,@(H'000B,Y)
	bsr	_getConnection
	st	AH,@(H'000C,Y)
	cmp	AH,#H'0000
	beq	?L36
	ld	X,@$XAP_AH
	tst	@(H'001A,X)
	bne	?L38
	ld	AL,#H'0001
	st	AL,@(H'001A,X)
	bra	(?L36)
?L38:
?LBB17:
	ld	AH,@(H'000B,Y)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	st	AH,@(H'000E,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0006
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	ld	AH,@(H'000C,Y)
	add	AH,#H'001E
	ld	AL,@$XAP_UY
	add	AL,#H'0006
	bsr	$_BdaddrIsSame
;	bsr	$_PanicNull
	DC	((256*15)+9)
	ld	X,@(H'000C,Y)
	ld	X,@(H'0007,X)
	st	X,@(H'000D,Y)
	ld	AL,@(H'000A,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'000E,Y)
	st	AL,@(H'0001,Y)
	ld	X,@(H'000C,Y)
	ld	AL,@(H'0009,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'000A,X)
	st	AL,@(H'0003,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'000C
	st	AL,@(H'0004,Y)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0005,Y)
	ld	AH,@(H'000D,Y)
	ld	AL,#H'0000
	bsr	_sendL2capConnectCfmToTask
	ld	AH,@(H'000E,Y)
	ld	AL,@(H'000D,Y)
;	bsr	$_MessageSinkTask
	DC	((256*85)+9)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'000B,Y)
	bsr	_deleteConnection
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	X,@$XAP_UY
	add	X,#H'0006
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0005,Y)
	ld	AH,@(H'000D,Y)
	bsr	$_connectionStoreCompletedConnection
?L36:
?LBE17:
?LBE16:
?LBE_configDanceCompleted:
	leave	#16
;.stabn	192,0,0,?LBB16
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
;.stabn	224,0,0,?LBE16
_configMoreFlagSet:
	enter	#3
?LBB_configMoreFlagSet:
	st	AL,@(H'0001,Y)
?LBB18:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AL,@(H'0001,Y)
	bsr	_getConnection
	ld	X,@$XAP_AH
	ld	AL,#H'0002
	st	AL,@(H'001B,X)
	ld	AH,@(H'0001,Y)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	bsr	_sendL2capDisconnectReq
?LBE18:
?LBE_configMoreFlagSet:
	leave	#3
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
_extractConfigOptions:
	enter	#6
?LBB_extractConfigOptions:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB19:
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	ld	AL,#H'02A0
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	ld	AL,#-H'0001
	ld	X,@(H'0007,Y)
	st	AL,@(0,X)
	ld	AH,@(H'0008,Y)
	bsr	_setQosToDefault
	ld	AL,@(H'0001,Y)
	cmp	AL,#H'0004
	bne	?L42
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0001
	bne	?L42
	ld	AL,@(H'0003,X)
	asl	#H'0008
	or	AL,@(H'0002,X)
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	bra	(?L43)
?L42:
	ld	AL,@(0,Y)
?LBB20:
	st	AL,@(H'0003,Y)
	tst	@(H'0001,Y)
	beq	?L43
?L58:
	ld	X,@(0,Y)
?LBB21:
	ld	AH,@(0,X)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0004,Y)
	add	X,#H'0002
	st	X,@(0,Y)
	ld	AL,@(H'0001,Y)
	add	AL,#-H'0002
	st	AL,@(H'0001,Y)
	ld	AL,@$XAP_AH
	and	AL,#H'0080
	cmp	AL,#H'0000
	bne	?L47
	cmp	AH,#H'0004
	bcz	?L48
	ld	X,@(H'0003,Y)
	add	X,@(H'0002,Y)
	st	AH,@(0,X)
	bra	(?L61)
?L48:
	ld	AL,@$XAP_AH
	and	AL,#H'007F
	cmp	AL,#H'0001
	bne	?L50
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	asl	#H'0008
	or	AL,@(0,X)
	ld	X,@(H'0006,Y)
	bra	(?L60)
?L50:
	ld	AL,@$XAP_AH
	and	AL,#H'007F
	cmp	AL,#H'0002
	bne	?L52
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	asl	#H'0008
	or	AL,@(0,X)
	ld	X,@(H'0007,Y)
?L60:
	st	AL,@(0,X)
	bra	(?L47)
?L52:
	ld	AL,@$XAP_AH
	and	AL,#H'007F
	cmp	AL,#H'0003
	bne	?L54
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0008,Y)
	st	AL,@(0,X)
	ld	AH,@(0,Y)
	bsr	_getNextQosOpt
	ld	X,@(H'0008,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	ld	AH,@(0,Y)
	add	AH,#H'0004
	bsr	_getNextQosOpt
	ld	X,@(H'0008,Y)
	st	AH,@(H'0003,X)
	st	AL,@(H'0004,X)
	ld	AH,@(0,Y)
	add	AH,#H'0008
	bsr	_getNextQosOpt
	ld	X,@(H'0008,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	AH,@(0,Y)
	add	AH,#H'000C
	bsr	_getNextQosOpt
	ld	X,@(H'0008,Y)
	st	AH,@(H'0007,X)
	st	AL,@(H'0008,X)
	ld	AH,@(0,Y)
	add	AH,#H'0010
	bsr	_getNextQosOpt
	ld	X,@(H'0008,Y)
	st	AH,@(H'0009,X)
	st	AL,@(H'000A,X)
	bra	(?L47)
?L54:
	ld	AL,@$XAP_AH
	and	AL,#H'007F
	cmp	AL,#H'0004
	beq	?L47
	ld	X,@(H'0003,Y)
	add	X,@(H'0002,Y)
	st	AH,@(0,X)
	ld	AL,#H'0000
?L61:
	st	AL,@(H'0001,X)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	st	AL,@(H'0002,Y)
?L47:
	ld	X,@(0,Y)
	add	X,@(H'0004,Y)
	st	X,@(0,Y)
	ld	AL,@(H'0001,Y)
	sub	AL,@(H'0004,Y)
	st	AL,@(H'0001,Y)
?LBE21:
	cmp	AL,#H'0000
	bne	?L58
?L43:
?LBE20:
?LBE19:
	ld	AH,@(H'0002,Y)
?LBE_extractConfigOptions:
	leave	#6
;.stabn	192,0,0,?LBB19
;.stabn	192,0,0,?LBB20
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
;.stabn	224,0,0,?LBE20
;.stabn	224,0,0,?LBE19
_handleDisconnect:
	enter	#12
?LBB_handleDisconnect:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	AL,#H'0000
?LBB22:
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0006,Y)
	bsr	_getConnection
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	beq	?L70
	ld	X,@$XAP_AH
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0005,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(H'001B,X)
	bsr	_sendL2capConnectCfmToTask
	ld	X,#H'0000
	st	X,@(0,Y)
	ld	X,@(H'0008,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0006,Y)
	bsr	_deleteConnection
	bra	(?L69)
?L70:
?LBB23:
	ld	AH,@(H'0006,Y)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	st	AH,@(H'0009,Y)
	cmp	AH,#H'0000
	beq	?L69
?LBB24:
	tst	@(H'0007,Y)
	beq	?L74
	ld	AL,@(H'0007,Y)
	cmp	AL,#-H'1112
	beq	?L77
	bra	(?L78)
?L74:
	tst	@(H'000C,Y)
	beq	?L75
	ld	X,#H'0004
	bra	(?L81)
?L75:
	ld	AL,#H'0000
	bra	(?L80)
?L77:
	ld	X,#H'0001
?L81:
	st	X,@(H'000A,Y)
	bra	(?L73)
?L78:
	ld	AL,#H'0002
?L80:
	st	AL,@(H'000A,Y)
?L73:
	ld	AH,@(H'0009,Y)
;	bsr	$_MessageSinkGetTask
	DC	((256*86)+9)
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'000A,Y)
	bsr	_sendL2capDisconnectIndToTask
	ld	AH,@(H'0006,Y)
	bsr	$_connectionRemoveCompletedConnection
?L69:
?LBE24:
?LBE23:
?LBE22:
?LBE_handleDisconnect:
	leave	#12
;.stabn	192,0,0,?LBB22
;.stabn	192,0,0,?LBB23
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
;.stabn	224,0,0,?LBE23
;.stabn	224,0,0,?LBE22
$_connectionHandleL2capRegisterReq:
	enter	#6
?LBB_connectionHandleL2capRegisterReq:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB25:
	tst	@(0,X)
	bne	?L84
	ld	X,@$XAP_AL
?LBB26:
	ld	X,@(H'0001,X)
	st	X,@(-1,Y)
	ld	X,@$XAP_AL
	tst	@(H'0003,X)
	beq	?L85
	ld	AH,@(H'0003,X)
	bra	(?L86)
?L85:
	ld	AH,#H'0000
?L86:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	st	AH,@(H'0001,Y)
	ld	AH,#H'0000
	ld	AL,@(-1,Y)
	bsr	$_connectionAddTaskMap
	cmp	AH,#H'0000
	beq	?L87
?LBB27:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
?LBE27:
	bra	(?L83)
?L87:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	_sendL2capRegisterCfmToTask
?LBE26:
	bra	(?L83)
?L84:
?LBB28:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0003,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0043
	bsr	$_MessageSendConditionallyOnTask
?L83:
?LBE28:
?LBE25:
?LBE_connectionHandleL2capRegisterReq:
	leave	#6
;.stabn	192,0,0,?LBB26
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
;.stabn	224,0,0,?LBE26
;.stabn	192,0,0,?LBB28
;.stabn	224,0,0,?LBE28
$_connectionHandleL2capRegisterCfm:
	enter	#3
?LBB_connectionHandleL2capRegisterCfm:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
	tst	@(0,X)
	beq	?L90
	ld	X,@$XAP_AL
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	ld	AL,#H'0000
	bsr	_sendL2capRegisterCfmToTask
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?L90:
?LBE_connectionHandleL2capRegisterCfm:
	leave	#3
$_connectionHandleL2capUnregisterReq:
	enter	#4
?LBB_connectionHandleL2capUnregisterReq:
	st	AH,@(H'0001,Y)
?LBB29:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	bsr	_deleteTaskMap
	cmp	AH,#H'0000
	beq	?L93
	ld	AL,#H'0000
	bra	(?L95)
?L93:
	ld	AL,#H'0001
?L95:
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7031
	bsr	$_MessageSend
?LBE29:
?LBE_connectionHandleL2capUnregisterReq:
	leave	#4
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
$_connectionHandleL2capConnectReq:
	enter	#15
?LBB_connectionHandleL2capConnectReq:
	st	AH,@(H'0008,Y)
	ld	X,@$XAP_AH
?LBB30:
	ld	AL,@(H'0005,X)
	ld	AH,#H'0000
	bsr	$_connectionFindTaskMap
	st	AH,@(H'0009,Y)
	ld	X,@(H'0008,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(0,X)
	bsr	$_connectionGetPsmTaskMatch
	st	AH,@(H'000A,Y)
	ld	X,@(H'0008,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(0,X)
	bsr	$_connectionCompletedConnectionsGetPsmTaskMatch
	st	AH,@(H'0007,Y)
	ld	AL,@(H'000A,Y)
	add	AL,@$XAP_AH
	st	AL,@(H'000A,Y)
	tst	@(H'0009,Y)
	beq	?L97
	ld	X,@(H'0009,Y)
	tst	@(H'0003,X)
	beq	?L97
	ld	X,@(H'0008,Y)
?LBB31:
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(H'0003,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0007
	st	AL,@(H'0004,Y)
	ld	AH,@(H'0005,X)
	bsr	$_connectionGetPsmBdaddrMatch
	st	AH,@(H'000B,Y)
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(H'0003,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0007
	st	AL,@(H'0004,Y)
	ld	AH,@(H'0005,X)
	bsr	$_connectionCompletedConnectionsGetPsmBdaddrMatch
	ld	X,@(H'0009,Y)
	ld	X,@(H'0003,X)
	st	X,@(H'000D,Y)
	ld	AL,@(H'000A,Y)
	cmp	AL,@(H'0003,X)
	beq	?L99
	tst	@(H'000B,Y)
	beq	?L100
	ld	AL,@(H'000B,Y)
	ld	X,@(H'0008,Y)
	cmp	AL,@(0,X)
	bne	?L99
?L100:
	cmp	AH,#H'0000
	beq	?L97
	ld	X,@(H'0008,Y)
	cmp	AH,@(0,X)
	beq	?L97
?L99:
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	st	AL,@(H'0005,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0009
	bsr	_sendL2capConnectCfmToTask
	bra	(?L96)
?L97:
?LBE31:
?LBB32:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'000C,Y)
	ld	AL,#H'0003
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'000C,Y)
	st	AL,@(H'0001,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	ld	AL,@(H'0008,Y)
	add	AL,#H'0001
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'000C,Y)
	st	AL,@(H'0006,X)
	ld	AL,#H'0000
	st	AL,@(H'0007,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
	ld	X,@(H'0008,Y)
?LBE32:
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(H'0003,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'0007
	st	AL,@(H'0004,Y)
	ld	AL,#H'0000
	st	AL,@(H'0005,Y)
	ld	AL,@(0,X)
	st	AL,@(H'0006,Y)
	ld	AH,@(H'0005,X)
	ld	AL,#H'0000
	bsr	_addConnection
?L96:
?LBE30:
?LBE_connectionHandleL2capConnectReq:
	leave	#15
;.stabn	192,0,0,?LBB30
;.stabn	192,0,0,?LBB31
;.stabn	224,0,0,?LBE31
;.stabn	192,0,0,?LBB32
;.stabn	224,0,0,?LBE32
;.stabn	224,0,0,?LBE30
$_connectionHandleL2capConnectCfm:
	enter	#15
?LBB_connectionHandleL2capConnectCfm:
	st	AH,@(H'000A,Y)
	ld	AL,@$XAP_AH
?LBB33:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0006
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'000A,Y)
	ld	AL,@(H'0008,X)
	cmp	AL,#H'0001
	bne	?L105
	ld	AL,@$XAP_UY
	add	AL,#H'0006
	st	AL,@(0,Y)
	bra	(?L117)
?L105:
	ld	AL,@$XAP_UY
	add	AL,#H'0006
	st	AL,@(0,Y)
	ld	X,@(H'000A,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0006,X)
	bsr	_getConnection
	st	AH,@(H'000B,Y)
	cmp	AH,#H'0000
	bne	?L106
	ld	AL,@$XAP_UY
	add	AL,#H'0006
	st	AL,@(0,Y)
	ld	X,@(H'000A,Y)
?L117:
	ld	AH,@(H'0007,X)
	ld	AL,#H'0000
	bsr	_getConnection
	st	AH,@(H'000B,Y)
?L106:
	tst	@(H'000B,Y)
	bne	?L108
	ld	X,@(H'000A,Y)
?LBB34:
	ld	AH,@(H'0006,X)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	st	AH,@(H'000C,Y)
	ld	X,@(H'000A,Y)
	ld	AH,@(H'0007,X)
	bsr	_getTask
	ld	X,@(H'000A,Y)
	ld	AL,@(H'0007,X)
	st	AL,@(0,Y)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(H'0005,Y)
	ld	AL,#H'0003
	bsr	_sendL2capConnectCfmToTask
	tst	@(H'000C,Y)
	beq	?L104
	ld	AH,@(H'000C,Y)
	bsr	_sendL2capDisconnectReq
?LBE34:
	bra	(?L104)
?L108:
	ld	X,@(H'000A,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'000B,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'000A,Y)
	tst	@(H'0008,X)
	bne	?L111
	ld	AH,@(H'0006,X)
	ld	AL,@(H'000B,Y)
	bsr	_sendL2capConfigReq
?LBB35:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'000D,Y)
	ld	X,@(H'000B,Y)
	ld	AL,@(H'0007,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'000A,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'000D,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'000A,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'000D,Y)
	st	AL,@(H'0002,X)
	bsr	$_connectionGetCmTask
	st	AH,@H'fffa
	ld	AL,@(H'000D,Y)
	st	AL,@(0,Y)
	ld	X,@(H'000B,Y)
	ld	AH,@(H'0018,X)
	ld	AL,@(H'0019,X)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AL,@$XAP_AH
	smult	#H'03E8
	ld	X,@$XAP_AL
	ld	AL,@H'fff9
	umult	#H'03E8
	add	AH,@$XAP_UXL
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@H'fffa
	ld	AL,#H'0048
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE35:
	bra	(?L104)
?L111:
	ld	X,@(H'000A,Y)
	ld	AL,@(H'0008,X)
	cmp	AL,#H'0001
	bne	?L113
	ld	AL,@(H'0006,X)
	ld	X,@(H'000B,Y)
	st	AL,@(H'0002,X)
	bra	(?L104)
?L113:
	ld	X,@(H'000A,Y)
?LBB36:
	ld	AL,@(H'0008,X)
	cmp	AL,#-H'2222
	bne	?L115
	ld	AL,#H'0006
	st	AL,@(-1,Y)
	bra	(?L116)
?L115:
	ld	X,#H'0004
	st	X,@(-1,Y)
?L116:
	ld	X,@(H'000A,Y)
	ld	AL,@(H'0007,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(H'0005,Y)
	ld	X,@(H'000B,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(-1,Y)
	bsr	_sendL2capConnectCfmToTask
	ld	AL,@$XAP_UY
	add	AL,#H'0006
	st	AL,@(0,Y)
	ld	X,@(H'000A,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0006,X)
	bsr	_deleteConnection
?L104:
?LBE36:
?LBE33:
?LBE_connectionHandleL2capConnectCfm:
	leave	#15
;.stabn	192,0,0,?LBB33
;.stabn	192,0,0,?LBB34
;.stabn	224,0,0,?LBE34
;.stabn	192,0,0,?LBB35
;.stabn	224,0,0,?LBE35
;.stabn	192,0,0,?LBB36
;.stabn	224,0,0,?LBE36
;.stabn	224,0,0,?LBE33
$_connectionHandleL2capConfigCfm:
	enter	#3
?LBB_connectionHandleL2capConfigCfm:
	st	AH,@(H'0001,Y)
?LBB37:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	bsr	_getConnection
	cmp	AH,#H'0000
	beq	?L121
	ld	X,@$XAP_AH
	ld	AL,@(H'001B,X)
	cmp	AL,#H'0001
	bne	?L121
	ld	X,@(H'0001,Y)
	tst	@(H'0003,X)
	bne	?L123
	tst	@(H'0012,X)
	bne	?L124
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	bsr	_configDanceCompleted
	bra	(?L121)
?L124:
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	bsr	_configMoreFlagSet
	bra	(?L121)
?L123:
	ld	AL,#H'0005
	ld	X,@$XAP_AH
	st	AL,@(H'001B,X)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0002,X)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	bsr	_sendL2capDisconnectReq
?L121:
?LBE37:
?LBE_connectionHandleL2capConfigCfm:
	leave	#3
;.stabn	192,0,0,?LBB37
;.stabn	224,0,0,?LBE37
$_connectionHandleL2capConfigInd:
	enter	#12
?LBB_connectionHandleL2capConfigInd:
	st	AH,@(H'0005,Y)
?LBB38:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	bsr	_getConnection
	st	AH,@(H'0006,Y)
	cmp	AH,#H'0000
	beq	?L128
	ld	X,@$XAP_AH
	ld	AL,@(H'001B,X)
	cmp	AL,#H'0001
	bne	?L128
	ld	X,@(H'0005,Y)
	tst	@(H'0006,X)
	bne	?L130
?LBB39:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'000A,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0005,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0007,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	st	AL,@(H'0001,Y)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0004,X)
	bsr	_extractConfigOptions
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	beq	?L131
	ld	AL,#H'0003
	st	AL,@(H'0009,Y)
	bra	(?L132)
?L131:
	ld	X,@(H'0005,Y)
	tst	@(H'0004,X)
	beq	?L133
	ld	AH,@(H'0007,Y)
;	bsr	$_free
	DC	((256*4)+9)
?L133:
	ld	AL,#H'0000
	st	AL,@(H'0008,Y)
	st	AL,@(H'0007,Y)
	st	AL,@(H'0009,Y)
	ld	AL,@(H'0003,Y)
	ld	X,@(H'0006,Y)
	cmp	AL,@(H'0009,X)
	bcc	?L134
?LBB40:
	ld	AH,#H'0004
;	bsr	$_malloc
	DC	((256*3)+9)
	st	AH,@(H'0007,Y)
	cmp	AH,#H'0000
	beq	?L135
	ld	AL,#H'0001
	st	AL,@(H'0009,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0009,X)
	and	AL,#H'00FF
	ld	X,@(H'0007,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0009,X)
	lsr	#H'0008
	ld	X,@(H'0007,Y)
	st	AH,@(H'0003,X)
	ld	AL,#H'0004
	st	AL,@(H'0008,Y)
	bra	(?L137)
?L135:
	ld	AL,#H'0002
	st	AL,@(H'0009,Y)
?LBE40:
	bra	(?L137)
?L134:
	ld	AL,@(H'0003,Y)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0009,X)
?L137:
	ld	X,@(H'0006,Y)
	tst	@(H'000B,X)
	bne	?L138
	ld	AL,@(H'0004,Y)
	cmp	AL,#-H'0001
	beq	?L138
?LBB41:
	tst	@(H'0007,Y)
	beq	?L139
	ld	AL,@(H'0008,Y)
	add	AL,#H'0004
	ld	AH,@(H'0007,Y)
;	bsr	$_realloc
	DC	((256*5)+9)
	bra	(?L154)
?L139:
	ld	AH,#H'0004
;	bsr	$_malloc
	DC	((256*3)+9)
?L154:
	st	AH,@(H'0007,Y)
	tst	@(H'0007,Y)
	beq	?L141
	ld	AL,#H'0001
	st	AL,@(H'0009,Y)
	ld	X,@(H'0007,Y)
	add	X,@(H'0008,Y)
	ld	AL,#H'0002
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
	ld	AL,#H'00FF
	st	AL,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0008,Y)
	add	AL,#H'0004
	st	AL,@(H'0008,Y)
	bra	(?L143)
?L141:
	ld	AL,#H'0002
	st	AL,@(H'0009,Y)
	ld	AH,@(H'0007,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE41:
	bra	(?L143)
?L138:
	ld	AL,@(H'0004,Y)
	ld	X,@(H'0006,Y)
	st	AL,@(H'000A,X)
?L143:
	ld	X,@(H'0006,Y)
	tst	@(H'0017,X)
	bne	?L144
	ld	X,@(H'000A,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0001
	bne	?L149
	bra	(?L148)
?L144:
	ld	X,@(H'000A,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	cmp	AH,#H'FFFF
	bne	?L160
	cmp	AL,#H'FFFF
	beq	?L149
?L160:
	ld	AH,@(H'0003,X)
	ld	AL,@(H'0004,X)
	cmp	AH,#H'FFFF
	bne	?L148
	cmp	AL,#H'FFFF
	bne	?L148
?L149:
	ld	AL,#H'0002
	st	AL,@(H'0009,Y)
	bra	(?L147)
?L148:
	ld	AH,@(H'0006,Y)
	add	AH,#H'000C
	ld	AL,#H'000B
	ld	X,@(H'000A,Y)
	bc2
?L147:
	tst	@(H'0009,Y)
	bne	?L132
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0001,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	bsr	_configDanceCompleted
?L132:
	ld	AL,@(H'0007,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_sendL2capConfigRes
	ld	AH,@(H'000A,Y)
	bra	(?L155)
?L130:
?LBE39:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0002
	st	AL,@(H'0002,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_sendL2capConfigRes
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0001,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	bsr	_configMoreFlagSet
	ld	X,@(H'0005,Y)
	tst	@(H'0004,X)
	beq	?L128
	ld	AH,@(H'0005,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	ld	X,@(H'0005,Y)
	st	AH,@(H'0005,X)
?L155:
;	bsr	$_free
	DC	((256*4)+9)
?L128:
?LBE38:
?LBE_connectionHandleL2capConfigInd:
	leave	#12
;.stabn	192,0,0,?LBB38
;.stabn	192,0,0,?LBB39
;.stabn	224,0,0,?LBE39
;.stabn	224,0,0,?LBE38
$_connectionHandleL2capConnectInd:
	enter	#18
?LBB_connectionHandleL2capConnectInd:
	st	AH,@(H'000D,Y)
	ld	AL,@$XAP_AH
?LBB42:
	add	AL,#H'0003
	ld	AH,@$XAP_UY
	add	AH,#H'0007
	bsr	$_connectionConvertBdaddr
	ld	AL,@$XAP_UY
	add	AL,#H'0007
	st	AL,@(0,Y)
	ld	X,@(H'000D,Y)
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0007,X)
	bsr	_getConnection
	cmp	AH,#H'0000
	bne	?L163
	ld	X,@(H'000D,Y)
?LBB43:
	ld	AL,@(H'0008,X)
	ld	AH,#H'0000
	bsr	$_connectionFindTaskMap
	st	AH,@(H'000E,Y)
	cmp	AH,#H'0000
	beq	?L164
	ld	X,@$XAP_AH
?LBB44:
	tst	@(H'0003,X)
	beq	?L165
?LBB45:
	ld	AL,@(H'0003,X)
	st	AL,@(-1,Y)
	ld	X,@$XAP_AL
	ld	AL,@(H'0003,X)
	cmp	AL,#(H'0001+H'0001)
	bcc	?L166
	ld	AH,@(-1,Y)
	ld	X,@(H'000E,Y)
	bra	(?L179)
?L166:
?LBB46:
	ld	AL,@(H'0007,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0003,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'000B
	st	AL,@(H'0004,Y)
	ld	X,@(H'000D,Y)
	ld	AH,@(H'0008,X)
	bsr	$_connectionGetPsmBdaddrMatch
	st	AH,@(H'0010,Y)
	ld	AL,@(H'0007,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0003,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'000C
	st	AL,@(H'0004,Y)
	ld	X,@(H'000D,Y)
	ld	AH,@(H'0008,X)
	bsr	$_connectionCompletedConnectionsGetPsmBdaddrMatch
	ld	AL,@(H'000B,Y)
	add	AL,@(H'000C,Y)
	st	AL,@(H'000B,Y)
	cmp	AL,#H'0000
	beq	?L168
	tst	@(H'0010,Y)
	bne	?L169
	cmp	AH,#H'0000
	beq	?L168
?L169:
	tst	@(H'0010,Y)
	bne	?L170
	st	AH,@(H'0010,Y)
?L170:
	ld	X,@(H'000E,Y)
	ld	AH,@(H'0003,X)
	ld	AL,@(H'000B,Y)
	ld	X,@$XAP_AH
	cmp	AL,@(H'0003,X)
	bne	?L167
	bra	(?L182)
?L168:
	ld	X,@(H'000E,Y)
	ld	AH,@(H'0003,X)
?L179:
	ld	AL,@(H'0002,X)
	bsr	$_createTaskInstance
	st	AH,@(H'0010,Y)
?L167:
	ld	AL,@(H'0010,Y)
?LBE46:
	st	AL,@(H'000F,Y)
	cmp	AL,#H'0000
	beq	?L182
	ld	X,@(H'000E,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AL
	tst	@(H'0004,X)
	beq	?L176
	ld	AH,@(H'0004,X)
	ld	AL,@(H'0010,Y)
	bsr	$_createTaskInstance
	st	AH,@(H'000F,Y)
	cmp	AH,#H'0000
	bne	?L176
?L182:
	ld	AL,#H'0004
	bra	(?L180)
?L165:
	ld	X,@(H'000E,Y)
?LBE45:
	ld	AL,@(H'0002,X)
	st	AL,@(H'000F,Y)
?L176:
?LBB47:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'000D,Y)
	ld	AL,@(H'0008,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	X,@(H'000D,Y)
	ld	AL,@(H'0007,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0005,X)
	st	AH,@(0,Y)
	ld	AH,@(H'000F,Y)
	ld	AL,#H'7033
	bsr	$_MessageSend
	ld	AL,@(H'0007,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0003,Y)
	ld	AL,#H'0000
	st	AL,@(H'0004,Y)
	ld	X,@(H'000D,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0005,Y)
	ld	AL,@(H'000F,Y)
	st	AL,@(H'0006,Y)
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0007,X)
	bsr	_addConnection
?LBE47:
?LBE44:
	bra	(?L162)
?L164:
	ld	AL,#H'0002
	bra	(?L180)
?L163:
?LBE43:
	ld	AL,#H'0000
?L180:
	st	AL,@(0,Y)
	ld	X,@(H'000D,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0007,X)
	bsr	_sendL2capConnectRes
?L162:
?LBE42:
?LBE_connectionHandleL2capConnectInd:
	leave	#18
;.stabn	192,0,0,?LBB42
;.stabn	192,0,0,?LBB43
;.stabn	192,0,0,?LBB44
;.stabn	192,0,0,?LBB45
;.stabn	192,0,0,?LBB46
;.stabn	224,0,0,?LBE46
;.stabn	224,0,0,?LBE45
;.stabn	192,0,0,?LBB47
;.stabn	224,0,0,?LBE47
;.stabn	224,0,0,?LBE44
;.stabn	224,0,0,?LBE43
;.stabn	224,0,0,?LBE42
$_connectionHandleL2capConnectRes:
	enter	#7
?LBB_connectionHandleL2capConnectRes:
	st	AH,@(H'0003,Y)
	ld	AL,#H'0000
?LBB48:
	st	AL,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_getConnection
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	beq	?L184
	ld	X,@(H'0003,Y)
	tst	@(H'0001,X)
	beq	?L186
	add	AH,#H'0008
	ld	AL,#H'0012
	add	X,#H'0004
	bc2
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0007,X)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'001C,X)
	ld	AL,@(H'0002,X)
	bsr	_sendL2capConnectRes
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@$XAP_UXL
	bsr	_sendL2capConfigReq
?LBB49:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0002,X)
	bsr	$_connectionGetCmTask
	st	AH,@H'fffa
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0018,X)
	ld	AL,@(H'0019,X)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AL,@$XAP_AH
	smult	#H'03E8
	ld	X,@$XAP_AL
	ld	AL,@H'fff9
	umult	#H'03E8
	add	AH,@$XAP_UXL
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@H'fffa
	ld	AL,#H'0048
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE49:
	bra	(?L184)
?L186:
	ld	AL,#H'0004
	st	AL,@(0,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'001C,X)
	ld	AL,@(H'0002,X)
	bsr	_sendL2capConnectRes
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0002,X)
	bsr	_deleteConnection
?L184:
?LBE48:
?LBE_connectionHandleL2capConnectRes:
	leave	#7
;.stabn	192,0,0,?LBB48
;.stabn	192,0,0,?LBB49
;.stabn	224,0,0,?LBE49
;.stabn	224,0,0,?LBE48
$_connectionHandleL2capDisconnectReq:
	enter	#3
?LBB_connectionHandleL2capDisconnectReq:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
	tst	@(H'0001,X)
	beq	?L189
	ld	AH,@(H'0001,X)
	bsr	$_SinkIsValid
	cmp	AH,#H'0000
	beq	?L189
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	bsr	_sendL2capDisconnectReq
	bra	(?L188)
?L189:
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0003
	bsr	_sendL2capDisconnectIndToTask
?L188:
?LBE_connectionHandleL2capDisconnectReq:
	leave	#3
$_connectionHandleL2capDisconnectCfm:
	enter	#2
?LBB_connectionHandleL2capDisconnectCfm:
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_handleDisconnect
?LBE_connectionHandleL2capDisconnectCfm:
	leave	#2
$_connectionHandleL2capDisconnectInd:
	enter	#3
?LBB_connectionHandleL2capDisconnectInd:
	st	AH,@(H'0001,Y)
	ld	AL,#H'0000
	ld	X,@$XAP_AH
	tst	@(H'0002,X)
	bne	?L193
	ld	AL,#H'0001
?L193:
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'0000
	bsr	_handleDisconnect
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_sendInterlockL2capDisconnectRsp
?LBE_connectionHandleL2capDisconnectInd:
	leave	#3
$_connectionHandleL2capConnectTimeout:
	enter	#5
?LBB_connectionHandleL2capConnectTimeout:
	st	AH,@(H'0001,Y)
?LBB50:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	bsr	_getConnection
	st	AH,@(H'0002,Y)
	cmp	AH,#H'0000
	beq	?L194
	ld	X,@(H'0001,Y)
?LBB51:
	ld	AH,@(H'0002,X)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	st	AH,@(H'0003,Y)
	ld	AL,#H'0007
	ld	X,@(H'0002,Y)
	st	AL,@(H'001B,X)
	tst	@(H'0003,Y)
	beq	?L196
	ld	AH,@(H'0003,Y)
	bsr	$_SinkIsValid
	cmp	AH,#H'0000
	beq	?L196
	ld	AH,@(H'0003,Y)
	bsr	_sendL2capDisconnectReq
	bra	(?L194)
?L196:
?LBB52:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'000E
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?L194:
?LBE52:
?LBE51:
?LBE50:
?LBE_connectionHandleL2capConnectTimeout:
	leave	#5
;.stabn	192,0,0,?LBB50
;.stabn	192,0,0,?LBB51
;.stabn	192,0,0,?LBB52
;.stabn	224,0,0,?LBE52
;.stabn	224,0,0,?LBE51
;.stabn	224,0,0,?LBE50
$_connectionHandleQosSetupCfm:
	enter	#2
?LBB_connectionHandleQosSetupCfm:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
?LBB53:
	ld	AH,@(H'000D,X)
	ld	AL,@(H'000E,X)
	cmp	AH,#hwrd(H'0001+H'222D)
	bcs	?L200
	bne	?L198
	cmp	AL,#lwrd(H'0001+H'222D)
	bcc	?L198
?L200:
?LBB54:
	ld	AH,#H'0011
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0807
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0011
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0005,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0006,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0008,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0008,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0009,X)
	ld	AL,@(H'000A,X)
	ld	X,@H'fff8
	st	AH,@(H'0009,X)
	st	AL,@(H'000A,X)
	ld	X,@(0,Y)
	ld	AH,@(H'000B,X)
	ld	AL,@(H'000C,X)
	ld	X,@H'fff8
	st	AH,@(H'000B,X)
	st	AL,@(H'000C,X)
	ld	AL,#H'61A8
	st	AL,@(H'000E,X)
	ld	AL,#H'0000
	st	AL,@(H'000D,X)
	ld	X,@(0,Y)
	ld	AH,@(H'000F,X)
	ld	AL,@(H'0010,X)
	ld	X,@H'fff8
	st	AH,@(H'000F,X)
	st	AL,@(H'0010,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L198:
?LBE54:
?LBE53:
?LBE_connectionHandleQosSetupCfm:
	leave	#2
;.stabn	192,0,0,?LBB54
;.stabn	224,0,0,?LBE54
$_connectionHandleL2capInterlockDisconnectRsp:
	enter	#2
?LBB_connectionHandleL2capInterlockDisconnectRsp:
	st	AH,@(0,Y)
?LBB55:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'000F
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?LBE55:
?LBE_connectionHandleL2capInterlockDisconnectRsp:
	leave	#2
;.stabn	192,0,0,?LBB55
;.stabn	224,0,0,?LBE55
	ENDMOD

;# Function pattern *movqi2 used[0] = 454 used[1] = 61 total = 515
;# Function pattern *movqi3 used[0] = 556 total = 556
;# Function pattern *movqi8 used[0] = 4 total = 4
;# Function pattern *movhi used[2] = 18 used[3] = 20 total = 38
;# Function pattern *iorhi3 used[0] = 3 total = 3
;# Function pattern *addqi0 used[0] = 18 total = 18
;# Function pattern *addqi2 used[0] = 34 total = 34
;# Function pattern *andqi3 used[0] = 6 total = 6
;# Function pattern *iorqi3 used[0] = 5 total = 5
;# Function pattern *subqi3 used[0] = 1 total = 1
;# Function pattern *mulqihi3_const used[0] = 2 total = 2
;# Function pattern *umulqihi3_const used[0] = 2 total = 2
;# Function pattern *ashlhi3 used[0] = 2 total = 2
;# Function pattern *lshrqi3 used[0] = 1 total = 1
;# Function pattern *ashlqi3 used[0] = 3 total = 3
;# Function pattern one_cmplhi2 used[0] = 2 total = 2
;# Function pattern *zero_extendqihi2 used[0] = 3 total = 3
;# Function pattern jump used[0] = 43 total = 43
;# Function pattern *call1 used[0] = 64 total = 64
;# Function pattern *call_value1 used[0] = 80 total = 80
;# Function pattern *movstrqi2 used[0] = 6 total = 6
;# Function pattern zero_extendqihi2+1 used[0] = 1 total = 1
;# Function pattern movstrqi+2 used[0] = 3 total = 3
;# Function pattern movstrqi+3 used[0] = 25 used[1] = 33 total = 58
;# Function pattern movstrqi+4 used[1] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 23 total = 23
;# Function pattern movstrqi+6 used[0] = 5 total = 5
;# Function pattern movstrqi+7 used[0] = 3 total = 3
	MODULE	rfc_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_addRfcommConnection:
	enter	#3
?LBB_addRfcommConnection:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB2:
	ld	AH,#H'0023
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0006,X)
	ld	AL,#H'0000
	st	AL,@(H'0022,X)
	bsr	$_connectionAddInstance
?LBE2:
?LBE_addRfcommConnection:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
_getRfcommConnection:
	enter	#14
?LBB_getRfcommConnection:
	ld	X,@(H'000E,Y)
?LBB3:
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0007
	st	AL,@H'fff8
	ld	AL,@$XAP_UXL
	bsr	$_connectionGetId
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'0007
	bc2
	st	AL,@(H'0006,Y)
	ld	AH,#H'0001
	bsr	$_connectionGetInstance
?LBE3:
?LBE_getRfcommConnection:
	leave	#14
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
_deleteRfcommConnection:
	enter	#14
?LBB_deleteRfcommConnection:
	ld	X,@(H'000E,Y)
?LBB4:
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0007
	st	AL,@H'fff8
	ld	AL,@$XAP_UXL
	bsr	$_connectionGetId
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'0007
	bc2
	st	AL,@(H'0006,Y)
	ld	AH,#H'0001
	bsr	$_connectionDeleteInstance
?LBE4:
?LBE_deleteRfcommConnection:
	leave	#14
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
_deleteTaskMap:
	enter	#1
?LBB_deleteTaskMap:
	ld	AL,@$XAP_AH
?LBB5:
	ld	AH,#H'0001
	bsr	$_connectionDeleteTaskMap
?LBE5:
?LBE_deleteTaskMap:
	leave	#1
_sendRfcommConnectInd:
	enter	#4
?LBB_sendRfcommConnectInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB6:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0005,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7037
	bsr	$_MessageSend
?LBE6:
?LBE_sendRfcommConnectInd:
	leave	#4
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
_sendRfcommConnectionInd:
	enter	#7
?LBB_sendRfcommConnectionInd:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?LBB7:
	ld	AH,#H'0001
	bsr	$_connectionFindTaskMap
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	beq	?L7
	ld	X,@$XAP_AH
?LBB8:
	tst	@(H'0003,X)
	beq	?L8
?LBB9:
	ld	AH,@(H'0003,X)
	ld	AL,@(H'0002,X)
	bsr	$_createTaskInstance
	ld	AL,@$XAP_AH
	cmp	AH,#H'0000
	beq	?L14
	ld	X,@(H'0004,Y)
	ld	X,@(H'0003,X)
	st	X,@(H'0005,Y)
	tst	@(H'0004,X)
	beq	?L12
	ld	AH,@(H'0004,X)
	bsr	$_createTaskInstance
	cmp	AH,#H'0000
	bne	?L12
?L14:
	ld	AH,#H'0000
	bra	(?L6)
?L8:
	ld	X,@(H'0004,Y)
?LBE9:
	ld	AH,@(H'0002,X)
?L12:
	ld	X,@(H'0008,Y)
	st	AH,@(H'0007,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	st	X,@(H'0001,Y)
	ld	AL,@(H'0002,Y)
	bsr	_sendRfcommConnectInd
?LBE8:
	bra	(?L13)
?L7:
;	bsr	$_Panic
	DC	((256*14)+9)
?L13:
	ld	AH,#H'0001
?L6:
?LBE7:
?LBE_sendRfcommConnectionInd:
	leave	#7
;.stabn	192,0,0,?LBB7
;.stabn	192,0,0,?LBB8
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
;.stabn	224,0,0,?LBE8
;.stabn	224,0,0,?LBE7
_sendRfcommDisconnectInd:
	enter	#5
?LBB_sendRfcommDisconnectInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB10:
	cmp	AH,#H'0000
	beq	?L15
?LBB11:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AH,@(H'0002,Y)
	bsr	$_connectionConvertRfcommDisconnectStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0001,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7038
	bsr	$_MessageSend
?L15:
?LBE11:
?LBE10:
?LBE_sendRfcommDisconnectInd:
	leave	#5
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
_sendRfcommConnectionCfm:
	enter	#4
?LBB_sendRfcommConnectionCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB12:
	cmp	AH,#H'0000
	beq	?L17
?LBB13:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0003,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7036
	bsr	$_MessageSend
?L17:
?LBE13:
?LBE12:
?LBE_sendRfcommConnectionCfm:
	leave	#4
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
_sendRfcommControlInd:
	enter	#4
?LBB_sendRfcommControlInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB14:
	cmp	AH,#H'0000
	beq	?L19
?LBB15:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7039
	bsr	$_MessageSend
?L19:
?LBE15:
?LBE14:
?LBE_sendRfcommControlInd:
	leave	#4
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
_sendRfcommRegisterCfm:
	enter	#4
?LBB_sendRfcommRegisterCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB16:
	cmp	AH,#H'0000
	beq	?L21
?LBB17:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7035
	bsr	$_MessageSend
?L21:
?LBE17:
?LBE16:
?LBE_sendRfcommRegisterCfm:
	leave	#4
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
_startParnegPhase:
	enter	#2
?LBB_startParnegPhase:
	st	AH,@(0,Y)
?LBB18:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0020
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000A,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000C,X)
	add	AL,#-H'0001
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	AL,#H'0001
	st	AL,@(H'0005,X)
	ld	AL,#H'0000
	st	AL,@(H'0006,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE18:
?LBE_startParnegPhase:
	leave	#2
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
_startEstablishPhase:
	enter	#2
?LBB_startEstablishPhase:
	st	AH,@(0,Y)
?LBB19:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'000C
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000A,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
	ld	AL,#H'0003
	ld	X,@(0,Y)
	st	AL,@(H'0008,X)
?LBE19:
?LBE_startEstablishPhase:
	leave	#2
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
_startControlPhase:
	enter	#2
?LBB_startControlPhase:
	st	AH,@(0,Y)
?LBB20:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'001C
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	AL,#H'0003
	st	AL,@(H'0003,X)
	ld	AL,#H'0000
	st	AL,@(H'0004,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE20:
?LBE_startControlPhase:
	leave	#2
;.stabn	192,0,0,?LBB20
;.stabn	224,0,0,?LBE20
_sendControlSignal:
	enter	#3
?LBB_sendControlSignal:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB21:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'002E
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0004,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE21:
?LBE_sendControlSignal:
	leave	#3
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
_closeMuxSession:
	enter	#2
?LBB_closeMuxSession:
	st	AH,@(0,Y)
?LBB22:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'000A
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE22:
?LBE_closeMuxSession:
	leave	#2
;.stabn	192,0,0,?LBB22
;.stabn	224,0,0,?LBE22
_releaseServerChannel:
	enter	#2
?LBB_releaseServerChannel:
	st	AH,@(0,Y)
?LBB23:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'002D
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE23:
?LBE_releaseServerChannel:
	leave	#2
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
_releaseServerChannelNoSink:
	enter	#3
?LBB_releaseServerChannelNoSink:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB24:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0010
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0002,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE24:
?LBE_releaseServerChannelNoSink:
	leave	#3
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
_sendEstablishRes:
	enter	#3
?LBB_sendEstablishRes:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB25:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'000D
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0003,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE25:
?LBE_sendEstablishRes:
	leave	#3
;.stabn	192,0,0,?LBB25
;.stabn	224,0,0,?LBE25
_endConnection:
	enter	#2
?LBB_endConnection:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
?LBB26:
	ld	AL,@(H'0008,X)
	cmp	AL,#(H'0001+H'0005)
	bcc	?L31
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE41,X)
	brxl
	.SEG	CONST
?JTBASE41:
	.CODE
?L41:
	.SEG	CONST
	dc	?L37-?L41
	dc	?L33-?L41
	dc	?L37-?L41
	dc	?L37-?L41
	dc	?L37-?L41
	dc	?L31-?L41
	.CODE
?L33:
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	bsr	_closeMuxSession
	bra	(?L31)
?L37:
	ld	X,@(0,Y)
?LBB27:
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
;	bsr	$_StreamRfcommSink
	DC	((256*103)+9)
	cmp	AH,#H'0000
	beq	?L38
	bsr	_releaseServerChannel
	bra	(?L31)
?L38:
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	bsr	_releaseServerChannelNoSink
?L31:
?LBE27:
?LBE26:
?LBE_endConnection:
	leave	#2
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
$_connectionHandleRfcommRegisterReq:
	enter	#8
?LBB_connectionHandleRfcommRegisterReq:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	X,@$XAP_AH
?LBB28:
	tst	@(0,X)
	bne	?L44
	ld	X,@$XAP_AL
?LBB29:
	tst	@(H'0001,X)
	beq	?L45
	tst	@(H'0002,X)
	beq	?L45
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	bra	(?L46)
?L45:
	ld	X,@(H'0004,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0000
?L46:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
	ld	AH,#H'0001
	ld	AL,#H'0021
	bsr	$_connectionAddTaskMap
	cmp	AH,#H'0000
	beq	?L47
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(0,X)
?LBB30:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0003
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE30:
?LBB31:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AL,#H'07D0
	st	AL,@(H'0002,Y)
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	ld	AL,#H'004E
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE31:
	bra	(?L43)
?L47:
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	_sendRfcommRegisterCfm
?LBE29:
	bra	(?L43)
?L44:
?LBB32:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'0003
	ld	X,@(H'0004,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0003,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'004A
	bsr	$_MessageSendConditionallyOnTask
?L43:
?LBE32:
?LBE28:
?LBE_connectionHandleRfcommRegisterReq:
	leave	#8
;.stabn	192,0,0,?LBB29
;.stabn	192,0,0,?LBB30
;.stabn	224,0,0,?LBE30
;.stabn	192,0,0,?LBB31
;.stabn	224,0,0,?LBE31
;.stabn	224,0,0,?LBE29
;.stabn	192,0,0,?LBB32
;.stabn	224,0,0,?LBE32
$_connectionHandleRfcommRegisterCfm:
	enter	#5
?LBB_connectionHandleRfcommRegisterCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB33:
	ld	AL,#H'0001
	st	AL,@(H'0003,Y)
	bsr	$_connectionGetCmTask
	ld	AL,#H'004E
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	X,@(H'0001,Y)
	tst	@(0,X)
	beq	?L50
	ld	X,@(H'0002,Y)
	tst	@(H'0003,X)
	beq	?L52
?LBB34:
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	AH,#H'0001
	ld	AL,#H'0021
	bsr	$_connectionUpdateTaskMap
	ld	AL,#H'0000
	st	AL,@(H'0003,Y)
?LBE34:
	bra	(?L53)
?L52:
	ld	AH,#H'0021
	bsr	_deleteTaskMap
?L53:
	tst	@(H'0003,Y)
	bne	?L54
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	bra	(?L55)
?L54:
	ld	AL,#H'0000
?L55:
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,@(H'0003,Y)
	bsr	_sendRfcommRegisterCfm
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?L50:
?LBE33:
?LBE_connectionHandleRfcommRegisterCfm:
	leave	#5
;.stabn	192,0,0,?LBB33
;.stabn	192,0,0,?LBB34
;.stabn	224,0,0,?LBE34
;.stabn	224,0,0,?LBE33
$_connectionHandleRfcommRegisterTimeout:
	enter	#3
?LBB_connectionHandleRfcommRegisterTimeout:
	st	AH,@(H'0001,Y)
	ld	AH,#H'0021
	bsr	_deleteTaskMap
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	_sendRfcommRegisterCfm
?LBE_connectionHandleRfcommRegisterTimeout:
	leave	#3
$_connectionHandleRfcommConnectReq:
	enter	#12
?LBB_connectionHandleRfcommConnectReq:
	st	AH,@(H'0004,Y)
	st	AL,@(H'0005,Y)
	ld	X,@$XAP_AH
?LBB35:
	tst	@(H'0001,X)
	bne	?L58
	ld	X,@$XAP_AL
?LBB36:
	tst	@(H'0006,X)
	bne	?L59
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	st	AH,@H'fff8
	ld	AH,#H'0001
	ld	AL,@(0,X)
	bsr	$_connectionGetIdFromTaskMap
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0006,Y)
	bra	(?L60)
?L59:
	ld	X,@(H'0005,Y)
	ld	X,@(H'0006,X)
	st	X,@(H'0006,Y)
?L60:
	ld	AH,@(H'0006,Y)
	cmp	AH,#H'0021
	bne	?L61
	st	AH,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendRfcommConnectionCfm
	bra	(?L57)
?L61:
	ld	AH,@(H'0005,Y)
?LBB37:
	add	AH,#H'0001
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	AL,#H'00FF
	bsr	_addRfcommConnection
	st	AH,@(H'0007,Y)
	add	AH,#H'000C
	ld	AL,#H'000F
	ld	X,@(H'0005,Y)
	add	X,#H'0007
	bc2
	ld	AL,#H'0001
	ld	X,@(H'0007,Y)
	st	AL,@(H'0008,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'000A,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0001,X)
?LBB38:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'0004,X)
	ld	AH,@(H'0006,Y)
	st	AH,@(H'0005,X)
	bsr	$_connectionGetCmTask
	st	AH,@H'fff8
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'000A,X)
	ld	AL,@(H'000B,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@H'fff8
	ld	AL,#H'004F
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE38:
?LBB39:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	AL,#H'0005
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(H'0007,Y)
	add	AL,#H'0001
	bsr	$_connectionConvertBdaddr_t
	ld	AL,#H'0003
	ld	X,@(H'0009,Y)
	st	AL,@(H'0005,X)
	ld	AL,#H'0000
	st	AL,@(H'0008,X)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'000C,X)
	cmp	AH,#H'037A
	bcz	?L63
	ld	X,@(H'0009,Y)
	st	AH,@(H'0007,X)
	bra	(?L64)
?L63:
	ld	AL,#H'037A
	ld	X,@(H'0009,Y)
	st	AL,@(H'0007,X)
?L64:
	ld	AL,#H'00FF
	ld	X,@(H'0009,Y)
	st	AL,@(H'0006,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE39:
?LBE37:
?LBE36:
	bra	(?L57)
?L58:
?LBB40:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'000A,Y)
	ld	AL,#H'0016
	ld	X,@(H'0005,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'000A,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
	add	AL,#H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'004B
	bsr	$_MessageSendConditionallyOnTask
?L57:
?LBE40:
?LBE35:
?LBE_connectionHandleRfcommConnectReq:
	leave	#12
;.stabn	192,0,0,?LBB36
;.stabn	192,0,0,?LBB37
;.stabn	192,0,0,?LBB38
;.stabn	224,0,0,?LBE38
;.stabn	192,0,0,?LBB39
;.stabn	224,0,0,?LBE39
;.stabn	224,0,0,?LBE37
;.stabn	224,0,0,?LBE36
;.stabn	192,0,0,?LBB40
;.stabn	224,0,0,?LBE40
$_connectionHandleRfcommConnectTimeout:
	enter	#7
?LBB_connectionHandleRfcommConnectTimeout:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
?LBB41:
	add	AL,#H'0001
	st	AL,@(H'0005,Y)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(0,Y)
	ld	AH,@(H'0005,Y)
	ld	AL,#H'00FF
	bsr	_getRfcommConnection
	cmp	AH,#H'0000
	beq	?L69
	bsr	_endConnection
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0003
	bsr	_sendRfcommConnectionCfm
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(0,Y)
	ld	AH,@(H'0005,Y)
	ld	AL,#H'00FF
	bsr	_deleteRfcommConnection
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	bra	(?L68)
?L69:
;	bsr	$_Panic
	DC	((256*14)+9)
?L68:
?LBE41:
?LBE_connectionHandleRfcommConnectTimeout:
	leave	#7
;.stabn	192,0,0,?LBB41
;.stabn	224,0,0,?LBE41
$_connectionHandleRfcommConnectRes:
	enter	#6
?LBB_connectionHandleRfcommConnectRes:
	st	AH,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB42:
	ld	AL,@(H'0006,X)
	ld	AH,#H'0001
	bsr	$_connectionFindTaskMap
	cmp	AH,#H'0000
	bne	?L72
	ld	AL,#H'0021
	st	AL,@(0,Y)
	st	AH,@(H'0001,Y)
	st	AH,@(H'0002,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendRfcommConnectionCfm
	bra	(?L71)
?L72:
	ld	AH,@(H'0003,Y)
?LBB43:
	add	AH,#H'0002
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(0,Y)
	ld	AL,#H'00FF
	bsr	_getRfcommConnection
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	beq	?L74
	add	AH,#H'000C
	ld	AL,#H'000F
	ld	X,@(H'0003,Y)
	add	X,#H'0007
	bc2
	ld	X,@(H'0003,Y)
	tst	@(H'0001,X)
	beq	?L75
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0008,X)
	cmp	AL,#H'0003
	bne	?L76
	ld	AL,#H'0001
	st	AL,@(0,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	bsr	_sendEstablishRes
	ld	AL,#H'0004
	ld	X,@(H'0004,Y)
	st	AL,@(H'0008,X)
	ld	AH,@$XAP_UXL
	bsr	_startControlPhase
	bra	(?L71)
?L76:
?LBB44:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0021
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0004,Y)
	cmp	AL,@(H'0009,X)
	beq	?L88
	bcc	?L78
?L88:
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0009,X)
	bra	(?L79)
?L78:
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0009,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
?L79:
	ld	X,@(H'0004,Y)
	tst	@(H'000B,X)
	beq	?L80
	ld	AL,#H'0001
	bra	(?L86)
?L80:
	ld	AL,#H'0000
?L86:
	ld	X,@H'fff8
	st	AL,@(H'0004,X)
	ld	AL,#H'0000
	ld	X,@H'fff8
	st	AL,@(H'0005,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE44:
	bra	(?L71)
?L75:
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0008,X)
	cmp	AL,#H'0003
	bne	?L83
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	bsr	_sendEstablishRes
	bra	(?L71)
?L83:
	ld	AL,#H'0000
	ld	X,@(H'0004,Y)
	st	AL,@(H'0008,X)
	ld	AH,@$XAP_UXL
	bsr	_endConnection
	bra	(?L71)
?L74:
;	bsr	$_Panic
	DC	((256*14)+9)
?L71:
?LBE43:
?LBE42:
?LBE_connectionHandleRfcommConnectRes:
	leave	#6
;.stabn	192,0,0,?LBB42
;.stabn	192,0,0,?LBB43
;.stabn	192,0,0,?LBB44
;.stabn	224,0,0,?LBE44
;.stabn	224,0,0,?LBE43
;.stabn	224,0,0,?LBE42
$_connectionHandleRfcommDisconnectReq:
	enter	#2
?LBB_connectionHandleRfcommDisconnectReq:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
?LBB45:
	tst	@(H'0001,X)
	bne	?L95
?LBB46:
	ld	AH,#H'0003
	bsr	$_connectionGetInstanceByState
	ld	X,@$XAP_AH
	cmp	AH,#H'0000
	beq	?L93
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	bsr	_releaseServerChannelNoSink
	bra	(?L90)
?L93:
	ld	X,@(0,Y)
?L95:
	ld	AH,@(H'0001,X)
	bsr	_releaseServerChannel
?L90:
?LBE46:
?LBE45:
?LBE_connectionHandleRfcommDisconnectReq:
	leave	#2
;.stabn	192,0,0,?LBB46
;.stabn	224,0,0,?LBE46
$_connectionHandleRfcommControlReq:
	enter	#2
?LBB_connectionHandleRfcommControlReq:
	ld	X,@$XAP_AH
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	bsr	_sendControlSignal
?LBE_connectionHandleRfcommControlReq:
	leave	#2
$_connectionHandleRfcommStartCfm:
	enter	#10
?LBB_connectionHandleRfcommStartCfm:
	st	AH,@(H'0007,Y)
	st	AL,@(H'0008,Y)
?LBB47:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_connectionConvertBdaddr
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	ld	AL,#H'00FF
	bsr	_getRfcommConnection
	cmp	AH,#H'0000
	beq	?L98
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0007,X)
	cmp	AL,#H'0001
	beq	?L100
	cmp	AL,#H'0001
	bcs	?L102
	cmp	AL,#H'0029
	beq	?L102
	bra	(?L103)
?L100:
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0005,X)
	bra	(?L97)
?L102:
	ld	AL,#H'0002
	ld	X,@$XAP_AH
	st	AL,@(H'0008,X)
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0005,X)
	bsr	_startParnegPhase
	bra	(?L106)
?L103:
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	st	X,@(H'0002,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0007,X)
	ld	AL,#H'0001
	bsr	_sendRfcommConnectionCfm
	bsr	$_connectionGetCmTask
	ld	AL,#H'004F
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	ld	AL,#H'00FF
	bsr	_deleteRfcommConnection
?L106:
	ld	AL,#H'0000
	ld	X,@(H'0007,Y)
	st	AL,@(H'0001,X)
	bra	(?L97)
?L98:
	ld	X,@(H'0008,Y)
	ld	AH,@(H'0006,X)
	bsr	_closeMuxSession
?L97:
?LBE47:
?LBE_connectionHandleRfcommStartCfm:
	leave	#10
;.stabn	192,0,0,?LBB47
;.stabn	224,0,0,?LBE47
$_connectionHandleRfcommStartInd:
	enter	#8
?LBB_connectionHandleRfcommStartInd:
	st	AH,@(H'0005,Y)
	ld	AL,@$XAP_AH
?LBB48:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0006,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0006,Y)
	cmp	AH,#H'0000
	bne	?L111
	ld	AL,#H'0021
?LBB49:
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0006,X)
	bsr	_addRfcommConnection
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(H'0008,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0008,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0009,X)
	ld	AL,#H'00FF
	st	AL,@(H'0006,X)
?L111:
?LBE49:
?LBB50:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0006
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	AL,#H'0001
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0007,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0008,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	AL,#-H'0001
	st	AL,@(H'0005,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE50:
?LBE48:
?LBE_connectionHandleRfcommStartInd:
	leave	#8
;.stabn	192,0,0,?LBB48
;.stabn	192,0,0,?LBB49
;.stabn	224,0,0,?LBE49
;.stabn	192,0,0,?LBB50
;.stabn	224,0,0,?LBE50
;.stabn	224,0,0,?LBE48
$_connectionHandleRfcommStartCmpInd:
	enter	#3
?LBB_connectionHandleRfcommStartCmpInd:
	st	AH,@(H'0001,Y)
?LBB51:
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	cmp	AH,#H'0000
	beq	?L113
	ld	X,@(H'0001,Y)
	tst	@(H'0003,X)
	bne	?L114
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0009,X)
	ld	AL,#H'0002
	st	AL,@(H'0008,X)
	bra	(?L112)
?L114:
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	bsr	_deleteRfcommConnection
	bra	(?L112)
?L113:
;	bsr	$_Panic
	DC	((256*14)+9)
?L112:
?LBE51:
?LBE_connectionHandleRfcommStartCmpInd:
	leave	#3
;.stabn	192,0,0,?LBB51
;.stabn	224,0,0,?LBE51
$_connectionHandleRfcommParnegInd:
	enter	#11
?LBB_connectionHandleRfcommParnegInd:
	st	AH,@(H'0006,Y)
	ld	X,@$XAP_AH
?LBB52:
	ld	AL,@(H'0003,X)
	ld	AH,#H'0001
	bsr	$_connectionCheckIdInTaskMap
	cmp	AH,#H'0000
	bne	?L118
	ld	X,@(H'0006,Y)
?LBB53:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
;	bsr	$_StreamRfcommSink
	DC	((256*103)+9)
	cmp	AH,#H'0000
	beq	?L132
	bsr	_releaseServerChannel
	bra	(?L117)
?L118:
?LBE53:
?LBB54:
	ld	AL,#H'00FF
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0007,Y)
	cmp	AH,#H'0000
	beq	?L122
	add	AH,#H'0001
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0007,Y)
	cmp	AL,@(H'0009,X)
	bcz	?L124
	ld	AL,@(H'0009,X)
?L124:
	st	AL,@(0,Y)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0001,Y)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	bsr	_sendRfcommConnectionInd
	cmp	AH,#H'0000
	beq	?L132
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'0006,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0007,Y)
	cmp	AL,@(H'0009,X)
	beq	?L134
	bcc	?L125
?L134:
	st	AL,@(H'0009,X)
?L125:
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'000B,X)
	bra	(?L117)
?L122:
	ld	X,@(H'0006,Y)
?LBB55:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	beq	?L128
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0004,X)
	ld	X,@(H'0008,Y)
	cmp	AH,@(H'0009,X)
	beq	?L135
	bcc	?L129
?L135:
	st	AH,@(H'0009,X)
?L129:
?LBB56:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0021
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0009,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0008,Y)
	ld	AL,@(H'000B,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE56:
	bra	(?L117)
?L128:
	ld	AL,@(H'0006,Y)
?LBB57:
	add	AL,#H'0007
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	ld	AL,@(H'0002,X)
	bsr	_addRfcommConnection
	st	AH,@H'fff8
	ld	AL,#H'0002
	ld	X,@$XAP_AH
	st	AL,@(H'0008,X)
	ld	X,@(H'0006,Y)
	ld	X,@(H'0004,X)
	st	X,@(H'0009,Y)
	ld	AL,@$XAP_UXL
	ld	X,@$XAP_AH
	st	AL,@(H'0009,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'000B,X)
	add	AH,#H'0001
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(H'0001,Y)
	ld	AL,@H'ffff
	ld	AL,@(H'0006,X)
	bsr	_sendRfcommConnectionInd
	cmp	AH,#H'0000
	bne	?L117
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	ld	AL,@(H'0002,X)
	bsr	_deleteRfcommConnection
?L132:
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_releaseServerChannelNoSink
?L117:
?LBE57:
?LBE55:
?LBE54:
?LBE52:
?LBE_connectionHandleRfcommParnegInd:
	leave	#11
;.stabn	192,0,0,?LBB52
;.stabn	192,0,0,?LBB53
;.stabn	224,0,0,?LBE53
;.stabn	192,0,0,?LBB54
;.stabn	192,0,0,?LBB55
;.stabn	192,0,0,?LBB56
;.stabn	224,0,0,?LBE56
;.stabn	192,0,0,?LBB57
;.stabn	224,0,0,?LBE57
;.stabn	224,0,0,?LBE55
;.stabn	224,0,0,?LBE54
;.stabn	224,0,0,?LBE52
$_connectionHandleRfcommParnegCfm:
	enter	#3
?LBB_connectionHandleRfcommParnegCfm:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB58:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	cmp	AH,#H'0000
	beq	?L137
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0009,X)
	bsr	_startEstablishPhase
	bra	(?L136)
?L137:
;	bsr	$_Panic
	DC	((256*14)+9)
?L136:
?LBE58:
?LBE_connectionHandleRfcommParnegCfm:
	leave	#3
;.stabn	192,0,0,?LBB58
;.stabn	224,0,0,?LBE58
$_connectionHandleRfcommEstablishInd:
	enter	#10
?LBB_connectionHandleRfcommEstablishInd:
	st	AH,@(H'0006,Y)
	ld	X,@$XAP_AH
?LBB59:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0007,Y)
	cmp	AH,#H'0000
	beq	?L140
	ld	AL,#H'0001
	st	AL,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	bsr	_sendEstablishRes
	ld	AL,#H'0004
	ld	X,@(H'0007,Y)
	st	AL,@(H'0008,X)
	ld	AH,@$XAP_UXL
	bsr	_startControlPhase
	bra	(?L139)
?L140:
	ld	X,@(H'0006,Y)
?LBB60:
	ld	AL,@(H'0003,X)
	ld	AH,#H'0001
	bsr	$_connectionCheckIdInTaskMap
	cmp	AH,#H'0000
	beq	?L142
	ld	AL,@(H'0006,Y)
?LBB61:
	add	AL,#H'0004
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	ld	AL,@(H'0002,X)
	bsr	_addRfcommConnection
	ld	X,@$XAP_AH
	ld	AL,#H'0003
	st	AL,@(H'0008,X)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	st	AH,@(H'0001,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	bsr	_sendRfcommConnectionInd
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	bne	?L139
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	ld	AL,@(H'0002,X)
	bsr	_deleteRfcommConnection
	ld	AL,@(H'0008,Y)
	bra	(?L145)
?L142:
?LBE61:
	ld	AL,#H'0000
?L145:
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	bsr	_sendEstablishRes
?L139:
?LBE60:
?LBE59:
?LBE_connectionHandleRfcommEstablishInd:
	leave	#10
;.stabn	192,0,0,?LBB59
;.stabn	192,0,0,?LBB60
;.stabn	192,0,0,?LBB61
;.stabn	224,0,0,?LBE61
;.stabn	224,0,0,?LBE60
;.stabn	224,0,0,?LBE59
$_connectionHandleRfcommEstablishCfm:
	enter	#6
?LBB_connectionHandleRfcommEstablishCfm:
	st	AH,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB62:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	beq	?L146
	ld	X,@(H'0003,Y)
	tst	@(H'0004,X)
	bne	?L148
	ld	AL,#H'0004
	ld	X,@$XAP_AH
	st	AL,@(H'0008,X)
	bsr	_startControlPhase
	bra	(?L146)
?L148:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	cmp	AL,#H'0015
	bne	?L150
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0007
	bra	(?L154)
?L150:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	cmp	AL,#H'0011
	bne	?L152
	ld	AH,@(H'0004,Y)
	bsr	_endConnection
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0004
	bra	(?L154)
?L152:
	ld	AH,@(H'0004,Y)
	bsr	_endConnection
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0001
?L154:
	bsr	_sendRfcommConnectionCfm
	bsr	$_connectionGetCmTask
	ld	AL,#H'004F
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_deleteRfcommConnection
?L146:
?LBE62:
?LBE_connectionHandleRfcommEstablishCfm:
	leave	#6
;.stabn	192,0,0,?LBB62
;.stabn	224,0,0,?LBE62
$_connectionHandleRfcommControlInd:
	enter	#8
?LBB_connectionHandleRfcommControlInd:
	st	AH,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB63:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	beq	?L158
	ld	X,@(H'0003,Y)
?LBB64:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
;	bsr	$_StreamRfcommSink
	DC	((256*103)+9)
	st	AH,@(H'0005,Y)
	bsr	$_connectionGetCmTask
	ld	AL,#H'004F
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0009,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0000
	bsr	_sendRfcommConnectionCfm
	ld	AH,@(H'0005,Y)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0007,X)
;	bsr	$_MessageSinkTask
	DC	((256*85)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_deleteRfcommConnection
?LBE64:
	bra	(?L157)
?L158:
	ld	X,@(H'0003,Y)
?LBB65:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
;	bsr	$_StreamRfcommSink
	DC	((256*103)+9)
	st	AH,@(H'0006,Y)
;	bsr	$_MessageSinkGetTask
	DC	((256*86)+9)
	cmp	AH,#H'0000
	beq	?L157
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0006,Y)
	bsr	_sendRfcommControlInd
?L157:
?LBE65:
?LBE63:
?LBE_connectionHandleRfcommControlInd:
	leave	#8
;.stabn	192,0,0,?LBB63
;.stabn	192,0,0,?LBB64
;.stabn	224,0,0,?LBE64
;.stabn	192,0,0,?LBB65
;.stabn	224,0,0,?LBE65
;.stabn	224,0,0,?LBE63
$_connectionHandleRfcommReleaseInd:
	enter	#7
?LBB_connectionHandleRfcommReleaseInd:
	st	AH,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB66:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	beq	?L162
	ld	X,@$XAP_AH
	tst	@(H'0007,X)
	beq	?L161
	bsr	$_connectionGetCmTask
	ld	AL,#H'004F
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	X,@(H'0004,Y)
	tst	@(H'0008,X)
	beq	?L164
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	cmp	AL,#H'0011
	bne	?L165
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0004
	bra	(?L175)
?L165:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0001
?L175:
	bsr	_sendRfcommConnectionCfm
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0005,X)
	cmp	AL,#H'0001
	bne	?L169
	ld	AL,@(H'0004,X)
	cmp	AL,#H'0013
	beq	?L169
	cmp	AL,#H'0021
	bne	?L168
?L169:
	ld	X,@(H'0003,Y)
	tst	@(H'0005,X)
	bne	?L164
?L168:
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	bsr	_closeMuxSession
?L164:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_deleteRfcommConnection
	bra	(?L161)
?L162:
	ld	X,@(H'0003,Y)
?LBB67:
	ld	AL,@(H'0005,X)
	cmp	AL,#H'0001
	bne	?L173
	ld	AL,@(H'0004,X)
	cmp	AL,#H'0013
	beq	?L173
	cmp	AL,#H'0021
	bne	?L172
?L173:
	ld	X,@(H'0003,Y)
	tst	@(H'0005,X)
	bne	?L171
?L172:
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	bsr	_closeMuxSession
?L171:
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
;	bsr	$_StreamRfcommSink
	DC	((256*103)+9)
	st	AH,@(H'0005,Y)
	cmp	AH,#H'0000
	beq	?L161
;	bsr	$_MessageSinkGetTask
	DC	((256*86)+9)
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	bsr	_sendRfcommDisconnectInd
?L161:
?LBE67:
?LBE66:
?LBE_connectionHandleRfcommReleaseInd:
	leave	#7
;.stabn	192,0,0,?LBB66
;.stabn	192,0,0,?LBB67
;.stabn	224,0,0,?LBE67
;.stabn	224,0,0,?LBE66
$_connectionHandleRfcommPortNegInd:
	enter	#2
?LBB_connectionHandleRfcommPortNegInd:
	st	AH,@(0,Y)
?LBB68:
	ld	AH,#H'000C
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(-1,Y)
	ld	AL,#H'0025
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	add	AH,#H'0003
	ld	AL,#H'0009
	ld	X,@(0,Y)
	add	X,#H'0005
	bc2
	ld	AH,@(-1,Y)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE68:
?LBE_connectionHandleRfcommPortNegInd:
	leave	#2
;.stabn	192,0,0,?LBB68
;.stabn	224,0,0,?LBE68
	ENDMOD

;# Function pattern *movqi2 used[0] = 395 used[1] = 21 used[3] = 1 total = 417
;# Function pattern *movqi3 used[0] = 552 total = 552
;# Function pattern *movhi used[2] = 1 used[3] = 1 total = 2
;# Function pattern *addqi0 used[0] = 18 total = 18
;# Function pattern *addqi2 used[0] = 19 total = 19
;# Function pattern jump used[0] = 40 total = 40
;# Function pattern *call1 used[0] = 73 total = 73
;# Function pattern *call_value1 used[0] = 89 total = 89
;# Function pattern tablejump_1 used[0] = 1 total = 1
;# Function pattern *movstrqi2 used[0] = 7 total = 7
;# Function pattern movstrqi+3 used[0] = 31 used[1] = 19 total = 50
;# Function pattern movstrqi+4 used[1] = 1 used[2] = 3 total = 4
;# Function pattern movstrqi+5 used[0] = 17 total = 17
	MODULE	sdp_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	CONST
_SdpPingServiceRequest:
	dc	H'0035
	dc	H'0005
	dc	H'001A
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	.CODE
_sendSdpCloseSearchCfm:
	enter	#4
?LBB_sendSdpCloseSearchCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	cmp	AH,#H'0000
	beq	?L1
?LBB3:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'702C
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_sendSdpCloseSearchCfm:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
_sendSearchRequest:
	enter	#3
?LBB_sendSearchRequest:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
	ld	X,@$XAP_AL
	tst	@(0,X)
	beq	?L4
	ld	AH,@$XAP_AL
	add	AH,#H'0002
	bsr	$_BdaddrIsZero
	cmp	AH,#H'0000
	beq	?L5
	ld	AH,#H'0001
	bra	(?L3)
?L5:
	ld	X,@(H'0001,Y)
	tst	@(H'0001,X)
	bne	?L13
	ld	AH,@(H'0001,Y)
	add	AH,#H'0002
	ld	AL,@(H'0003,Y)
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	bne	?L12
	ld	AH,#H'0003
	bra	(?L3)
?L4:
	ld	X,@(H'0001,Y)
	tst	@(H'0001,X)
	bne	?L13
	bsr	$_connectionGetCmTask
	ld	AL,@(0,Y)
	cmp	AL,@$XAP_AH
	bne	?L12
?L13:
	ld	AH,#H'0002
	bra	(?L3)
?L12:
	ld	AH,#H'0000
?L3:
?LBE_sendSearchRequest:
	leave	#3
$_connectionHandleSdpRegisterRequest:
	enter	#7
?LBB_connectionHandleSdpRegisterRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB4:
	tst	@(0,X)
	bne	?L17
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
?LBB5:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'000E
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0004,Y)
	st	AH,@(H'0002,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE5:
	bra	(?L16)
?L17:
?LBB6:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0003
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0039
	bsr	$_MessageSendConditionallyOnTask
?L16:
?LBE6:
?LBE4:
?LBE_connectionHandleSdpRegisterRequest:
	leave	#7
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
$_connectionHandleSdpRegisterCfm:
	enter	#4
?LBB_connectionHandleSdpRegisterCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB7:
	tst	@(0,X)
	beq	?L19
?LBB8:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7029
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?L19:
?LBE8:
?LBE7:
?LBE_connectionHandleSdpRegisterCfm:
	leave	#4
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
$_connectionHandleSdpUnregisterRequest:
	enter	#6
?LBB_connectionHandleSdpUnregisterRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB9:
	tst	@(0,X)
	bne	?L22
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
?LBB10:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0010
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE10:
	bra	(?L21)
?L22:
?LBB11:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0003
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'003A
	bsr	$_MessageSendConditionallyOnTask
?L21:
?LBE11:
?LBE9:
?LBE_connectionHandleSdpUnregisterRequest:
	leave	#6
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
$_connectionHandleSdpUnregisterCfm:
	enter	#4
?LBB_connectionHandleSdpUnregisterCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB12:
	tst	@(0,X)
	beq	?L24
?LBB13:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'702A
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?L24:
?LBE13:
?LBE12:
?LBE_connectionHandleSdpUnregisterCfm:
	leave	#4
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
$_connectionHandleSdpServerConfigMtu:
	enter	#6
?LBB_connectionHandleSdpServerConfigMtu:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB14:
	tst	@(0,X)
	bne	?L27
?LBB15:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0012
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE15:
	bra	(?L26)
?L27:
?LBB16:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'003B
	bsr	$_MessageSendConditionallyOnTask
?L26:
?LBE16:
?LBE14:
?LBE_connectionHandleSdpServerConfigMtu:
	leave	#6
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
$_connectionHandleSdpClientConfigMtu:
	enter	#6
?LBB_connectionHandleSdpClientConfigMtu:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB17:
	tst	@(0,X)
	bne	?L30
?LBB18:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'000B
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE18:
	bra	(?L29)
?L30:
?LBB19:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'003C
	bsr	$_MessageSendConditionallyOnTask
?L29:
?LBE19:
?LBE17:
?LBE_connectionHandleSdpClientConfigMtu:
	leave	#6
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
$_connectionHandleSdpOpenSearchRequest:
	enter	#7
?LBB_connectionHandleSdpOpenSearchRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB20:
	tst	@(0,X)
	bne	?L33
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0004,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0005,X)
?LBB21:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0008
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0002
	ld	AL,@(H'0003,Y)
	add	AL,#H'0001
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0004,Y)
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE21:
	bra	(?L32)
?L33:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	cmp	AL,@$XAP_AH
	beq	?L32
?LBB22:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0005
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'003D
	bsr	$_MessageSendConditionallyOnTask
?L32:
?LBE22:
?LBE20:
?LBE_connectionHandleSdpOpenSearchRequest:
	leave	#7
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
;.stabn	192,0,0,?LBB22
;.stabn	224,0,0,?LBE22
$_connectionHandleSdpOpenSearchCfm:
	enter	#7
?LBB_connectionHandleSdpOpenSearchCfm:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
?LBB23:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	cmp	AL,@$XAP_AH
	bne	?L38
	ld	X,@(H'0004,Y)
?LBB24:
	tst	@(H'0002,X)
	bne	?L40
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	add	AL,#H'0002
	ld	X,#H'0001
	st	X,@(0,Y)
	ld	X,#H'0007
	st	X,@(H'0001,Y)
	ld	X,#(_SdpPingServiceRequest)
	st	X,@(H'0002,Y)
	bsr	$_ConnectionSdpServiceSearchRequest
?LBE24:
	bra	(?L40)
?L38:
	ld	X,@(H'0003,Y)
	tst	@(0,X)
	beq	?L40
?LBB25:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertSdpOpenStatus
	ld	X,@(H'0005,Y)
	st	AH,@(0,X)
	st	X,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	ld	AL,#H'702B
	bsr	$_MessageSend
?L40:
	ld	X,@(H'0004,Y)
?LBE25:
	tst	@(H'0002,X)
	beq	?L37
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(0,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	bsr	$_BdaddrSetZero
?L37:
?LBE23:
?LBE_connectionHandleSdpOpenSearchCfm:
	leave	#7
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
;.stabn	192,0,0,?LBB25
;.stabn	224,0,0,?LBE25
$_connectionHandleSdpCloseSearchRequest:
	enter	#3
?LBB_connectionHandleSdpCloseSearchRequest:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB26:
	tst	@(0,X)
	beq	?L45
	add	AH,#H'0002
	bsr	$_BdaddrIsZero
	cmp	AH,#H'0000
	bne	?L45
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0001,Y)
	cmp	AL,@(0,X)
	bne	?L47
?LBB27:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'000A
	st	AL,@(0,X)
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE27:
	bra	(?L44)
?L47:
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0003
	bra	(?L51)
?L45:
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
?L51:
	bsr	_sendSdpCloseSearchCfm
?L44:
?LBE26:
?LBE_connectionHandleSdpCloseSearchRequest:
	leave	#3
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
$_connectionHandleSdpCloseSearchInd:
	enter	#2
?LBB_connectionHandleSdpCloseSearchInd:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	ld	X,@$XAP_AL
	ld	AL,@(H'0002,X)
	bsr	_sendSdpCloseSearchCfm
	ld	AL,#H'0000
	ld	X,@(0,Y)
	st	AL,@(0,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	bsr	$_BdaddrSetZero
?LBE_connectionHandleSdpCloseSearchInd:
	leave	#2
$_connectionHandleSdpServiceSearchRequest:
	enter	#10
?LBB_connectionHandleSdpServiceSearchRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?LBB28:
	add	AL,#H'0001
	st	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	ld	AL,@(H'0002,Y)
	bsr	_sendSearchRequest
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	bne	?L55
?LBB29:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	add	AH,#H'0002
	ld	AL,@(H'0005,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0006,X)
	ld	X,@(H'0003,Y)
	tst	@(H'0005,X)
	beq	?L56
	ld	AH,@(H'0006,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0007,X)
	bra	(?L57)
?L56:
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	st	AL,@(H'0007,X)
?L57:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0008,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0001,X)
?LBE29:
	bra	(?L54)
?L55:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	cmp	AL,@$XAP_AH
	beq	?L54
?LBB30:
	ld	AL,#H'0000
	st	AL,@(H'0007,Y)
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'0008
	ld	X,@(H'0003,Y)
	bc2
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0001
	beq	?L67
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L62
	ld	X,@(H'0002,Y)
	add	X,#H'0001
	bra	(?L66)
?L62:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0003
	bne	?L64
?L67:
	ld	X,@(H'0002,Y)
?L66:
	st	X,@(H'0007,Y)
	bra	(?L61)
?L64:
;	bsr	$_Panic
	DC	((256*14)+9)
?L61:
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'003F
	bsr	$_MessageSendConditionallyOnTask
?L54:
?LBE30:
?LBE28:
?LBE_connectionHandleSdpServiceSearchRequest:
	leave	#10
;.stabn	192,0,0,?LBB28
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
;.stabn	192,0,0,?LBB30
;.stabn	224,0,0,?LBE30
;.stabn	224,0,0,?LBE28
$_connectionHandleSdpServiceSearchCfm:
	enter	#9
?LBB_connectionHandleSdpServiceSearchCfm:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
?LBB31:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	cmp	AL,@$XAP_AH
	bne	?L73
?LBB32:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0005,Y)
	st	AH,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0004,X)
	ld	AL,#H'0001
	st	AL,@(H'0007,X)
	ld	AL,#H'0007
	st	AL,@(H'0005,X)
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0005,Y)
	st	AH,@(H'0006,X)
	ld	AL,#H'0007
	st	AL,@(0,Y)
	ld	AH,@(H'0006,X)
	ld	AL,#(_SdpPingServiceRequest)
;	bsr	$_memmove
	DC	((256*6)+9)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0005,Y)
	st	X,@(0,Y)
	ld	AL,#H'07D0
	st	AL,@(H'0002,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	ld	AL,#H'003F
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
	ld	X,@(H'0004,Y)
	tst	@(H'0003,X)
	beq	?L81
?LBB33:
	ld	AH,@(H'0004,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
;	bsr	$_free
	DC	((256*4)+9)
	bra	(?L81)
?L73:
	ld	X,@(H'0003,Y)
?LBE33:
?LBE32:
	tst	@(H'0001,X)
	beq	?L76
	ld	X,@(H'0004,Y)
?LBB34:
	ld	AH,@(H'0003,X)
	add	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0005,X)
	bsr	$_connectionConvertSdpSearchStatus
	ld	X,@(H'0006,Y)
	st	AH,@(0,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0002,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0003
	ld	AL,@(H'0004,Y)
	add	AL,#H'0009
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0004,Y)
	tst	@(H'0003,X)
	beq	?L77
?LBB35:
	ld	AH,@(H'0004,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0007,Y)
	ld	AH,@(H'0006,Y)
	add	AH,#H'0008
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0007,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AH,@(H'0007,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE35:
	bra	(?L78)
?L77:
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	st	AL,@(H'0008,X)
?L78:
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'702D
	bsr	$_MessageSend
?L81:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
?LBE34:
	bra	(?L72)
?L76:
	ld	X,@(H'0004,Y)
	tst	@(H'0003,X)
	beq	?L72
?LBB36:
	ld	AH,@(H'0004,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
;	bsr	$_free
	DC	((256*4)+9)
?L72:
?LBE36:
?LBE31:
?LBE_connectionHandleSdpServiceSearchCfm:
	leave	#9
;.stabn	192,0,0,?LBB32
;.stabn	192,0,0,?LBB33
;.stabn	224,0,0,?LBE33
;.stabn	224,0,0,?LBE32
;.stabn	192,0,0,?LBB34
;.stabn	192,0,0,?LBB35
;.stabn	224,0,0,?LBE35
;.stabn	224,0,0,?LBE34
;.stabn	192,0,0,?LBB36
;.stabn	224,0,0,?LBE36
$_connectionHandleSdpAttributeSearchRequest:
	enter	#10
?LBB_connectionHandleSdpAttributeSearchRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	AH,@$XAP_AL
?LBB37:
	add	AH,#H'0001
	st	AH,@(H'0005,Y)
	st	AH,@(0,Y)
	ld	X,@$XAP_AL
	ld	AH,@(0,X)
	ld	AL,@(H'0002,Y)
	bsr	_sendSearchRequest
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	bne	?L84
?LBB38:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'0003
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AH,@(H'0004,Y)
	st	AH,@(H'0001,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	ld	AL,@(H'0005,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0006,X)
	st	AL,@(H'0007,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0008,X)
	ld	X,@(H'0003,Y)
	tst	@(H'0007,X)
	beq	?L85
	ld	AH,@(H'0008,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0009,X)
	bra	(?L86)
?L85:
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	st	AL,@(H'0009,X)
?L86:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0009,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'000A,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0001,X)
?LBE38:
	bra	(?L83)
?L84:
?LBB39:
	ld	AH,#H'0000
	st	AH,@(H'0007,Y)
	ld	AH,#H'000A
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'000A
	ld	X,@(H'0003,Y)
	bc2
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0001
	bne	?L88
	ld	X,@(H'0002,Y)
	st	X,@(H'0007,Y)
	bra	(?L89)
?L88:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L90
	ld	AL,@(H'0002,Y)
	add	AL,#H'0001
	bra	(?L94)
?L90:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0003
	bne	?L92
	ld	AL,@(H'0002,Y)
?L94:
	st	AL,@(H'0007,Y)
	bra	(?L89)
?L92:
;	bsr	$_Panic
	DC	((256*14)+9)
?L89:
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0040
	bsr	$_MessageSendConditionallyOnTask
?L83:
?LBE39:
?LBE37:
?LBE_connectionHandleSdpAttributeSearchRequest:
	leave	#10
;.stabn	192,0,0,?LBB37
;.stabn	192,0,0,?LBB38
;.stabn	224,0,0,?LBE38
;.stabn	192,0,0,?LBB39
;.stabn	224,0,0,?LBE39
;.stabn	224,0,0,?LBE37
$_connectionHandleSdpAttributeSearchCfm:
	enter	#6
?LBB_connectionHandleSdpAttributeSearchCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB40:
	tst	@(H'0001,X)
	beq	?L99
	ld	X,@$XAP_AL
?LBB41:
	ld	AH,@(H'0002,X)
	add	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertSdpSearchStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	ld	AL,@(H'0002,Y)
	add	AL,#H'0008
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0006,X)
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	beq	?L100
?LBB42:
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0004,Y)
	ld	AH,@(H'0003,Y)
	add	AH,#H'0007
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AH,@(H'0004,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE42:
	bra	(?L101)
?L100:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0007,X)
?L101:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'702E
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0001,X)
?LBE41:
	bra	(?L98)
?L99:
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	beq	?L98
?LBB43:
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
;	bsr	$_free
	DC	((256*4)+9)
?L98:
?LBE43:
?LBE40:
?LBE_connectionHandleSdpAttributeSearchCfm:
	leave	#6
;.stabn	192,0,0,?LBB41
;.stabn	192,0,0,?LBB42
;.stabn	224,0,0,?LBE42
;.stabn	224,0,0,?LBE41
;.stabn	192,0,0,?LBB43
;.stabn	224,0,0,?LBE43
$_connectionHandleSdpServiceSearchAttrRequest:
	enter	#10
?LBB_connectionHandleSdpServiceSearchAttrRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?LBB44:
	add	AL,#H'0001
	st	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	ld	AL,@(H'0002,Y)
	bsr	_sendSearchRequest
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	bne	?L105
?LBB45:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'0005
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	add	AH,#H'0002
	ld	AL,@(H'0005,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0006,X)
	ld	X,@(H'0003,Y)
	tst	@(H'0006,X)
	beq	?L106
	ld	AH,@(H'0007,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0007,X)
	bra	(?L107)
?L106:
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	st	AL,@(H'0007,X)
?L107:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0008,X)
	ld	X,@(H'0003,Y)
	tst	@(H'0008,X)
	beq	?L108
	ld	AH,@(H'0009,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0009,X)
	bra	(?L109)
?L108:
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	st	AL,@(H'0009,X)
?L109:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'000A,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0001,X)
?LBE45:
	bra	(?L104)
?L105:
?LBB46:
	ld	AL,#H'0000
	st	AL,@(H'0007,Y)
	ld	AH,#H'000A
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'000A
	ld	X,@(H'0003,Y)
	bc2
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0001
	beq	?L118
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L113
	ld	X,@(H'0002,Y)
	add	X,#H'0001
	bra	(?L117)
?L113:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0003
	bne	?L115
?L118:
	ld	X,@(H'0002,Y)
?L117:
	st	X,@(H'0007,Y)
	bra	(?L112)
?L115:
;	bsr	$_Panic
	DC	((256*14)+9)
?L112:
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0041
	bsr	$_MessageSendConditionallyOnTask
?L104:
?LBE46:
?LBE44:
?LBE_connectionHandleSdpServiceSearchAttrRequest:
	leave	#10
;.stabn	192,0,0,?LBB44
;.stabn	192,0,0,?LBB45
;.stabn	224,0,0,?LBE45
;.stabn	192,0,0,?LBB46
;.stabn	224,0,0,?LBE46
;.stabn	224,0,0,?LBE44
$_connectionHandleSdpServiceSearchAttributeCfm:
	enter	#6
?LBB_connectionHandleSdpServiceSearchAttributeCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB47:
	tst	@(H'0001,X)
	beq	?L123
	ld	X,@$XAP_AL
?LBB48:
	ld	AH,@(H'0003,X)
	add	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertSdpSearchStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0003
	ld	AL,@(H'0002,Y)
	add	AL,#H'000A
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0002,Y)
	tst	@(H'0003,X)
	beq	?L124
?LBB49:
	ld	AH,@(H'0004,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0004,Y)
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AH,@(H'0004,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE49:
	bra	(?L125)
?L124:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0008,X)
?L125:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'702F
	bsr	$_MessageSend
	ld	X,@(H'0002,Y)
	tst	@(H'0005,X)
	bne	?L122
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0001,X)
?LBE48:
	bra	(?L122)
?L123:
	ld	X,@(H'0002,Y)
	tst	@(H'0003,X)
	beq	?L122
?LBB50:
	ld	AH,@(H'0004,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
;	bsr	$_free
	DC	((256*4)+9)
?L122:
?LBE50:
?LBE47:
?LBE_connectionHandleSdpServiceSearchAttributeCfm:
	leave	#6
;.stabn	192,0,0,?LBB48
;.stabn	192,0,0,?LBB49
;.stabn	224,0,0,?LBE49
;.stabn	224,0,0,?LBE48
;.stabn	192,0,0,?LBB50
;.stabn	224,0,0,?LBE50
$_connectionHandleSdpTerminatePrimitiveRequest:
	enter	#1
?LBB_connectionHandleSdpTerminatePrimitiveRequest:
	ld	X,@$XAP_AH
?LBB51:
	tst	@(H'0001,X)
	beq	?L129
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	cmp	AL,@(H'0001,X)
	bne	?L129
?LBB52:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0007
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?L129:
?LBE52:
?LBE51:
?LBE_connectionHandleSdpTerminatePrimitiveRequest:
	leave	#1
;.stabn	192,0,0,?LBB52
;.stabn	224,0,0,?LBE52
	ENDMOD

;# Function pattern *movqi2 used[0] = 238 used[1] = 25 used[3] = 2 total = 265
;# Function pattern *movqi3 used[0] = 348 total = 348
;# Function pattern *movhi used[2] = 4 used[3] = 4 total = 8
;# Function pattern *addqi2 used[0] = 29 total = 29
;# Function pattern jump used[0] = 32 total = 32
;# Function pattern *call1 used[0] = 48 total = 48
;# Function pattern *call_value1 used[0] = 69 total = 69
;# Function pattern *movstrqi2 used[0] = 6 total = 6
;# Function pattern movstrqi+2 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 7 used[1] = 30 total = 37
;# Function pattern movstrqi+5 used[0] = 16 total = 16
	MODULE	connection_manager
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	VAR
_conn_list_head:
	DS	1
_multiple_channels_list_head:
	DS	1
_multiple_channels_entries:
	DS	1
_map?:
	DS	1
_mapSize:
	DS	1
	.CODE
_id_match:
	enter	#3
?LBB_id_match:
	st	AH,@(0,Y)
?LBB2:
	ld	AH,#H'0000
	st	AH,@(H'0001,Y)
	tst	@(0,Y)
	beq	?L2
	ld	X,@(0,Y)
	ld	AH,@(0,X)
	cmp	AH,@$XAP_AL
	bne	?L2
	cmp	AH,#H'0000
	beq	?L16
	cmp	AH,#H'0001
	bne	?L2
	ld	AL,@(H'0008,Y)
	cmp	AL,#H'0021
	bne	?L6
	ld	AH,@$XAP_UXL
	add	AH,#H'0001
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	bne	?L8
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	cmp	AL,@(H'0007,Y)
	bne	?L7
?L8:
	ld	AH,#H'0001
	st	AH,@(H'0001,Y)
?L7:
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_BdaddrIsZero
	cmp	AH,#H'0000
	beq	?L2
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	cmp	AL,@(H'0007,Y)
	bne	?L2
	ld	AL,@(H'0006,X)
	cmp	AL,#H'00FF
	bne	?L2
	bra	(?L25)
?L6:
	ld	AL,@(H'0007,Y)
	cmp	AL,#H'00FF
	bne	?L12
	ld	AH,@(0,Y)
	add	AH,#H'0001
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L2
	ld	X,@(0,Y)
	bra	(?L26)
?L12:
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	cmp	AL,@(H'0007,Y)
	bne	?L2
?L26:
	ld	AL,@(H'0006,X)
	cmp	AL,@(H'0008,Y)
	bne	?L2
	bra	(?L25)
?L16:
	ld	X,@(0,Y)
	ld	AL,@(H'0002,X)
	cmp	AL,@(H'0004,Y)
	bne	?L17
	cmp	AL,#H'0000
	bne	?L25
?L17:
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	cmp	AL,@(H'0003,Y)
	bne	?L19
	tst	@(H'0003,Y)
	beq	?L19
	tst	@(H'0004,Y)
	beq	?L19
	tst	@(H'0002,X)
	bne	?L19
	ld	AH,#H'0000
	bra	(?L24)
?L19:
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	cmp	AL,@(H'0003,Y)
	bne	?L2
	tst	@(H'0003,Y)
	beq	?L2
	tst	@(H'0002,X)
	bne	?L2
?L25:
	ld	AH,#H'0001
?L24:
	st	AH,@(H'0001,Y)
?L2:
?LBE2:
	ld	AH,@(H'0001,Y)
?LBE_id_match:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
_deleteElement:
	enter	#5
?LBB_deleteElement:
	st	AH,@(H'0001,Y)
?LBB3:
	ld	AL,@_mapSize
	add	AL,#-H'0001
	st	AL,@_mapSize
	lsl	#H'0010
	asr	#H'000E
	ld	AH,@$XAP_AL
;	bsr	$_malloc
	DC	((256*3)+9)
;	bsr	$_PanicNull
	DC	((256*15)+9)
	st	AH,@(H'0002,Y)
	tst	@(H'0001,Y)
	bne	?L40
	ld	X,@_map?
	add	X,#H'0004
	ld	AL,@_mapSize
	lsl	#H'0010
	asr	#H'000E
	st	AL,@(0,Y)
	ld	AH,@(H'0002,Y)
	bra	(?L43)
?L40:
	ld	AL,@(H'0001,Y)
	lsl	#H'0010
	asr	#H'000E
	st	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,@_map?
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AL,@_mapSize
	cmp	AL,@(H'0001,Y)
	beq	?L41
	ld	AH,@(H'0002,Y)
	add	AH,@(H'0003,Y)
	st	AH,@(-1,Y)
	ld	X,@(H'0003,Y)
	add	X,@_map?
	add	X,#H'0004
	sub	AL,@(H'0001,Y)
	lsl	#H'0010
	asr	#H'000E
	st	AL,@(0,Y)
	ld	AH,@(-1,Y)
?L43:
	ld	AL,@$XAP_UXL
;	bsr	$_memmove
	DC	((256*6)+9)
?L41:
	ld	AH,@_map?
;	bsr	$_free
	DC	((256*4)+9)
	ld	AL,@(H'0002,Y)
	st	AL,@_map?
?LBE3:
?LBE_deleteElement:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
$_connectionAddInstance:
	enter	#1
?LBB_connectionAddInstance:
	ld	X,@$XAP_AH
	ld	AL,@_conn_list_head
	st	AL,@(H'0022,X)
	st	AH,@_conn_list_head
?LBE_connectionAddInstance:
	leave	#1
$_connectionDeleteInstance:
	enter	#10
?LBB_connectionDeleteInstance:
	st	AH,@(H'0006,Y)
?LBB4:
	ld	AL,@_conn_list_head
	st	AL,@(H'0007,Y)
	st	AL,@(H'0008,Y)
	cmp	AL,#H'0000
	beq	?L59
?L57:
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'000A
	bc2
	ld	AH,@(H'0007,Y)
	ld	AL,@(H'0006,Y)
	bsr	_id_match
	cmp	AH,#H'0000
	beq	?L50
	tst	@(H'0010,Y)
	beq	?L52
	ld	AH,@(H'0007,Y)
	add	AH,#H'001E
	ld	AL,@(H'0010,Y)
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L50
?L52:
	ld	X,@_conn_list_head
	tst	@(H'0022,X)
	bne	?L53
	ld	AL,#H'0000
	bra	(?L60)
?L53:
	ld	X,@(H'0007,Y)
	cmp	X,@_conn_list_head
	bne	?L55
	ld	AL,@(H'0022,X)
?L60:
	st	AL,@_conn_list_head
	bra	(?L54)
?L55:
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0022,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'0022,X)
?L54:
	ld	AH,@(H'0007,Y)
;	bsr	$_free
	DC	((256*4)+9)
	ld	AH,#H'0001
	bra	(?L46)
?L50:
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0008,Y)
	ld	X,@$XAP_AL
	ld	X,@(H'0022,X)
	st	X,@(H'0007,Y)
	cmp	X,#H'0000
	bne	?L57
?L59:
	ld	AH,#H'0000
?L46:
?LBE4:
?LBE_connectionDeleteInstance:
	leave	#10
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
$_connectionGetInstance:
	enter	#9
?LBB_connectionGetInstance:
	st	AH,@(H'0006,Y)
?LBB5:
	ld	AL,@_conn_list_head
	st	AL,@(H'0007,Y)
	cmp	AL,#H'0000
	beq	?L64
?L69:
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'0009
	bc2
	ld	AH,@(H'0007,Y)
	ld	AL,@(H'0006,Y)
	bsr	_id_match
	cmp	AH,#H'0000
	beq	?L66
	tst	@(H'000F,Y)
	beq	?L64
	ld	AH,@(H'0007,Y)
	add	AH,#H'001E
	ld	AL,@(H'000F,Y)
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	bne	?L64
?L66:
	ld	X,@(H'0007,Y)
	ld	X,@(H'0022,X)
	st	X,@(H'0007,Y)
	cmp	X,#H'0000
	bne	?L69
?L64:
?LBE5:
	ld	AH,@(H'0007,Y)
?LBE_connectionGetInstance:
	leave	#9
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
$_connectionGetInstanceByState:
	enter	#1
?LBB_connectionGetInstanceByState:
?LBB6:
	ld	X,@_conn_list_head
	cmp	X,#H'0000
	beq	?L73
?L76:
	ld	AL,@(0,X)
	cmp	AL,#H'0001
	bne	?L75
	ld	AL,@(H'0008,X)
	cmp	AL,@$XAP_AH
	beq	?L73
?L75:
	ld	X,@(H'0022,X)
	cmp	X,#H'0000
	bne	?L76
?L73:
?LBE6:
	ld	AH,@$XAP_UXL
?LBE_connectionGetInstanceByState:
	leave	#1
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
$_connectionGetId:
	enter	#13
?LBB_connectionGetId:
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(H'000A,Y)
	ld	AL,@H'ffff
	st	AL,@(H'000B,Y)
?LBB7:
	cmp	AH,#H'0000
	bne	?L81
	ld	AH,@$XAP_UY
	add	AH,#H'0006
	bsr	$_BdaddrSetZero
	bra	(?L82)
?L81:
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	st	AL,@(H'0006,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0007,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0008,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0009,Y)
?L82:
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	X,@$XAP_UY
	add	X,#H'0006
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0005,Y)
	ld	X,@(H'000D,Y)
	st	X,@(H'0004,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	bc2
?LBE7:
	ld	AH,@(H'000A,Y)
?LBE_connectionGetId:
	leave	#13
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
_findMatchInMap:
	enter	#1
?LBB_findMatchInMap:
	st	AH,@H'fff8
	st	AL,@H'fff9
?LBB8:
	ld	AL,#H'0000
	st	AL,@(-1,Y)
	cmp	AL,@_mapSize
	bcc	?L98
?L96:
	ld	AL,@(-1,Y)
	lsl	#H'0010
	asr	#H'000E
	ld	X,@_map?
	add	X,@$XAP_AL
	ld	AL,@(0,X)
	cmp	AL,@H'fff8
	bne	?L86
	cmp	AL,#H'0000
	beq	?L92
	ld	X,@H'fff8
	cmp	X,#H'0001
	bne	?L86
?L92:
	ld	AL,@(-1,Y)
	lsl	#H'0010
	asr	#H'000E
	ld	X,@_map?
	add	X,@$XAP_AL
	ld	AL,@(H'0001,X)
	cmp	AL,@H'fff9
	bne	?L86
	ld	AL,@(-1,Y)
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
	ld	AH,#H'0001
	bra	(?L83)
?L86:
	ld	X,#H'0001
	add	X,@(-1,Y)
	st	X,@(-1,Y)
	cmp	X,@_mapSize
	bcs	?L96
?L98:
	ld	AH,#H'0000
?L83:
?LBE8:
?LBE_findMatchInMap:
	leave	#1
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
$_connectionAddTaskMap:
	enter	#9
?LBB_connectionAddTaskMap:
	ld	X,#H'0000
	st	X,@(H'0004,Y)
	st	X,@(H'0005,Y)
	st	X,@(H'0006,Y)
	st	X,@(H'0007,Y)
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
?LBB9:
	st	AL,@(0,Y)
	ld	AL,@(H'0003,Y)
	bsr	_findMatchInMap
	cmp	AH,#H'0000
	beq	?L106
	ld	AH,#H'0000
	bra	(?L105)
?L106:
	ld	AL,@(H'0002,Y)
?LBB10:
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0005,Y)
	ld	X,@(H'0009,Y)
	st	X,@(H'0006,Y)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0007,Y)
	ld	AL,@_mapSize
	lsl	#H'0010
	asr	#H'000E
	add	AL,#H'0004
	ld	AH,@_map?
;	bsr	$_realloc
	DC	((256*5)+9)
;	bsr	$_PanicNull
	DC	((256*15)+9)
	ld	X,@$XAP_AH
	st	AH,@_map?
	ld	AL,@_mapSize
	lsl	#H'0010
	asr	#H'000E
	add	X,@$XAP_AL
	ld	AL,@(H'0004,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0003,X)
	ld	AL,@_mapSize
	add	AL,#H'0001
	st	AL,@_mapSize
	ld	AH,#H'0001
?L105:
?LBE10:
?LBE9:
?LBE_connectionAddTaskMap:
	leave	#9
;.stabn	192,0,0,?LBB9
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;.stabn	224,0,0,?LBE9
$_connectionDeleteTaskMap:
	enter	#3
?LBB_connectionDeleteTaskMap:
	ld	X,@$XAP_UY
	add	X,#H'0001
?LBB11:
	st	X,@(0,Y)
	bsr	_findMatchInMap
	cmp	AH,#H'0000
	beq	?L109
	ld	AL,@_mapSize
	cmp	AL,#H'0001
	bne	?L110
	ld	AH,@_map?
;	bsr	$_free
	DC	((256*4)+9)
	ld	AL,#H'0000
	st	AL,@_map?
	st	AL,@_mapSize
	bra	(?L111)
?L110:
	ld	AH,@(H'0001,Y)
	bsr	_deleteElement
?L111:
	ld	AH,#H'0001
	bra	(?L108)
?L109:
	ld	AH,#H'0000
?L108:
?LBE11:
?LBE_connectionDeleteTaskMap:
	leave	#3
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
$_connectionUpdateTaskMap:
	enter	#3
?LBB_connectionUpdateTaskMap:
	ld	X,@$XAP_UY
	add	X,#H'0001
?LBB12:
	st	X,@(0,Y)
	bsr	_findMatchInMap
	cmp	AH,#H'0000
	beq	?L115
	ld	AL,@(H'0001,Y)
	lsl	#H'0010
	asr	#H'000E
	ld	X,@_map?
	add	X,@$XAP_AL
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	AH,#H'0001
	bra	(?L114)
?L115:
	ld	AH,#H'0000
?L114:
?LBE12:
?LBE_connectionUpdateTaskMap:
	leave	#3
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
$_connectionCheckIdInTaskMap:
	enter	#3
?LBB_connectionCheckIdInTaskMap:
	ld	X,@$XAP_UY
	add	X,#H'0001
?LBB13:
	st	X,@(0,Y)
	bsr	_findMatchInMap
?LBE13:
?LBE_connectionCheckIdInTaskMap:
	leave	#3
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
$_connectionFindTaskMap:
	enter	#3
?LBB_connectionFindTaskMap:
	ld	X,@$XAP_UY
	add	X,#H'0001
?LBB14:
	st	X,@(0,Y)
	bsr	_findMatchInMap
	cmp	AH,#H'0000
	beq	?L119
	ld	AL,@(H'0001,Y)
	lsl	#H'0010
	asr	#H'000E
	ld	AH,@_map?
	add	AH,@$XAP_AL
	bra	(?L118)
?L119:
	ld	AH,#H'0000
?L118:
?LBE14:
?LBE_connectionFindTaskMap:
	leave	#3
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
$_connectionGetIdFromTaskMap:
	enter	#2
?LBB_connectionGetIdFromTaskMap:
	ld	X,@H'fff8
	st	X,@H'fff9
	st	AH,@H'fff8
	st	AL,@H'fffa
?LBB15:
	ld	AL,#H'0000
	st	AL,@(-1,Y)
	cmp	AL,@_mapSize
	bcc	?L140
?L138:
	ld	AL,@(-1,Y)
	lsl	#H'0010
	asr	#H'000E
	ld	X,@_map?
	add	X,@$XAP_AL
	ld	AL,@(0,X)
	cmp	AL,@H'fff8
	bne	?L124
	cmp	AL,#H'0000
	beq	?L128
	ld	X,@H'fff8
	cmp	X,#H'0001
	beq	?L129
	bra	(?L124)
?L128:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	bra	(?L124)
?L129:
?LBB16:
	ld	X,#H'0021
	st	X,@(0,Y)
	ld	AL,@(-1,Y)
	lsl	#H'0010
	asr	#H'000E
	ld	X,@_map?
	add	X,@$XAP_AL
	ld	AH,@(H'0003,X)
	cmp	AH,#H'0000
	beq	?L124
?L135:
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	ld	X,@H'fffa
	cmp	AL,@(0,X)
	bne	?L132
	ld	AL,@(-1,Y)
	lsl	#H'0010
	asr	#H'000E
	ld	X,@_map?
	add	X,@$XAP_AL
	ld	X,@(H'0001,X)
	ld	AL,@$XAP_UXL
	bra	(?L142)
?L132:
	ld	X,@$XAP_AH
	ld	AH,@(H'0004,X)
	cmp	AH,#H'0000
	bne	?L135
?L124:
?LBE16:
	ld	AL,#H'0001
	add	AL,@(-1,Y)
	st	AL,@(-1,Y)
	cmp	AL,@_mapSize
	bcs	?L138
?L140:
	ld	AL,@(0,Y)
?L142:
	ld	X,@H'fff9
	st	AL,@(0,X)
?LBE15:
	ld	AH,@H'fff9
?LBE_connectionGetIdFromTaskMap:
	leave	#2
;.stabn	192,0,0,?LBB15
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
;.stabn	224,0,0,?LBE15
$_connectionGetTaskFromMap:
	enter	#3
?LBB_connectionGetTaskFromMap:
?LBB17:
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	ld	X,@$XAP_UY
	add	X,#H'0001
	st	X,@(0,Y)
	bsr	_findMatchInMap
	cmp	AH,#H'0000
	beq	?L149
	ld	AL,@(H'0001,Y)
	lsl	#H'0010
	asr	#H'000E
	ld	X,@_map?
	add	X,@$XAP_AL
	ld	AH,@(H'0002,X)
	bra	(?L148)
?L149:
	ld	AH,#H'0000
?L148:
?LBE17:
?LBE_connectionGetTaskFromMap:
	leave	#3
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
$_connectionGetPsmTaskMatch:
	enter	#1
?LBB_connectionGetPsmTaskMatch:
	st	AH,@H'fff9
	st	AL,@H'fff8
?LBB18:
	ld	X,@_conn_list_head
	ld	AH,#H'0000
	cmp	X,#H'0000
	beq	?L158
?L156:
	tst	@(0,X)
	bne	?L155
	ld	AL,@(H'001D,X)
	cmp	AL,@H'fff8
	bne	?L155
	ld	AL,@(H'0001,X)
	cmp	AL,@H'fff9
	bne	?L155
	add	AH,#H'0001
?L155:
	ld	X,@(H'0022,X)
	cmp	X,#H'0000
	bne	?L156
?L158:
?LBE18:
?LBE_connectionGetPsmTaskMatch:
	leave	#1
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
$_connectionGetPsmBdaddrMatch:
	enter	#4
?LBB_connectionGetPsmBdaddrMatch:
	st	AH,@(0,Y)
?LBB19:
	ld	AL,@_conn_list_head
	st	AL,@(H'0001,Y)
	ld	X,#H'0000
	st	X,@(H'0002,Y)
	ld	AL,#H'0000
	ld	X,@(H'0008,Y)
	st	AL,@(0,X)
	tst	@(H'0001,Y)
	beq	?L168
?L166:
	ld	X,@(H'0001,Y)
	tst	@(0,X)
	bne	?L165
	ld	AH,@$XAP_UXL
	add	AH,#H'001E
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L165
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	cmp	AL,@(0,Y)
	bne	?L165
	ld	X,@(H'0008,Y)
	ld	AL,@(0,X)
	add	AL,#H'0001
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	X,@(H'001D,X)
	st	X,@(H'0002,Y)
?L165:
	ld	X,@(H'0001,Y)
	ld	X,@(H'0022,X)
	st	X,@(H'0001,Y)
	cmp	X,#H'0000
	bne	?L166
?L168:
?LBE19:
	ld	AH,@(H'0002,Y)
?LBE_connectionGetPsmBdaddrMatch:
	leave	#4
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
$_connectionCompletedConnectionsGetPsmTaskMatch:
	enter	#1
?LBB_connectionCompletedConnectionsGetPsmTaskMatch:
	st	AH,@H'fff9
	st	AL,@H'fff8
?LBB20:
	ld	AL,@_multiple_channels_list_head
	st	AL,@(-1,Y)
	ld	X,#H'0000
	st	X,@(-2,Y)
	st	X,@H'fffa
	cmp	X,@_multiple_channels_entries
	bcc	?L178
	ld	AH,@_multiple_channels_entries
?L176:
	ld	X,@(-1,Y)
	ld	AL,@(0,X)
	cmp	AL,@H'fff8
	bne	?L175
	ld	AL,@(H'0002,X)
	cmp	AL,@H'fff9
	bne	?L175
	ld	AL,#H'0001
	add	AL,@(-2,Y)
	st	AL,@(-2,Y)
?L175:
	ld	X,#H'0007
	add	X,@(-1,Y)
	st	X,@(-1,Y)
	ld	AL,#H'0001
	add	AL,@H'fffa
	st	AL,@H'fffa
	cmp	AL,@$XAP_AH
	bcs	?L176
?L178:
?LBE20:
	ld	AH,@(-2,Y)
?LBE_connectionCompletedConnectionsGetPsmTaskMatch:
	leave	#1
;.stabn	192,0,0,?LBB20
;.stabn	224,0,0,?LBE20
$_connectionCompletedConnectionsGetPsmBdaddrMatch:
	enter	#5
?LBB_connectionCompletedConnectionsGetPsmBdaddrMatch:
	st	AH,@(0,Y)
?LBB21:
	ld	AL,@_multiple_channels_list_head
	st	AL,@(H'0001,Y)
	ld	X,#H'0000
	st	X,@(H'0002,Y)
	ld	AL,#H'0000
	ld	X,@(H'0009,Y)
	st	AL,@(0,X)
	st	AL,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	cmp	X,@_multiple_channels_entries
	bcc	?L191
?L189:
	ld	AH,@(H'0001,Y)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	add	AL,#H'0005
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L188
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	cmp	AL,@(0,Y)
	bne	?L188
	ld	X,@(H'0009,Y)
	ld	AL,@(0,X)
	add	AL,#H'0001
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	X,@(0,X)
	st	X,@(H'0002,Y)
?L188:
	ld	AL,@(H'0001,Y)
	add	AL,#H'0007
	st	AL,@(H'0001,Y)
	ld	X,@(H'0003,Y)
	add	X,#H'0001
	st	X,@(H'0003,Y)
	cmp	X,@_multiple_channels_entries
	bcs	?L189
?L191:
?LBE21:
	ld	AH,@(H'0002,Y)
?LBE_connectionCompletedConnectionsGetPsmBdaddrMatch:
	leave	#5
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
$_connectionStoreCompletedConnection:
	enter	#15
?LBB_connectionStoreCompletedConnection:
	st	AH,@(H'0008,Y)
	ld	AL,@(H'000F,Y)
	st	AL,@(H'0009,Y)
	ld	AL,@(H'0010,Y)
	st	AL,@(H'000A,Y)
	ld	AL,@(H'0011,Y)
	st	AL,@(H'000B,Y)
	ld	AL,@(H'0012,Y)
	st	AL,@(H'000C,Y)
?LBB22:
	ld	AH,#H'0000
	ld	AL,@(H'0013,Y)
	bsr	$_connectionFindTaskMap
	ld	X,@$XAP_AH
	cmp	AH,#H'0000
	beq	?L195
	tst	@(H'0003,X)
	beq	?L195
	ld	X,@(H'0003,X)
	ld	AL,@(H'0003,X)
	cmp	AL,#H'0001
	bcz	?L195
	tst	@_multiple_channels_list_head
	bne	?L197
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'000D,Y)
	bra	(?L198)
?L197:
	ld	AL,@_multiple_channels_entries
	smult	#H'0007
	add	AL,#H'0007
	ld	AH,@_multiple_channels_list_head
;	bsr	$_realloc
	DC	((256*5)+9)
	st	AH,@(H'000D,Y)
	cmp	AH,#H'0000
	bne	?L198
;	bsr	$_Panic
	DC	((256*14)+9)
?L198:
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0013,Y)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0005,Y)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0006,Y)
	ld	AL,@(H'000C,Y)
	st	AL,@(H'0007,Y)
	ld	AL,@(H'0014,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@_multiple_channels_entries
	smult	#H'0007
	ld	AH,@(H'000D,Y)
	add	AH,@$XAP_AL
	ld	AL,#H'0007
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_memmove
	DC	((256*6)+9)
	ld	AL,@_multiple_channels_entries
	add	AL,#H'0001
	st	AL,@_multiple_channels_entries
	ld	AL,@(H'000D,Y)
	st	AL,@_multiple_channels_list_head
?L195:
?LBE22:
?LBE_connectionStoreCompletedConnection:
	leave	#15
;.stabn	192,0,0,?LBB22
;.stabn	224,0,0,?LBE22
$_connectionRemoveCompletedConnection:
	enter	#2
?LBB_connectionRemoveCompletedConnection:
?LBB23:
	ld	X,@_multiple_channels_list_head
	ld	AL,#H'0000
	st	AL,@H'fff8
	cmp	AL,@_multiple_channels_entries
	bcc	?L201
?L210:
	ld	AL,@(H'0001,X)
	cmp	AL,@$XAP_AH
	bne	?L206
	ld	AL,@_multiple_channels_entries
	cmp	AL,#H'0001
	bne	?L207
	ld	AH,@_multiple_channels_list_head
;	bsr	$_free
	DC	((256*4)+9)
	ld	AL,#H'0000
	st	AL,@_multiple_channels_list_head
	st	AL,@_multiple_channels_entries
	bra	(?L201)
?L207:
	ld	AH,@_multiple_channels_entries
	st	AH,@(-2,Y)
	ld	AL,#-H'0001
	add	AL,@$XAP_AH
	ld	AH,@H'fff8
	cmp	AH,@$XAP_AL
	beq	?L209
	ld	AL,@H'fff8
	smult	#H'0007
	ld	X,@$XAP_AL
	add	X,@_multiple_channels_list_head
	ld	AL,#H'0007
	add	AL,@$XAP_UXL
	st	AL,@(-1,Y)
	ld	AL,@(-2,Y)
	sub	AL,@H'fff8
	smult	#H'0007
	add	AL,#-H'0007
	st	AL,@(0,Y)
	ld	AH,@$XAP_UXL
	ld	AL,@(-1,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
?L209:
	ld	AL,@_multiple_channels_entries
	add	AL,#-H'0001
	st	AL,@_multiple_channels_entries
	smult	#H'0007
	ld	AH,@_multiple_channels_list_head
;	bsr	$_realloc
	DC	((256*5)+9)
	st	AH,@_multiple_channels_list_head
	bra	(?L201)
?L206:
	add	X,#H'0007
	ld	AL,#H'0001
	add	AL,@H'fff8
	st	AL,@H'fff8
	cmp	AL,@_multiple_channels_entries
	bcs	?L210
?L201:
?LBE23:
?LBE_connectionRemoveCompletedConnection:
	leave	#2
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
	ENDMOD

;# Function pattern *movqi2 used[0] = 144 used[1] = 42 used[3] = 1 total = 187
;# Function pattern *movqi3 used[0] = 137 total = 137
;# Function pattern *movqi8 used[0] = 38 total = 38
;# Function pattern *addqi0 used[0] = 16 total = 16
;# Function pattern *addqi2 used[0] = 25 used[2] = 17 total = 42
;# Function pattern *subqi3 used[0] = 2 total = 2
;# Function pattern *mulqi3_const used[0] = 19 total = 19
;# Function pattern jump used[0] = 22 total = 22
;# Function pattern *call1 used[0] = 7 total = 7
;# Function pattern *call_value1 used[0] = 27 total = 27
;# Function pattern *movstrqi2 used[0] = 3 total = 3
;# Function pattern movstrqi+2 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 32 used[1] = 15 total = 47
;# Function pattern movstrqi+5 used[0] = 43 total = 43
	MODULE	sdp_search
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3
;# -DCONNECTION_DEBUG_LIB -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_ConnectionSdpOpenSearchRequest:
	enter	#5
?LBB_ConnectionSdpOpenSearchRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	cmp	AL,#H'0000
	bne	?L2
	st	AL,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L2:
?LBB3:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'003D
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionSdpOpenSearchRequest:
	leave	#5
	.SEG	CONST
?LC0:
	dc	H'4F
	dc	H'75
	dc	H'74
	dc	H'20
	dc	H'6F
	dc	H'66
	dc	H'20
	dc	H'72
	dc	H'61
	dc	H'6E
	dc	H'67
	dc	H'65
	dc	H'20
	dc	H'42
	dc	H'6C
	dc	H'75
	dc	H'65
	dc	H'74
	dc	H'6F
	dc	H'6F
	dc	H'74
	dc	H'68
	dc	H'20
	dc	H'41
	dc	H'64
	dc	H'64
	dc	H'72
	dc	H'65
	dc	H'73
	dc	H'73
	dc	H'20
	dc	H'30
	dc	H'78
	dc	H'25
	dc	H'70
	dc	H'0A
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
$_ConnectionSdpCloseSearchRequest:
	enter	#4
?LBB_ConnectionSdpCloseSearchRequest:
	st	AH,@(H'0001,Y)
?LBB4:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'003E
	bsr	$_MessageSend
?LBE4:
?LBE_ConnectionSdpCloseSearchRequest:
	leave	#4
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
$_ConnectionSdpServiceSearchRequest:
	enter	#5
?LBB_ConnectionSdpServiceSearchRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB5:
	tst	@(H'0006,Y)
	bne	?L5
	ld	AH,#(?LC1)
	bsr	$_puts
;	bsr	$_Panic
	DC	((256*14)+9)
?L5:
	tst	@(H'0005,Y)
	bne	?L6
	ld	AH,#(?LC2)
	bsr	$_puts
;	bsr	$_Panic
	DC	((256*14)+9)
?L6:
	tst	@(H'0002,Y)
	bne	?L7
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	AH,#(?LC0)
	bsr	$_printf
;	bsr	$_Panic
	DC	((256*14)+9)
?L7:
?LBB6:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0007,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0005,X)
	cmp	AL,#H'0000
	beq	?L8
	ld	AH,@$XAP_AL
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0006,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0006,X)
	ld	AL,@(H'0007,Y)
;	bsr	$_memmove
	DC	((256*6)+9)
	bra	(?L9)
?L8:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0006,X)
?L9:
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'003F
	bsr	$_MessageSend
?LBE6:
?LBE5:
?LBE_ConnectionSdpServiceSearchRequest:
	leave	#5
	.SEG	CONST
?LC1:
	dc	H'73
	dc	H'64
	dc	H'70
	dc	H'20
	dc	H'2D
	dc	H'20
	dc	H'73
	dc	H'65
	dc	H'61
	dc	H'72
	dc	H'63
	dc	H'68
	dc	H'20
	dc	H'70
	dc	H'61
	dc	H'74
	dc	H'74
	dc	H'65
	dc	H'72
	dc	H'6E
	dc	H'20
	dc	H'6E
	dc	H'6F
	dc	H'74
	dc	H'20
	dc	H'73
	dc	H'75
	dc	H'70
	dc	H'70
	dc	H'6C
	dc	H'69
	dc	H'65
	dc	H'64
	dc	H'00
?LC2:
	dc	H'73
	dc	H'64
	dc	H'70
	dc	H'20
	dc	H'2D
	dc	H'20
	dc	H'6D
	dc	H'61
	dc	H'78
	dc	H'20
	dc	H'6E
	dc	H'75
	dc	H'6D
	dc	H'62
	dc	H'65
	dc	H'72
	dc	H'20
	dc	H'6F
	dc	H'66
	dc	H'20
	dc	H'72
	dc	H'65
	dc	H'63
	dc	H'6F
	dc	H'72
	dc	H'64
	dc	H'73
	dc	H'20
	dc	H'73
	dc	H'65
	dc	H'74
	dc	H'20
	dc	H'74
	dc	H'6F
	dc	H'20
	dc	H'7A
	dc	H'65
	dc	H'72
	dc	H'6F
	dc	H'00
	.CODE
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
	ENDMOD

;# Function pattern *movqi2 used[0] = 32 used[1] = 1 total = 33
;# Function pattern *movqi3 used[0] = 46 total = 46
;# Function pattern jump used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 7 total = 7
;# Function pattern *call_value1 used[0] = 12 total = 12
;# Function pattern movstrqi+2 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 2 used[1] = 3 total = 5
	MODULE	bdaddr_is_same
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_BdaddrIsSame:
	enter	#1
?LBB_BdaddrIsSame:
	st	AL,@H'fff8
	ld	AL,#H'0000
	st	AL,@(-1,Y)
	ld	X,@$XAP_AH
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	cmp	AL,@(H'0003,X)
	bne	?L2
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	cmp	AL,@(H'0002,X)
	bne	?L2
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@H'fff8
	cmp	AH,@(0,X)
	bne	?L2
	cmp	AL,@(1,X)
	bne	?L2
	ld	AL,#H'0001
	st	AL,@(-1,Y)
?L2:
	ld	AH,@(-1,Y)
?LBE_BdaddrIsSame:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 used[1] = 4 total = 10
;# Function pattern *movqi3 used[0] = 4 total = 4
;# Function pattern *movhi used[2] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 2 total = 2
;# Function pattern movstrqi+7 used[1] = 1 total = 1
	MODULE	bdaddr_is_zero
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_BdaddrIsZero:
	enter	#1
?LBB_BdaddrIsZero:
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(-1,Y)
	tst	@(H'0003,X)
	bne	?L2
	tst	@(H'0002,X)
	bne	?L2
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	cmp	AH,#H'0000
	bne	?L2
	cmp	AL,#H'0000
	bne	?L2
	ld	AL,#H'0001
	st	AL,@(-1,Y)
?L2:
	ld	AH,@(-1,Y)
?LBE_BdaddrIsZero:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 3 used[1] = 1 total = 4
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *movhi used[2] = 1 total = 1
;# Function pattern movstrqi+3 used[1] = 2 total = 2
;# Function pattern movstrqi+6 used[0] = 1 total = 1
	MODULE	bdaddr_set_zero
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -Id:\BlueLab41\tools/include/firmware
;# -Id:\BlueLab41\tools/include/standard
;# -Id:\BlueLab41\tools/include/profiles/BlueLab4.1-Release -iprefix
;# -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_BdaddrSetZero:
	enter	#1
?LBB_BdaddrSetZero:
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(H'0003,X)
	st	AL,@(H'0002,X)
	st	AL,@(H'0001,X)
	st	AL,@(0,X)
?LBE_BdaddrSetZero:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 5 total = 5
;# Function pattern *movqi3 used[0] = 1 total = 1
	MODULE	calloc
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_calloc:
	enter	#4
?LBB_calloc:
	ld	X,@$XAP_AL
?LBB2:
	ld	AL,@$XAP_AH
	smult	@$XAP_UXL
	st	AL,@(H'0002,Y)
	ld	AH,@$XAP_AL
;	bsr	$_malloc
	DC	((256*3)+9)
	st	AH,@(H'0001,Y)
	cmp	AH,#H'0000
	beq	?L2
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	bsr	$_memset
?L2:
?LBE2:
	ld	AH,@(H'0001,Y)
?LBE_calloc:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 used[1] = 1 total = 7
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *mulqi3 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	memcpy
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_memcpy:
	enter	#1
?LBB_memcpy:
	st	AH,@H'fff9
	ld	AH,@(H'0001,Y)
	ld	X,@H'fff9
?LBB2:
	st	X,@H'fff8
	st	AL,@H'fffa
	add	AH,#-H'0001
	cmp	AH,#-H'0001
	beq	?L7
?L5:
	ld	X,@H'fffa
	ld	AL,@(0,X)
	ld	X,@H'fff8
	st	AL,@(0,X)
	ld	AL,#H'0001
	add	AL,@H'fffa
	st	AL,@H'fffa
	ld	X,#H'0001
	add	X,@H'fff8
	st	X,@H'fff8
	add	AH,#-H'0001
	cmp	AH,#-H'0001
	bne	?L5
?L7:
?LBE2:
	ld	AH,@H'fff9
?LBE_memcpy:
	leave	#1
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 used[1] = 4 total = 10
;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *movqi8 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 2 used[2] = 2 total = 4
;# Function pattern movstrqi+5 used[0] = 2 total = 2
	MODULE	memset
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_memset:
	enter	#3
?LBB_memset:
	st	AH,@(H'0001,Y)
	ld	AH,@$XAP_AL
	ld	AL,@(H'0003,Y)
?LBB2:
	cmp	AL,#H'0000
	beq	?L2
	ld	X,@(H'0001,Y)
?LBB3:
	st	AH,@(0,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0001
	add	AL,#-H'0001
	st	AL,@(0,Y)
	ld	AL,@$XAP_UXL
	bsr	$_memcpy
?L2:
?LBE3:
?LBE2:
	ld	AH,@(H'0001,Y)
?LBE_memset:
	leave	#3
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 used[1] = 1 total = 7
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *addqi2 used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	strlen
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_strlen:
	enter	#1
?LBB_strlen:
	ld	AL,@$XAP_AH
	ld	X,@$XAP_AH
?LBB2:
	tst	@(0,X)
	beq	?L7
?L5:
	add	AH,#H'0001
	ld	X,@$XAP_AH
	tst	@(0,X)
	bne	?L5
?L7:
	sub	AH,@$XAP_AL
?LBE2:
?LBE_strlen:
	leave	#1
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 3 total = 3
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern *subqi3 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[1] = 2 total = 2
	MODULE	strncmp
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_strncmp:
	enter	#1
?LBB_strncmp:
	st	AH,@H'fff8
	ld	AH,@$XAP_AL
	ld	AL,@(H'0001,Y)
	ld	X,#-H'0001
	add	X,@$XAP_AL
	st	X,@(-1,Y)
	cmp	X,#-H'0001
	beq	?L3
	ld	X,@H'fff8
	tst	@(0,X)
	bne	?L10
	ld	X,@$XAP_AH
	tst	@(0,X)
	beq	?L3
?L10:
	ld	X,@H'fff8
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	cmp	AL,@(0,X)
	bcc	?L6
	ld	AH,#-H'0001
	bra	(?L1)
?L6:
	ld	X,@H'fff8
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	cmp	AL,@(0,X)
	bcz	?L7
	ld	AH,#H'0001
	bra	(?L1)
?L7:
	ld	AL,#H'0001
	add	AL,@H'fff8
	st	AL,@H'fff8
	add	AH,#H'0001
	ld	X,#-H'0001
	add	X,@(-1,Y)
	st	X,@(-1,Y)
	cmp	X,#-H'0001
	beq	?L3
	ld	X,@$XAP_AL
	tst	@(0,X)
	bne	?L10
	ld	X,@$XAP_AH
	tst	@(0,X)
	bne	?L10
?L3:
	ld	AH,#H'0000
?L1:
?LBE_strncmp:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 10 used[1] = 3 total = 13
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *movqi8 used[0] = 4 total = 4
;# Function pattern *addqi2 used[0] = 1 used[2] = 3 total = 4
;# Function pattern jump used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[1] = 4 total = 4
;# Function pattern movstrqi+5 used[0] = 4 total = 4
	MODULE	tolower
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_tolower:
	enter	#2
?LBB_tolower:
	st	AH,@(0,Y)
	bsr	$_isupper
	cmp	AH,#H'0000
	beq	?L2
	ld	AL,@(0,Y)
	add	AL,#H'0020
	st	AL,@(0,Y)
?L2:
	ld	AH,@(0,Y)
?LBE_tolower:
	leave	#2
	ENDMOD

;# Function pattern *movqi2 used[0] = 2 used[1] = 1 total = 3
;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	toupper
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_toupper:
	enter	#2
?LBB_toupper:
	st	AH,@(0,Y)
	bsr	$_islower
	cmp	AH,#H'0000
	beq	?L2
	ld	AL,@(0,Y)
	add	AL,#-H'0020
	st	AL,@(0,Y)
?L2:
	ld	AH,@(0,Y)
?LBE_toupper:
	leave	#2
	ENDMOD

;# Function pattern *movqi2 used[0] = 2 used[1] = 1 total = 3
;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	printf
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_printf:
	enter	#2
?LBB_printf:
	ld	AL,@$XAP_AH
	ld	AH,@$XAP_UY
	add	AH,#H'0002
?LBB2:
	st	AH,@(0,Y)
	ld	AH,#H'0000
	bsr	$___print
?LBE2:
?LBE_printf:
	leave	#2
	ENDMOD

;# Function pattern *movqi2 used[0] = 2 total = 2
;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *addqi0 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
	MODULE	sprintf
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_sprintf:
	enter	#2
?LBB_sprintf:
	ld	AL,@(H'0002,Y)
	ld	X,@$XAP_UY
?LBB2:
	add	X,#H'0003
	st	X,@(0,Y)
	bsr	$___print
?LBE2:
?LBE_sprintf:
	leave	#2
	ENDMOD

;# Function pattern *movqi2 used[0] = 2 total = 2
;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
	MODULE	vsprintf
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_vsprintf:
	enter	#3
?LBB_vsprintf:
	st	AH,@(H'0001,Y)
	ld	AH,@(H'0003,Y)
?LBB2:
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	bsr	$___print
	ld	X,@(H'0001,Y)
	add	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(0,X)
?LBE2:
?LBE_vsprintf:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 3 used[1] = 1 total = 4
;# Function pattern *movqi3 used[0] = 3 total = 3
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
	MODULE	puts
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_puts:
	enter	#2
?LBB_puts:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
	tst	@(0,X)
	beq	?L7
?L5:
	ld	X,@(0,Y)
	ld	AH,@(0,X)
	add	X,#H'0001
	st	X,@(0,Y)
;	bsr	$_putchar
	DC	((256*8)+9)
	ld	X,@(0,Y)
	tst	@(0,X)
	bne	?L5
?L7:
	ld	AH,#H'000A
;	bsr	$_putchar
	DC	((256*8)+9)
	ld	AH,#H'0001
?LBE_puts:
	leave	#2
	ENDMOD

;# Function pattern *movqi2 used[0] = 3 total = 3
;# Function pattern *movqi3 used[0] = 4 total = 4
;# Function pattern *movqi8 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[1] = 2 total = 2
	MODULE	_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$__init:
	enter	#1
?LBB__init:
?LBE__init:
	leave	#1
	ENDMOD

	MODULE	udiv
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$___udivhi3:
	enter	#6
?LBB___udivhi3:
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
?LBB2:
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	st	AL,@(H'0002,Y)
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$__udivmod
?LBE2:
?LBE___udivhi3:
	leave	#6
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 1 total = 1
;# Function pattern *movhi used[2] = 2 used[3] = 2 total = 4
;# Function pattern *addqi0 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
	MODULE	MessageSend
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_MessageSend:
	enter	#4
?LBB_MessageSend:
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	ld	X,#-H'0001
	st	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE_MessageSend:
	leave	#4
	ENDMOD

;# Function pattern *movqi2 used[0] = 2 total = 2
;# Function pattern *call1 used[0] = 1 total = 1
;# Function pattern movstrqi+2 used[0] = 1 total = 1
	MODULE	MessageLoop
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_MessageLoop:
	enter	#5
?LBB_MessageLoop:
?L2:
?LBB2:
?LBB3:
	ld	AH,@$XAP_UY
	add	AH,#H'0001
;	bsr	$_MessageWait
	DC	((256*11)+9)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,Y)
	ld	AH,@(H'0003,Y)
	st	AH,@(0,Y)
	ld	AH,@$XAP_UXL
	ld	X,@(0,X)
	bsr	0,X
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'0003,Y)
;	bsr	$_MessageFree
	DC	((256*13)+9)
?LBE3:
	bra	(?L2)
?LBE2:
?LBE_MessageLoop:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
	ENDMOD

;# Function pattern *movqi2 used[0] = 2 total = 2
;# Function pattern *movqi8 used[0] = 5 total = 5
;# Function pattern *addqi0 used[0] = 1 total = 1
;# Function pattern jump used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 2 total = 2
;# Function pattern *call4_sm used[1] = 1 total = 1
	MODULE	MessageSendConditionallyOnTask
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_MessageSendConditionallyOnTask:
	enter	#3
?LBB_MessageSendConditionallyOnTask:
	st	AL,@H'fff8
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@H'fff8
;	bsr	$_MessageSendConditionally
	DC	((256*12)+9)
?LBE_MessageSendConditionallyOnTask:
	leave	#3
	ENDMOD

;# Function pattern *movqi2 used[0] = 2 used[1] = 1 total = 3
;# Function pattern *call1 used[0] = 1 total = 1
;# Function pattern movstrqi+2 used[0] = 1 total = 1
	MODULE	SinkIsValid
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_SinkIsValid:
	enter	#1
?LBB_SinkIsValid:
;	bsr	$_StreamSourceFromSink
	DC	((256*74)+9)
	cmp	AH,#H'0000
	beq	?L2
	ld	AH,#H'0001
?L2:
?LBE_SinkIsValid:
	leave	#1
	ENDMOD

;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	islower
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_islower:
	enter	#1
?LBB_islower:
	ld	AL,#H'0000
	add	AH,#-H'0061
	cmp	AH,#(H'0001+H'0019)
	bcc	?L2
	ld	AL,#H'0001
?L2:
	ld	AH,@$XAP_AL
?LBE_islower:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 1 total = 1
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern movstrqi+4 used[1] = 1 total = 1
	MODULE	isupper
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$_isupper:
	enter	#1
?LBB_isupper:
	ld	AL,#H'0000
	add	AH,#-H'0041
	cmp	AH,#(H'0001+H'0019)
	bcc	?L2
	ld	AL,#H'0001
?L2:
	ld	AH,@$XAP_AL
?LBE_isupper:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 1 total = 1
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern movstrqi+4 used[1] = 1 total = 1
	MODULE	print
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
_printChar:
	enter	#1
?LBB_printChar:
	st	AL,@H'fff8
	ld	AL,@$XAP_AH
?LBB2:
	nadd	AL,#H'0000
	cmp	AL,#(H'0001+H'000F)
	bcc	?L2
	nadd	AH,#H'0000
	ld	AL,@H'fff8
;	bsr	$_VmPutChar
	DC	((256*27)+9)
	bra	(?L3)
?L2:
	ld	X,@_count
	add	X,@$XAP_AH
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,X)
	ld	AL,@H'ffff
?L3:
	ld	AL,@_count
	add	AL,#H'0001
	st	AL,@_count
?LBE2:
?LBE_printChar:
	leave	#1
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
_printString:
	enter	#3
?LBB_printString:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
	ld	X,@$XAP_AL
	tst	@(0,X)
	beq	?L10
?L8:
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	add	X,#H'0001
	st	X,@(H'0001,Y)
	ld	AH,@(0,Y)
	bsr	_printChar
	ld	X,@(H'0001,Y)
	tst	@(0,X)
	bne	?L8
?L10:
?LBE_printString:
	leave	#3
	.SEG	CONST
_digits:
	dc	H'30
	dc	H'31
	dc	H'32
	dc	H'33
	dc	H'34
	dc	H'35
	dc	H'36
	dc	H'37
	dc	H'38
	dc	H'39
	dc	H'61
	dc	H'62
	dc	H'63
	dc	H'64
	dc	H'65
	dc	H'66
	.CODE
_printUnsigned8:
	enter	#3
?LBB_printUnsigned8:
	st	AH,@(0,Y)
?LBB3:
	ld	AH,#H'0000
	st	AH,@(H'0001,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	cmp	AH,#hwrd(H'0001+H'0007)
	bcs	?L16
	bne	?L21
	cmp	AL,#lwrd(H'0001+H'0007)
	bcs	?L16
?L21:
?L15:
	ld	AL,@(H'0001,Y)
	add	AL,#H'0003
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	lsr	@(H'0001,Y)
	cmp	AH,#hwrd(H'0001+H'0007)
	bcs	?L22
	bne	?L15
	cmp	AL,#lwrd(H'0001+H'0007)
	bcc	?L15
?L22:
?L16:
?LBB4:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	lsr	@(H'0001,Y)
	and	AL,#H'0007
	add	AL,#H'0030
	ld	AH,@(0,Y)
	bsr	_printChar
	ld	AH,@(H'0001,Y)
	add	AH,#-H'0003
	st	AH,@(H'0001,Y)
?LBE4:
	cmp	AH,#H'0000
	bpl	?L16
?LBE3:
?LBE_printUnsigned8:
	leave	#3
;.stabn	192,0,0,?LBB3
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;.stabn	224,0,0,?LBE3
_printUnsigned10:
	enter	#3
?LBB_printUnsigned10:
	st	AH,@(0,Y)
?LBB5:
	ld	AH,#H'0000
	st	AH,@(H'0001,Y)
?LBB6:
	ld	X,#H'0000
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	cmp	AH,#hwrd(H'0001+H'3B9AC9FF)
	bcs	?L79
	bne	?L80
	cmp	AL,#lwrd(H'0001+H'3B9AC9FF)
	bcs	?L79
?L80:
?L28:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	add	AL,#H'3600
	addc	AH,#H'C465
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	add	X,#H'0001
	cmp	AH,#hwrd(H'0001+H'3B9AC9FF)
	bcs	?L81
	bne	?L28
	cmp	AL,#lwrd(H'0001+H'3B9AC9FF)
	bcc	?L28
?L81:
?L79:
	ld	AL,@(H'0001,Y)
	or	AL,@$XAP_UXL
	st	AL,@(H'0001,Y)
	cmp	AL,#H'0000
	beq	?L24
	ld	AL,#H'0030
	add	AL,@$XAP_UXL
	ld	AH,@(0,Y)
	bsr	_printChar
?L24:
?LBE6:
?LBB7:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,#-H'0001
?L31:
	add	X,#H'0001
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	add	AL,#H'1F00
	addc	AH,#H'FA0A
	st	AH,@H'fff8
	st	AL,@H'fff9
	cmp	AH,#H'0000
	bpl	?L31
	add	AL,#H'E100
	addc	AH,#H'05F5
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0001,Y)
	or	AL,@$XAP_UXL
	st	AL,@(H'0001,Y)
	cmp	AL,#H'0000
	beq	?L30
	ld	AL,#H'0030
	add	AL,@$XAP_UXL
	ld	AH,@(0,Y)
	bsr	_printChar
?L30:
?LBE7:
?LBB8:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,#-H'0001
?L37:
	add	X,#H'0001
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	add	AL,#H'6980
	addc	AH,#H'FF67
	st	AH,@H'fff8
	st	AL,@H'fff9
	cmp	AH,#H'0000
	bpl	?L37
	add	AL,#H'9680
	addc	AH,#H'0098
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0001,Y)
	or	AL,@$XAP_UXL
	st	AL,@(H'0001,Y)
	cmp	AL,#H'0000
	beq	?L36
	ld	AL,#H'0030
	add	AL,@$XAP_UXL
	ld	AH,@(0,Y)
	bsr	_printChar
?L36:
?LBE8:
?LBB9:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,#-H'0001
?L43:
	add	X,#H'0001
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	add	AL,#H'BDC0
	addc	AH,#H'FFF0
	st	AH,@H'fff8
	st	AL,@H'fff9
	cmp	AH,#H'0000
	bpl	?L43
	add	AL,#H'4240
	addc	AH,#H'000F
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0001,Y)
	or	AL,@$XAP_UXL
	st	AL,@(H'0001,Y)
	cmp	AL,#H'0000
	beq	?L42
	ld	AL,#H'0030
	add	AL,@$XAP_UXL
	ld	AH,@(0,Y)
	bsr	_printChar
?L42:
?LBE9:
?LBB10:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,#-H'0001
?L49:
	add	X,#H'0001
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	add	AL,#H'7960
	addc	AH,#H'FFFE
	st	AH,@H'fff8
	st	AL,@H'fff9
	cmp	AH,#H'0000
	bpl	?L49
	add	AL,#H'86A0
	addc	AH,#H'0001
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0001,Y)
	or	AL,@$XAP_UXL
	st	AL,@(H'0001,Y)
	cmp	AL,#H'0000
	beq	?L48
	ld	AL,#H'0030
	add	AL,@$XAP_UXL
	ld	AH,@(0,Y)
	bsr	_printChar
?L48:
?LBE10:
?LBB11:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,#-H'0001
?L55:
	add	X,#H'0001
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	add	AL,#H'D8F0
	addc	AH,#H'FFFF
	st	AH,@H'fff8
	st	AL,@H'fff9
	cmp	AH,#H'0000
	bpl	?L55
	add	AL,#H'2710
	addc	AH,#H'0000
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0001,Y)
	or	AL,@$XAP_UXL
	st	AL,@(H'0001,Y)
	cmp	AL,#H'0000
	beq	?L54
	ld	AL,#H'0030
	add	AL,@$XAP_UXL
	ld	AH,@(0,Y)
	bsr	_printChar
?L54:
?LBE11:
?LBB12:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,#-H'0001
?L61:
	add	X,#H'0001
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	add	AL,#H'FC18
	addc	AH,#H'FFFF
	st	AH,@H'fff8
	st	AL,@H'fff9
	cmp	AH,#H'0000
	bpl	?L61
	add	AL,#H'03E8
	addc	AH,#H'0000
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0001,Y)
	or	AL,@$XAP_UXL
	st	AL,@(H'0001,Y)
	cmp	AL,#H'0000
	beq	?L60
	ld	AL,#H'0030
	add	AL,@$XAP_UXL
	ld	AH,@(0,Y)
	bsr	_printChar
?L60:
?LBE12:
?LBB13:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,#-H'0001
?L67:
	add	X,#H'0001
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	add	AL,#H'FF9C
	addc	AH,#H'FFFF
	st	AH,@H'fff8
	st	AL,@H'fff9
	cmp	AH,#H'0000
	bpl	?L67
	add	AL,#H'0064
	addc	AH,#H'0000
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0001,Y)
	or	AL,@$XAP_UXL
	st	AL,@(H'0001,Y)
	cmp	AL,#H'0000
	beq	?L66
	ld	AL,#H'0030
	add	AL,@$XAP_UXL
	ld	AH,@(0,Y)
	bsr	_printChar
?L66:
?LBE13:
?LBB14:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,#-H'0001
?L73:
	add	X,#H'0001
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	add	AL,#H'FFF6
	addc	AH,#H'FFFF
	st	AH,@H'fff8
	st	AL,@H'fff9
	cmp	AH,#H'0000
	bpl	?L73
	add	AL,#H'000A
	addc	AH,#H'0000
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0001,Y)
	or	AL,@$XAP_UXL
	cmp	AL,#H'0000
	beq	?L72
	ld	AL,#H'0030
	add	AL,@$XAP_UXL
	ld	AH,@(0,Y)
	bsr	_printChar
?L72:
?LBE14:
	ld	AL,@(H'0004,Y)
	add	AL,#H'0030
	ld	AH,@(0,Y)
	bsr	_printChar
?LBE5:
?LBE_printUnsigned10:
	leave	#3
;.stabn	192,0,0,?LBB5
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
;.stabn	224,0,0,?LBE5
_printLowerUnsigned16:
	enter	#3
?LBB_printLowerUnsigned16:
	st	AH,@(0,Y)
?LBB15:
	ld	AH,#H'0000
	st	AH,@(H'0001,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	cmp	AH,#hwrd(H'0001+H'000F)
	bcs	?L95
	bne	?L100
	cmp	AL,#lwrd(H'0001+H'000F)
	bcs	?L95
?L100:
?L94:
	ld	AL,@(H'0001,Y)
	add	AL,#H'0004
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	lsr	@(H'0001,Y)
	cmp	AH,#hwrd(H'0001+H'000F)
	bcs	?L101
	bne	?L94
	cmp	AL,#lwrd(H'0001+H'000F)
	bcc	?L94
?L101:
?L95:
?LBB16:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	lsr	@(H'0001,Y)
	ld	X,@$XAP_AL
	and	X,#H'000F
	ld	AL,@(_digits,X)
	ld	AH,@(0,Y)
	bsr	_printChar
	ld	AH,@(H'0001,Y)
	add	AH,#-H'0004
	st	AH,@(H'0001,Y)
?LBE16:
	cmp	AH,#H'0000
	bpl	?L95
?LBE15:
?LBE_printLowerUnsigned16:
	leave	#3
;.stabn	192,0,0,?LBB15
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
;.stabn	224,0,0,?LBE15
_printUpperUnsigned16:
	enter	#3
?LBB_printUpperUnsigned16:
	st	AH,@(0,Y)
?LBB17:
	ld	AH,#H'0000
	st	AH,@(H'0001,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	cmp	AH,#hwrd(H'0001+H'000F)
	bcs	?L107
	bne	?L112
	cmp	AL,#lwrd(H'0001+H'000F)
	bcs	?L107
?L112:
?L106:
	ld	AL,@(H'0001,Y)
	add	AL,#H'0004
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	lsr	@(H'0001,Y)
	cmp	AH,#hwrd(H'0001+H'000F)
	bcs	?L113
	bne	?L106
	cmp	AL,#lwrd(H'0001+H'000F)
	bcc	?L106
?L113:
?L107:
?LBB18:
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	lsr	@(H'0001,Y)
	ld	X,@$XAP_AL
	and	X,#H'000F
	ld	AH,@(_digits,X)
	bsr	$_toupper
	ld	AL,@$XAP_AH
	ld	AH,@(0,Y)
	bsr	_printChar
	ld	AH,@(H'0001,Y)
	add	AH,#-H'0004
	st	AH,@(H'0001,Y)
?LBE18:
	cmp	AH,#H'0000
	bpl	?L107
?LBE17:
?LBE_printUpperUnsigned16:
	leave	#3
;.stabn	192,0,0,?LBB17
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
;.stabn	224,0,0,?LBE17
_skip_digits:
	enter	#1
?LBB_skip_digits:
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	add	AL,#-H'0030
	cmp	AL,#(H'0001+H'0009)
	bcc	?L120
?L118:
	add	X,#H'0001
	ld	AL,@(0,X)
	add	AL,#-H'0030
	cmp	AL,#H'0009
	bcz	?L118
?L120:
	ld	AH,@$XAP_UXL
?LBE_skip_digits:
	leave	#1
$___print:
	enter	#6
?LBB___print:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?LBB19:
	ld	AL,#H'0000
	st	AL,@_count
	ld	X,@(H'0003,Y)
	tst	@(0,X)
	beq	?L182
?L179:
	ld	X,@(H'0003,Y)
?LBB20:
	ld	AL,@(0,X)
	add	X,#H'0001
	st	X,@(H'0003,Y)
	cmp	AL,#H'0025
	bne	?L126
?LBB21:
	ld	AH,#H'0000
	st	AH,@(H'0004,Y)
	ld	AH,#H'0001
?L140:
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'002D
	bne	?L130
	ld	AL,@(H'0004,Y)
	or	AL,#H'0001
	bra	(?L188)
?L130:
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'002B
	bne	?L132
	ld	AL,@(H'0004,Y)
	or	AL,#H'0002
?L188:
	st	AL,@(H'0004,Y)
	bra	(?L185)
?L132:
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0030
	bne	?L134
	ld	AL,@(H'0004,Y)
	or	AL,#H'0004
	bra	(?L188)
?L134:
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0020
	bne	?L136
	ld	AL,@(H'0004,Y)
	or	AL,#H'0008
	bra	(?L188)
?L136:
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0023
	bne	?L138
?L185:
	add	X,#H'0001
	st	X,@(H'0003,Y)
	bra	(?L127)
?L138:
	ld	AH,#H'0000
?L127:
	cmp	AH,#H'0000
	bne	?L140
	ld	AH,@(H'0003,Y)
	bsr	_skip_digits
	st	AH,@(H'0003,Y)
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	cmp	AL,#H'002A
	bne	?L141
	ld	AH,@(H'0006,Y)
	add	AH,#H'0001
	st	AH,@(H'0006,Y)
	add	X,#H'0001
	st	X,@(H'0003,Y)
?L141:
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'002E
	bne	?L142
	add	X,#H'0001
	st	X,@(H'0003,Y)
?L142:
	ld	AH,@(H'0003,Y)
	bsr	_skip_digits
	st	AH,@(H'0003,Y)
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	cmp	AL,#H'002A
	bne	?L143
	ld	AH,@(H'0006,Y)
	add	AH,#H'0001
	st	AH,@(H'0006,Y)
	add	X,#H'0001
	st	X,@(H'0003,Y)
?L143:
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	bsr	$_tolower
	cmp	AH,#H'0068
	beq	?L145
	cmp	AH,#H'006C
	beq	?L146
	bra	(?L144)
?L145:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0001
	st	AH,@(H'0003,Y)
	bra	(?L144)
?L146:
	ld	AL,@(H'0004,Y)
	or	AL,#H'0010
	st	AL,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	add	X,#H'0001
	st	X,@(H'0003,Y)
?L144:
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	bsr	$_tolower
	ld	AL,#-H'0063
	add	AL,@$XAP_AH
	cmp	AL,#(H'0001+H'0015)
	bcc	?L176
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE177,X)
	brxl
	.SEG	CONST
?JTBASE177:
	.CODE
?L177:
	.SEG	CONST
	dc	?L174-?L177
	dc	?L165-?L177
	dc	?L176-?L177
	dc	?L176-?L177
	dc	?L176-?L177
	dc	?L176-?L177
	dc	?L165-?L177
	dc	?L176-?L177
	dc	?L176-?L177
	dc	?L176-?L177
	dc	?L176-?L177
	dc	?L176-?L177
	dc	?L161-?L177
	dc	?L151-?L177
	dc	?L176-?L177
	dc	?L176-?L177
	dc	?L175-?L177
	dc	?L176-?L177
	dc	?L158-?L177
	dc	?L176-?L177
	dc	?L176-?L177
	dc	?L151-?L177
	.CODE
?L151:
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	bsr	$_isupper
	cmp	AH,#H'0000
	beq	?L152
	ld	AL,@(H'0004,Y)
?LBB22:
	and	AL,#H'0010
	cmp	AL,#H'0000
	beq	?L153
	ld	X,@(H'0006,Y)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	st	AH,@(H'0006,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	bra	(?L154)
?L153:
	ld	X,@(H'0006,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'0001
	st	AL,@(H'0006,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
?L154:
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@(H'0002,Y)
	bsr	_printUpperUnsigned16
?LBE22:
	bra	(?L149)
?L152:
	ld	AL,@(H'0004,Y)
?LBB23:
	and	AL,#H'0010
	cmp	AL,#H'0000
	beq	?L156
	ld	X,@(H'0006,Y)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	st	AH,@(H'0006,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	bra	(?L157)
?L156:
	ld	X,@(H'0006,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'0001
	st	AL,@(H'0006,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
?L157:
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@(H'0002,Y)
	bsr	_printLowerUnsigned16
?LBE23:
	bra	(?L149)
?L158:
	ld	AL,@(H'0004,Y)
?LBB24:
	and	AL,#H'0010
	cmp	AL,#H'0000
	beq	?L159
	ld	X,@(H'0006,Y)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	st	AH,@(H'0006,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	bra	(?L173)
?L159:
	ld	X,@(H'0006,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'0001
	st	AL,@(H'0006,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
	bra	(?L173)
?L161:
	ld	AL,@(H'0004,Y)
?LBE24:
?LBB25:
	and	AL,#H'0010
	cmp	AL,#H'0000
	beq	?L162
	ld	X,@(H'0006,Y)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	st	AH,@(H'0006,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	bra	(?L163)
?L162:
	ld	X,@(H'0006,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'0001
	st	AL,@(H'0006,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
?L163:
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@(H'0002,Y)
	bsr	_printUnsigned8
?LBE25:
	bra	(?L149)
?L165:
	ld	X,@(H'0006,Y)
	tst	@(0,X)
	bpl	?L166
	ld	AH,@(H'0002,Y)
	ld	AL,#H'002D
	bra	(?L186)
?L166:
	ld	AL,@(H'0004,Y)
	and	AL,#H'0002
	cmp	AL,#H'0000
	beq	?L168
	ld	AH,@(H'0002,Y)
	ld	AL,#H'002B
	bra	(?L186)
?L168:
	ld	AL,@(H'0004,Y)
	and	AL,#H'0008
	cmp	AL,#H'0000
	beq	?L167
	ld	AH,@(H'0002,Y)
	ld	AL,#H'0020
?L186:
	bsr	_printChar
?L167:
	ld	AL,@(H'0004,Y)
?LBB26:
	and	AL,#H'0010
	cmp	AL,#H'0000
	beq	?L171
	ld	X,@(H'0006,Y)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	st	AH,@(H'0006,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	bra	(?L172)
?L171:
	ld	X,@(H'0006,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'0001
	st	AL,@(H'0006,Y)
	ld	AL,@(0,X)
	asl	#H'0010
	asr	#H'0010
?L172:
	cmp	AH,#H'0000
	bpl	?L173
	nadd	AL,#H'0000
	xor	AH,#H'FFFF
	addc	AH,#H'0000
?L173:
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@(H'0002,Y)
	bsr	_printUnsigned10
?LBE26:
	bra	(?L149)
?L174:
	ld	X,@(H'0006,Y)
	ld	AH,@$XAP_UXL
	add	AH,#H'0001
	st	AH,@(H'0006,Y)
	ld	AH,@(H'0002,Y)
	bra	(?L187)
?L175:
	ld	X,@(H'0006,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'0001
	st	AL,@(H'0006,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,@(0,X)
	bsr	_printString
	bra	(?L149)
?L176:
	ld	AH,@(H'0002,Y)
	ld	X,@(H'0003,Y)
?L187:
	ld	AL,@(0,X)
	bsr	_printChar
?L149:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0001
	st	AH,@(H'0003,Y)
?LBE21:
	bra	(?L123)
?L126:
	ld	AH,@(H'0002,Y)
	bsr	_printChar
?L123:
	ld	X,@(H'0003,Y)
?LBE20:
	tst	@(0,X)
	bne	?L179
?L182:
	ld	AL,@(H'0002,Y)
?LBB27:
	nadd	AL,#H'0000
	cmp	AL,#H'000F
	bcz	?L180
	ld	X,@(H'0002,Y)
	add	X,@_count
	ld	AL,#H'0000
	st	AL,@(0,X)
?L180:
?LBE27:
	ld	AH,@_count
?LBE19:
?LBE___print:
	leave	#6
;.stabn	192,0,0,?LBB20
;.stabn	192,0,0,?LBB21
;.stabn	192,0,0,?LBB22
;.stabn	224,0,0,?LBE22
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
;.stabn	192,0,0,?LBB25
;.stabn	224,0,0,?LBE25
;.stabn	192,0,0,?LBB26
;.stabn	224,0,0,?LBE26
;.stabn	224,0,0,?LBE21
;.stabn	224,0,0,?LBE20
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
	.SEG	VAR
_count:
	DS	1
	ENDMOD

;# Function pattern *movqi2 used[0] = 80 used[1] = 41 used[3] = 1 total = 122
;# Function pattern *movqi3 used[0] = 85 total = 85
;# Function pattern *movqi8 used[0] = 8 total = 8
;# Function pattern *movhi used[2] = 32 used[3] = 29 total = 61
;# Function pattern *addhi3 used[0] = 17 total = 17
;# Function pattern *addqi2 used[0] = 45 used[2] = 11 total = 56
;# Function pattern *andqi3 used[0] = 10 total = 10
;# Function pattern *iorqi3 used[0] = 14 total = 14
;# Function pattern *extendqihi2 used[0] = 1 total = 1
;# Function pattern *lshrhi3 used[0] = 6 total = 6
;# Function pattern negqi2 used[0] = 3 total = 3
;# Function pattern neghi2 used[0] = 1 total = 1
;# Function pattern *zero_extendqihi2 used[0] = 4 total = 4
;# Function pattern jump used[0] = 23 total = 23
;# Function pattern *call1 used[0] = 23 total = 23
;# Function pattern *call_value1 used[0] = 6 total = 6
;# Function pattern tablejump_1 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 21 used[1] = 5 total = 26
;# Function pattern movstrqi+4 used[1] = 3 total = 3
;# Function pattern movstrqi+5 used[0] = 13 total = 13
;# Function pattern movstrqi+6 used[0] = 9 total = 9
;# Function pattern movstrqi+7 used[0] = 8 total = 8
	MODULE	udivmod
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (CSR version 29 for xap)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/firmware
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/profiles/BlueLab4.1-Release
;# -I.
;# -Ic:/Perforce/bluelab41/result/image/bluelab_full/tools/include/standard
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident -fpeephole2
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.CODE
$__udivmod:
	enter	#6
?LBB__udivmod:
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
?LBB2:
	cmp	AH,#hwrd(H'0001+H'0001)
	bcs	?L17
	bne	?L8
	cmp	AL,#lwrd(H'0001+H'0001)
	bcc	?L8
?L17:
	ld	AL,#H'0000
	ld	X,@(H'0008,Y)
	st	AL,@(H'0001,X)
	st	AL,@(0,X)
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	bra	(?L7)
?L8:
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	cmp	AH,@(H'0006,Y)
	bcs	?L18
	bne	?L10
	cmp	AL,@(H'0007,Y)
	bcc	?L10
?L18:
	ld	X,@(H'0008,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	ld	AL,#H'0000
	ld	AH,#H'0000
	bra	(?L7)
?L10:
?LBB3:
	ld	AH,#H'0000
	st	AH,@(H'0003,Y)
	st	AH,@(H'0002,Y)
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	bsr	_count_leading_zeros
	st	AH,@(H'0004,Y)
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	bsr	_count_leading_zeros
	nadd	AH,@(H'0004,Y)
	st	AH,@(H'0004,Y)
?L12:
?LBB4:
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	asl	@(H'0004,Y)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	cmp	AH,@H'fff8
	bcs	?L14
	bne	?L19
	cmp	AL,@H'fff9
	bcs	?L14
?L19:
	sub	AL,@H'fff9
	subc	AH,@H'fff8
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,#H'0000
	ld	AL,#H'0001
	asl	@(H'0004,Y)
	add	AL,@(H'0003,Y)
	addc	AH,@(H'0002,Y)
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?L14:
	ld	AL,@(H'0004,Y)
?LBE4:
	add	AL,#-H'0001
	st	AL,@(H'0004,Y)
	cmp	AL,#-H'0001
	bne	?L12
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	ld	X,@(H'0008,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'0003,Y)
?L7:
?LBE3:
?LBE2:
?LBE__udivmod:
	leave	#6
;.stabn	192,0,0,?LBB3
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;.stabn	224,0,0,?LBE3
_count_leading_zeros:
	enter	#1
?LBB_count_leading_zeros:
	st	AH,@H'fff8
	st	AL,@H'fff9
?LBB5:
	lsr	#H'0010
	st	AH,@H'fffa
	st	AL,@H'fffb
	ld	X,@H'fffb
	ld	AL,#H'000F
	st	AL,@(-1,Y)
	tst	@H'fffb
	bne	?L2
	ld	X,@H'fff9
	ld	AL,#H'001F
	st	AL,@(-1,Y)
?L2:
	ld	AH,@$XAP_UXL
	lsr	#H'0008
	cmp	AH,#H'0000
	beq	?L3
	ld	X,@$XAP_AH
	ld	AL,#-H'0008
	add	AL,@(-1,Y)
	st	AL,@(-1,Y)
?L3:
	ld	AH,@$XAP_UXL
	lsr	#H'0004
	cmp	AH,#H'0000
	beq	?L4
	ld	X,@$XAP_AH
	ld	AL,#-H'0004
	add	AL,@(-1,Y)
	st	AL,@(-1,Y)
?L4:
	ld	AH,@$XAP_UXL
	lsr	#H'0002
	cmp	AH,#H'0000
	beq	?L5
	ld	X,@$XAP_AH
	ld	AL,#-H'0002
	add	AL,@(-1,Y)
	st	AL,@(-1,Y)
?L5:
	ld	AH,@$XAP_UXL
	lsr	#H'0001
	cmp	AH,#H'0000
	beq	?L6
	ld	AL,#-H'0001
	add	AL,@(-1,Y)
	st	AL,@(-1,Y)
?L6:
?LBE5:
	ld	AH,@(-1,Y)
?LBE_count_leading_zeros:
	leave	#1
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
	ENDMOD

;# Function pattern *movqi2 used[0] = 20 used[1] = 3 total = 23
;# Function pattern *movqi3 used[0] = 10 total = 10
;# Function pattern *movhi used[2] = 10 used[3] = 8 total = 18
;# Function pattern *addhi3 used[0] = 1 total = 1
;# Function pattern *subhi3 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 1 used[2] = 4 total = 5
;# Function pattern *subqi3 used[1] = 1 total = 1
;# Function pattern *ashlhi3 used[0] = 2 total = 2
;# Function pattern *lshrqi3 used[0] = 4 total = 4
;# Function pattern *lshrhi3 used[0] = 1 total = 1
;# Function pattern jump used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 4 used[1] = 1 total = 5
;# Function pattern movstrqi+5 used[0] = 1 total = 1
;# Function pattern movstrqi+7 used[0] = 1 used[1] = 2 total = 3
